kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ name }}
spec:
  selector:
    matchLabels:
      app: {{ name }}
  serviceName: {{ name }}
  # Scaling up is not intended and won't work
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ name }}
    spec:
      imagePullSecrets: []
      initContainers: []
      volumes:
        - name: traefik-configmap
          configMap:
            name: {{ name }}
            defaultMode: 420
        - name: jupyter-server-secrets
          secret:
            secretName: {{ name }}
            items:
              - key: jupyterServerCookieSecret
                path: cookie_secret
        - name: jupyter-config-notebook
          configMap:
            name: {{ name }}
            items:
              - key: jupyter_notebook_config.py
                path: jupyter_notebook_config.py
        - name: jupyter-config-server
          configMap:
            name: {{ name }}
            items:
              - key: jupyter_server_config.py
                path: jupyter_server_config.py
        - name: jupyter-config
          emptyDir:
            sizeLimit: "2Mi"
        {% if pvc["enabled"] %}
        - name: workspace
          persistentVolumeClaim:
            claimName: {{ name }}
        {% else %}
        - name: workspace
          emptyDir:
            sizeLimit: {{ storage["size"] }}
        {% endif %}
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 100

      containers:
        - name: jupyter-server
          image: {{ jupyter_server["image"] }}
          workingDir: {{ jupyter_server["rootDir"] }}
          volumeMounts:
            - name: workspace
              mountPath: {{ storage["pvc"]["mountPath"] }}
            - name: jupyter-server-secrets
              mountPath: /etc/jupyter_server_secrets
              readOnly: true
            - name: jupyter-config
              mountPath: {{ storage["pvc"]["mountPath"] }}/.jupyter_config
            - name: jupyter-config-server
              mountPath: {{ storage["pvc"]["mountPath"] }}/.jupyter_config/jupyter_server_config.py
              subPath: jupyter_server_config.py
            - name: jupyter-config-notebook
              mountPath: {{ storage["pvc"]["mountPath"] }}/.jupyter_config/jupyter_notebook_config.py
              subPath: jupyter_notebook_config.py
          env:
            - name: SERVER_APP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ name }}
                  key: jupyterServerAppToken
            - name: JUPYTER_CONFIG_PATH
              value: {{ storage["pvc"]["mountPath"] }}/.jupyter_config
          resources: {{ jupyter_server["resources"] | default({}) | tojson }}
          ports:
            - name: notebook-port
              containerPort: 8888
              protocol: TCP
          securityContext:
            runAsUser: 1000
            runAsGroup: 100
            fsGroup: 100
            allowPrivilegeEscalation: false


        - name: auth-proxy
          image: "traefik:2.1.4"
          args:
            - "--configfile=/config/traefik.yaml"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          resources:
            requests:
              cpu: 50m
              memory: 32Mi
            limits:
              cpu: 200m
              memory: 64Mi
          volumeMounts:
            - name: traefik-configmap
              mountPath: /config
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 1

        - name: cookie-cleaner
          image: ableuler/cookie-cleaner:0.0.0-9
          env:
            - name: ALLOWLIST
              value: '{{ cookie_allowlist }}'
            - name: BLOCKLIST
              value: '{{ cookie_blocklist }}'
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
          resources:
            requests:
              cpu: 20m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 64Mi

        {% if oidc["enabled"] %}
        - name: authorization-plugin
          image: ableuler/auth-test:0.0.0-1
          env:
            - name: USER_ID
              value: {{ oidc["userId"] }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            requests:
              cpu: 20m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 64Mi

        - name: authentication-plugin
          image: "bitnami/oauth2-proxy:7.1.2"
          args:
            - "--provider=oidc"
            - "--client-id={{ oidc["clientId"] }}"
            - "--oidc-issuer-url={{ oidc["issuerUrl"] }}"
            - "--session-cookie-minimal"
            - "--set-xauthrequest"
            - "--email-domain=*"
            - "--http-address=:4180"
            - "--skip-provider-button"
            - "--reverse-proxy"
            - "--upstream=static://202"
            - "--redirect-url={{ full_url }}/oauth2/callback"
          ports:
            - name: http
              containerPort: 4180
              protocol: TCP
          env:
            - name: OAUTH2_PROXY_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ name }}
                  key: authenticationPluginCookieSecret
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
              {% if "value" in auth["oidc"]["clientSecret"] %}
                secretKeyRef:
                  name: {{ name }}
                  key: oidcClientSecret
              {% endif %}
              {% if "secretKeyRef" in auth["oidc"]["clientSecret"] %}
                secretKeyRef:
                  name: {{ auth["oidc"]["clientSecret"]["secretKeyRef"]["name"] }}
                  key: {{ auth["oidc"]["clientSecret"]["secretKeyRef"]["key"] }}
              {% endif %}
          resources:
            requests:
              cpu: 20m
              memory: 16Mi
            limits:
              cpu: 100m
              memory: 32Mi
        {% endif %}
