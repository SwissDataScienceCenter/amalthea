// Package firecrest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package firecrest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APIAuthDependencyScopes = "APIAuthDependency.Scopes"
	HTTPBearerScopes        = "HTTPBearer.Scopes"
)

// Defines values for ApResponseErrorType.
const (
	Error      ApResponseErrorType = "error"
	Validation ApResponseErrorType = "validation"
)

// Defines values for ContentUnit.
const (
	Bytes ContentUnit = "bytes"
	Lines ContentUnit = "lines"
)

// Defines values for DataTransferType.
const (
	DataTransferTypeS3 DataTransferType = "s3"
)

// Defines values for FileSystemDataType.
const (
	Apps    FileSystemDataType = "apps"
	Archive FileSystemDataType = "archive"
	Project FileSystemDataType = "project"
	Scratch FileSystemDataType = "scratch"
	Store   FileSystemDataType = "store"
	Users   FileSystemDataType = "users"
)

// Defines values for HealthCheckType.
const (
	HealthCheckTypeException  HealthCheckType = "exception"
	HealthCheckTypeFilesystem HealthCheckType = "filesystem"
	HealthCheckTypeS3         HealthCheckType = "s3"
	HealthCheckTypeScheduler  HealthCheckType = "scheduler"
	HealthCheckTypeSsh        HealthCheckType = "ssh"
)

// Defines values for SchedulerType.
const (
	Pbs   SchedulerType = "pbs"
	Slurm SchedulerType = "slurm"
)

// ApResponseErrorType defines model for ApResponseErrorType.
type ApResponseErrorType string

// ApiResponseError defines model for ApiResponseError.
type ApiResponseError struct {
	Data      *ApiResponseError_Data `json:"data,omitempty"`
	ErrorType *ApResponseErrorType   `json:"errorType,omitempty"`
	Message   string                 `json:"message"`
	User      *ApiResponseError_User `json:"user,omitempty"`
}

// ApiResponseErrorData0 defines model for .
type ApiResponseErrorData0 map[string]interface{}

// ApiResponseErrorData1 defines model for .
type ApiResponseErrorData1 = map[string]interface{}

// ApiResponseError_Data defines model for ApiResponseError.Data.
type ApiResponseError_Data struct {
	union json.RawMessage
}

// ApiResponseErrorUser0 defines model for .
type ApiResponseErrorUser0 = string

// ApiResponseErrorUser1 defines model for .
type ApiResponseErrorUser1 = map[string]interface{}

// ApiResponseError_User defines model for ApiResponseError.User.
type ApiResponseError_User struct {
	union json.RawMessage
}

// BodyPostUploadFilesystemSystemNameOpsUploadPost defines model for Body_post_upload_filesystem__system_name__ops_upload_post.
type BodyPostUploadFilesystemSystemNameOpsUploadPost struct {
	// File File to be uploaded as `multipart/form-data`
	File openapi_types.File `json:"file"`
}

// BucketLifecycleConfiguration Configuration for automatic object lifecycle in storage buckets.
type BucketLifecycleConfiguration struct {
	// Days Number of days after which objects will expire automatically.
	Days *int `json:"days,omitempty"`
}

// CompressRequest defines model for CompressRequest.
type CompressRequest struct {
	// Account Name of the account in the scheduler
	Account *CompressRequest_Account `json:"account,omitempty"`

	// Dereference If set to `true`, it follows symbolic links and archive the files they point to instead of the links themselves.
	Dereference *CompressRequest_Dereference `json:"dereference,omitempty"`

	// MatchPattern Regex pattern to filter files to compress
	MatchPattern *CompressRequest_MatchPattern `json:"matchPattern,omitempty"`
	SourcePath   CompressRequest_SourcePath    `json:"sourcePath"`

	// TargetPath Target path of the compress operation
	TargetPath string `json:"targetPath"`
}

// CompressRequestAccount0 defines model for .
type CompressRequestAccount0 = string

// CompressRequestAccount1 defines model for .
type CompressRequestAccount1 = map[string]interface{}

// CompressRequest_Account Name of the account in the scheduler
type CompressRequest_Account struct {
	union json.RawMessage
}

// CompressRequestDereference0 defines model for .
type CompressRequestDereference0 = bool

// CompressRequestDereference1 defines model for .
type CompressRequestDereference1 = map[string]interface{}

// CompressRequest_Dereference If set to `true`, it follows symbolic links and archive the files they point to instead of the links themselves.
type CompressRequest_Dereference struct {
	union json.RawMessage
}

// CompressRequestMatchPattern0 defines model for .
type CompressRequestMatchPattern0 = string

// CompressRequestMatchPattern1 defines model for .
type CompressRequestMatchPattern1 = map[string]interface{}

// CompressRequest_MatchPattern Regex pattern to filter files to compress
type CompressRequest_MatchPattern struct {
	union json.RawMessage
}

// CompressRequestSourcePath0 defines model for .
type CompressRequestSourcePath0 = string

// CompressRequestSourcePath1 defines model for .
type CompressRequestSourcePath1 = map[string]interface{}

// CompressRequest_SourcePath defines model for CompressRequest.SourcePath.
type CompressRequest_SourcePath struct {
	union json.RawMessage
}

// CompressResponse defines model for CompressResponse.
type CompressResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// ContentUnit defines model for ContentUnit.
type ContentUnit string

// CopyRequest defines model for CopyRequest.
type CopyRequest struct {
	// Account Name of the account in the scheduler
	Account *CopyRequest_Account `json:"account,omitempty"`

	// Dereference If set to `true`, it follows symbolic links and copies the files they point to instead of the links themselves.
	Dereference *CopyRequest_Dereference `json:"dereference,omitempty"`
	SourcePath  CopyRequest_SourcePath   `json:"sourcePath"`

	// TargetPath Target path of the copy operation
	TargetPath string `json:"targetPath"`
}

// CopyRequestAccount0 defines model for .
type CopyRequestAccount0 = string

// CopyRequestAccount1 defines model for .
type CopyRequestAccount1 = map[string]interface{}

// CopyRequest_Account Name of the account in the scheduler
type CopyRequest_Account struct {
	union json.RawMessage
}

// CopyRequestDereference0 defines model for .
type CopyRequestDereference0 = bool

// CopyRequestDereference1 defines model for .
type CopyRequestDereference1 = map[string]interface{}

// CopyRequest_Dereference If set to `true`, it follows symbolic links and copies the files they point to instead of the links themselves.
type CopyRequest_Dereference struct {
	union json.RawMessage
}

// CopyRequestSourcePath0 defines model for .
type CopyRequestSourcePath0 = string

// CopyRequestSourcePath1 defines model for .
type CopyRequestSourcePath1 = map[string]interface{}

// CopyRequest_SourcePath defines model for CopyRequest.SourcePath.
type CopyRequest_SourcePath struct {
	union json.RawMessage
}

// CopyResponse defines model for CopyResponse.
type CopyResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// DataOperation defines model for DataOperation.
type DataOperation struct {
	// DataTransfer Data transfer service configuration
	DataTransfer *DataOperation_DataTransfer `json:"data_transfer,omitempty"`

	// MaxOpsFileSize Maximum file size (in bytes) allowed for direct upload and download. Larger files will go through the staging area.
	MaxOpsFileSize *int `json:"max_ops_file_size,omitempty"`
}

// DataOperationDataTransfer1 defines model for .
type DataOperationDataTransfer1 = map[string]interface{}

// DataOperation_DataTransfer Data transfer service configuration
type DataOperation_DataTransfer struct {
	union json.RawMessage
}

// DataTransferType Types of data transfer services
type DataTransferType string

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// DownloadFileResponse defines model for DownloadFileResponse.
type DownloadFileResponse struct {
	CompleteUploadUrl *DownloadFileResponse_CompleteUploadUrl `json:"completeUploadUrl,omitempty"`
	DownloadUrl       *DownloadFileResponse_DownloadUrl       `json:"downloadUrl,omitempty"`
	MaxPartSize       *DownloadFileResponse_MaxPartSize       `json:"maxPartSize,omitempty"`
	PartsUploadUrls   *DownloadFileResponse_PartsUploadUrls   `json:"partsUploadUrls,omitempty"`
	TransferJob       TransferJob                             `json:"transferJob"`
}

// DownloadFileResponseCompleteUploadUrl0 defines model for .
type DownloadFileResponseCompleteUploadUrl0 = string

// DownloadFileResponseCompleteUploadUrl1 defines model for .
type DownloadFileResponseCompleteUploadUrl1 = map[string]interface{}

// DownloadFileResponse_CompleteUploadUrl defines model for DownloadFileResponse.CompleteUploadUrl.
type DownloadFileResponse_CompleteUploadUrl struct {
	union json.RawMessage
}

// DownloadFileResponseDownloadUrl0 defines model for .
type DownloadFileResponseDownloadUrl0 = string

// DownloadFileResponseDownloadUrl1 defines model for .
type DownloadFileResponseDownloadUrl1 = map[string]interface{}

// DownloadFileResponse_DownloadUrl defines model for DownloadFileResponse.DownloadUrl.
type DownloadFileResponse_DownloadUrl struct {
	union json.RawMessage
}

// DownloadFileResponseMaxPartSize0 defines model for .
type DownloadFileResponseMaxPartSize0 = int

// DownloadFileResponseMaxPartSize1 defines model for .
type DownloadFileResponseMaxPartSize1 = map[string]interface{}

// DownloadFileResponse_MaxPartSize defines model for DownloadFileResponse.MaxPartSize.
type DownloadFileResponse_MaxPartSize struct {
	union json.RawMessage
}

// DownloadFileResponsePartsUploadUrls0 defines model for .
type DownloadFileResponsePartsUploadUrls0 = []string

// DownloadFileResponsePartsUploadUrls1 defines model for .
type DownloadFileResponsePartsUploadUrls1 = map[string]interface{}

// DownloadFileResponse_PartsUploadUrls defines model for DownloadFileResponse.PartsUploadUrls.
type DownloadFileResponse_PartsUploadUrls struct {
	union json.RawMessage
}

// ExtractRequest defines model for ExtractRequest.
type ExtractRequest struct {
	// Account Name of the account in the scheduler
	Account    *ExtractRequest_Account   `json:"account,omitempty"`
	SourcePath ExtractRequest_SourcePath `json:"sourcePath"`

	// TargetPath Path to the directory where to extract the compressed file
	TargetPath string `json:"targetPath"`
}

// ExtractRequestAccount0 defines model for .
type ExtractRequestAccount0 = string

// ExtractRequestAccount1 defines model for .
type ExtractRequestAccount1 = map[string]interface{}

// ExtractRequest_Account Name of the account in the scheduler
type ExtractRequest_Account struct {
	union json.RawMessage
}

// ExtractRequestSourcePath0 defines model for .
type ExtractRequestSourcePath0 = string

// ExtractRequestSourcePath1 defines model for .
type ExtractRequestSourcePath1 = map[string]interface{}

// ExtractRequest_SourcePath defines model for ExtractRequest.SourcePath.
type ExtractRequest_SourcePath struct {
	union json.RawMessage
}

// ExtractResponse defines model for ExtractResponse.
type ExtractResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// File defines model for File.
type File struct {
	Group        string          `json:"group"`
	LastModified string          `json:"lastModified"`
	LinkTarget   File_LinkTarget `json:"linkTarget"`
	Name         string          `json:"name"`
	Permissions  string          `json:"permissions"`
	Size         string          `json:"size"`
	Type         string          `json:"type"`
	User         string          `json:"user"`
}

// FileLinkTarget0 defines model for .
type FileLinkTarget0 = string

// FileLinkTarget1 defines model for .
type FileLinkTarget1 = map[string]interface{}

// File_LinkTarget defines model for File.LinkTarget.
type File_LinkTarget struct {
	union json.RawMessage
}

// FileChecksum defines model for FileChecksum.
type FileChecksum struct {
	Algorithm *string `json:"algorithm,omitempty"`
	Checksum  string  `json:"checksum"`
}

// FileContent defines model for FileContent.
type FileContent struct {
	Content       string      `json:"content"`
	ContentType   ContentUnit `json:"contentType"`
	EndPosition   int         `json:"endPosition"`
	StartPosition int         `json:"startPosition"`
}

// FileStat defines model for FileStat.
type FileStat struct {
	Atime int `json:"atime"`
	Ctime int `json:"ctime"`
	Dev   int `json:"dev"`
	Gid   int `json:"gid"`
	Ino   int `json:"ino"`
	Mode  int `json:"mode"`
	Mtime int `json:"mtime"`
	Nlink int `json:"nlink"`
	Size  int `json:"size"`
	Uid   int `json:"uid"`
}

// FileSystem Defines a cluster file system and its type.
type FileSystem struct {
	// DataType Data types for cluster file systems.
	DataType FileSystemDataType `json:"dataType"`

	// DefaultWorkDir Mark this as the default working directory.
	DefaultWorkDir *bool `json:"defaultWorkDir,omitempty"`

	// Path Mount path for the file system.
	Path string `json:"path"`
}

// FileSystemDataType Data types for cluster file systems.
type FileSystemDataType string

// FilesystemServiceHealth Health check for a mounted file system.
type FilesystemServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *FilesystemServiceHealth_Healthy `json:"healthy,omitempty"`

	// LastChecked Timestamp of the last health check.
	LastChecked *FilesystemServiceHealth_LastChecked `json:"lastChecked,omitempty"`

	// Latency Service response latency in seconds.
	Latency *FilesystemServiceHealth_Latency `json:"latency,omitempty"`

	// Message Optional status message.
	Message *FilesystemServiceHealth_Message `json:"message,omitempty"`

	// Path Path of the monitored file system.
	Path *FilesystemServiceHealth_Path `json:"path,omitempty"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// FilesystemServiceHealthHealthy0 defines model for .
type FilesystemServiceHealthHealthy0 = bool

// FilesystemServiceHealthHealthy1 defines model for .
type FilesystemServiceHealthHealthy1 = map[string]interface{}

// FilesystemServiceHealth_Healthy True if the service is healthy.
type FilesystemServiceHealth_Healthy struct {
	union json.RawMessage
}

// FilesystemServiceHealthLastChecked0 defines model for .
type FilesystemServiceHealthLastChecked0 = time.Time

// FilesystemServiceHealthLastChecked1 defines model for .
type FilesystemServiceHealthLastChecked1 = map[string]interface{}

// FilesystemServiceHealth_LastChecked Timestamp of the last health check.
type FilesystemServiceHealth_LastChecked struct {
	union json.RawMessage
}

// FilesystemServiceHealthLatency0 defines model for .
type FilesystemServiceHealthLatency0 = float32

// FilesystemServiceHealthLatency1 defines model for .
type FilesystemServiceHealthLatency1 = map[string]interface{}

// FilesystemServiceHealth_Latency Service response latency in seconds.
type FilesystemServiceHealth_Latency struct {
	union json.RawMessage
}

// FilesystemServiceHealthMessage0 defines model for .
type FilesystemServiceHealthMessage0 = string

// FilesystemServiceHealthMessage1 defines model for .
type FilesystemServiceHealthMessage1 = map[string]interface{}

// FilesystemServiceHealth_Message Optional status message.
type FilesystemServiceHealth_Message struct {
	union json.RawMessage
}

// FilesystemServiceHealthPath0 defines model for .
type FilesystemServiceHealthPath0 = string

// FilesystemServiceHealthPath1 defines model for .
type FilesystemServiceHealthPath1 = map[string]interface{}

// FilesystemServiceHealth_Path Path of the monitored file system.
type FilesystemServiceHealth_Path struct {
	union json.RawMessage
}

// GetDirectoryLsResponse defines model for GetDirectoryLsResponse.
type GetDirectoryLsResponse struct {
	Output GetDirectoryLsResponse_Output `json:"output"`
}

// GetDirectoryLsResponseOutput0 defines model for .
type GetDirectoryLsResponseOutput0 = []File

// GetDirectoryLsResponseOutput1 defines model for .
type GetDirectoryLsResponseOutput1 = map[string]interface{}

// GetDirectoryLsResponse_Output defines model for GetDirectoryLsResponse.Output.
type GetDirectoryLsResponse_Output struct {
	union json.RawMessage
}

// GetFileChecksumResponse defines model for GetFileChecksumResponse.
type GetFileChecksumResponse struct {
	Output GetFileChecksumResponse_Output `json:"output"`
}

// GetFileChecksumResponseOutput1 defines model for .
type GetFileChecksumResponseOutput1 = map[string]interface{}

// GetFileChecksumResponse_Output defines model for GetFileChecksumResponse.Output.
type GetFileChecksumResponse_Output struct {
	union json.RawMessage
}

// GetFileHeadResponse defines model for GetFileHeadResponse.
type GetFileHeadResponse struct {
	Output GetFileHeadResponse_Output `json:"output"`
}

// GetFileHeadResponseOutput1 defines model for .
type GetFileHeadResponseOutput1 = map[string]interface{}

// GetFileHeadResponse_Output defines model for GetFileHeadResponse.Output.
type GetFileHeadResponse_Output struct {
	union json.RawMessage
}

// GetFileStatResponse defines model for GetFileStatResponse.
type GetFileStatResponse struct {
	Output GetFileStatResponse_Output `json:"output"`
}

// GetFileStatResponseOutput1 defines model for .
type GetFileStatResponseOutput1 = map[string]interface{}

// GetFileStatResponse_Output defines model for GetFileStatResponse.Output.
type GetFileStatResponse_Output struct {
	union json.RawMessage
}

// GetFileTailResponse defines model for GetFileTailResponse.
type GetFileTailResponse struct {
	Output GetFileTailResponse_Output `json:"output"`
}

// GetFileTailResponseOutput1 defines model for .
type GetFileTailResponseOutput1 = map[string]interface{}

// GetFileTailResponse_Output defines model for GetFileTailResponse.Output.
type GetFileTailResponse_Output struct {
	union json.RawMessage
}

// GetFileTypeResponse defines model for GetFileTypeResponse.
type GetFileTypeResponse struct {
	Output GetFileTypeResponse_Output `json:"output"`
}

// GetFileTypeResponseOutput0 defines model for .
type GetFileTypeResponseOutput0 = string

// GetFileTypeResponseOutput1 defines model for .
type GetFileTypeResponseOutput1 = map[string]interface{}

// GetFileTypeResponse_Output defines model for GetFileTypeResponse.Output.
type GetFileTypeResponse_Output struct {
	union json.RawMessage
}

// GetJobMetadataResponse defines model for GetJobMetadataResponse.
type GetJobMetadataResponse struct {
	Jobs *GetJobMetadataResponse_Jobs `json:"jobs,omitempty"`
}

// GetJobMetadataResponseJobs0 defines model for .
type GetJobMetadataResponseJobs0 = []JobMetadataModel

// GetJobMetadataResponseJobs1 defines model for .
type GetJobMetadataResponseJobs1 = map[string]interface{}

// GetJobMetadataResponse_Jobs defines model for GetJobMetadataResponse.Jobs.
type GetJobMetadataResponse_Jobs struct {
	union json.RawMessage
}

// GetJobResponse defines model for GetJobResponse.
type GetJobResponse struct {
	Jobs *GetJobResponse_Jobs `json:"jobs,omitempty"`
}

// GetJobResponseJobs0 defines model for .
type GetJobResponseJobs0 = []JobModel

// GetJobResponseJobs1 defines model for .
type GetJobResponseJobs1 = map[string]interface{}

// GetJobResponse_Jobs defines model for GetJobResponse.Jobs.
type GetJobResponse_Jobs struct {
	union json.RawMessage
}

// GetLiveness defines model for GetLiveness.
type GetLiveness struct {
	HealthcheckRuns *map[string]time.Time `json:"healthcheckRuns,omitempty"`
	LastUpdate      *int                  `json:"lastUpdate,omitempty"`
}

// GetNodesResponse defines model for GetNodesResponse.
type GetNodesResponse struct {
	Nodes []NodeModel `json:"nodes"`
}

// GetPartitionsResponse defines model for GetPartitionsResponse.
type GetPartitionsResponse struct {
	Partitions []PartitionModel `json:"partitions"`
}

// GetReservationsResponse defines model for GetReservationsResponse.
type GetReservationsResponse struct {
	Reservations []ReservationModel `json:"reservations"`
}

// GetSystemsResponse defines model for GetSystemsResponse.
type GetSystemsResponse struct {
	DataOperation *GetSystemsResponse_DataOperation `json:"dataOperation,omitempty"`
	Systems       []HPCCluster                      `json:"systems"`
}

// GetSystemsResponseDataOperation1 defines model for .
type GetSystemsResponseDataOperation1 = map[string]interface{}

// GetSystemsResponse_DataOperation defines model for GetSystemsResponse.DataOperation.
type GetSystemsResponse_DataOperation struct {
	union json.RawMessage
}

// GetViewFileResponse defines model for GetViewFileResponse.
type GetViewFileResponse struct {
	Output GetViewFileResponse_Output `json:"output"`
}

// GetViewFileResponseOutput0 defines model for .
type GetViewFileResponseOutput0 = string

// GetViewFileResponseOutput1 defines model for .
type GetViewFileResponseOutput1 = map[string]interface{}

// GetViewFileResponse_Output defines model for GetViewFileResponse.Output.
type GetViewFileResponse_Output struct {
	union json.RawMessage
}

// HPCCluster Definition of an HPC cluster, including SSH access, scheduling, and
// filesystem layout. More info in
// [the systems' section](../arch/systems//README.md).
type HPCCluster struct {
	// DatatransferJobsDirectives Custom scheduler flags passed to data transfer jobs (e.g. `-pxfer` for a dedicated partition).
	DatatransferJobsDirectives *[]string `json:"datatransferJobsDirectives,omitempty"`

	// FileSystems List of mounted file systems on the cluster, such as scratch or home directories.
	FileSystems *[]FileSystem `json:"fileSystems,omitempty"`

	// Name Unique name for the cluster.
	Name string `json:"name"`

	// Probing Cluster monitoring attributes.
	Probing Probing `json:"probing"`

	// Scheduler Cluster job scheduler configuration.
	Scheduler Scheduler `json:"scheduler"`

	// ServicesHealth Optional health information for different services in the cluster.
	ServicesHealth *HPCCluster_ServicesHealth `json:"servicesHealth,omitempty"`

	// Ssh SSH connection pool configuration for remote execution.
	Ssh SSHClientPool `json:"ssh"`
}

// HPCClusterServicesHealth0 defines model for .
type HPCClusterServicesHealth0 = []HPCCluster_ServicesHealth_0_Item

// HPCCluster_ServicesHealth_0_Item defines model for HPCCluster.ServicesHealth.0.Item.
type HPCCluster_ServicesHealth_0_Item struct {
	union json.RawMessage
}

// HPCClusterServicesHealth1 defines model for .
type HPCClusterServicesHealth1 = map[string]interface{}

// HPCCluster_ServicesHealth Optional health information for different services in the cluster.
type HPCCluster_ServicesHealth struct {
	union json.RawMessage
}

// HealthCheckException Generic health check error placeholder.
type HealthCheckException struct {
	// Healthy True if the service is healthy.
	Healthy *HealthCheckException_Healthy `json:"healthy,omitempty"`

	// LastChecked Timestamp of the last health check.
	LastChecked *HealthCheckException_LastChecked `json:"lastChecked,omitempty"`

	// Latency Service response latency in seconds.
	Latency *HealthCheckException_Latency `json:"latency,omitempty"`

	// Message Optional status message.
	Message *HealthCheckException_Message `json:"message,omitempty"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// HealthCheckExceptionHealthy0 defines model for .
type HealthCheckExceptionHealthy0 = bool

// HealthCheckExceptionHealthy1 defines model for .
type HealthCheckExceptionHealthy1 = map[string]interface{}

// HealthCheckException_Healthy True if the service is healthy.
type HealthCheckException_Healthy struct {
	union json.RawMessage
}

// HealthCheckExceptionLastChecked0 defines model for .
type HealthCheckExceptionLastChecked0 = time.Time

// HealthCheckExceptionLastChecked1 defines model for .
type HealthCheckExceptionLastChecked1 = map[string]interface{}

// HealthCheckException_LastChecked Timestamp of the last health check.
type HealthCheckException_LastChecked struct {
	union json.RawMessage
}

// HealthCheckExceptionLatency0 defines model for .
type HealthCheckExceptionLatency0 = float32

// HealthCheckExceptionLatency1 defines model for .
type HealthCheckExceptionLatency1 = map[string]interface{}

// HealthCheckException_Latency Service response latency in seconds.
type HealthCheckException_Latency struct {
	union json.RawMessage
}

// HealthCheckExceptionMessage0 defines model for .
type HealthCheckExceptionMessage0 = string

// HealthCheckExceptionMessage1 defines model for .
type HealthCheckExceptionMessage1 = map[string]interface{}

// HealthCheckException_Message Optional status message.
type HealthCheckException_Message struct {
	union json.RawMessage
}

// HealthCheckType Types of services that can be health-checked.
type HealthCheckType string

// JobDescriptionModel defines model for JobDescriptionModel.
type JobDescriptionModel struct {
	// Account Charge job resources to specified account
	Account *JobDescriptionModel_Account `json:"account,omitempty"`

	// Constraints Job constraints
	Constraints *JobDescriptionModel_Constraints `json:"constraints,omitempty"`

	// Env Dictionary of environment variables to set in the job context
	Env *JobDescriptionModel_Env `json:"env,omitempty"`

	// Name Name for the job
	Name *JobDescriptionModel_Name `json:"name,omitempty"`

	// Script Script for the job
	Script *string `json:"script,omitempty"`

	// ScriptPath Path to the job in target system
	ScriptPath *string `json:"scriptPath,omitempty"`

	// StandardError Standard error file name
	StandardError *JobDescriptionModel_StandardError `json:"standardError,omitempty"`

	// StandardInput Standard input file name
	StandardInput *JobDescriptionModel_StandardInput `json:"standardInput,omitempty"`

	// StandardOutput Standard output file name
	StandardOutput *JobDescriptionModel_StandardOutput `json:"standardOutput,omitempty"`

	// WorkingDirectory Job working directory
	WorkingDirectory string `json:"working_directory"`
}

// JobDescriptionModelAccount0 defines model for .
type JobDescriptionModelAccount0 = string

// JobDescriptionModelAccount1 defines model for .
type JobDescriptionModelAccount1 = map[string]interface{}

// JobDescriptionModel_Account Charge job resources to specified account
type JobDescriptionModel_Account struct {
	union json.RawMessage
}

// JobDescriptionModelConstraints0 defines model for .
type JobDescriptionModelConstraints0 = string

// JobDescriptionModelConstraints1 defines model for .
type JobDescriptionModelConstraints1 = map[string]interface{}

// JobDescriptionModel_Constraints Job constraints
type JobDescriptionModel_Constraints struct {
	union json.RawMessage
}

// JobDescriptionModelEnv0 defines model for .
type JobDescriptionModelEnv0 map[string]string

// JobDescriptionModelEnv1 defines model for .
type JobDescriptionModelEnv1 = []string

// JobDescriptionModelEnv2 defines model for .
type JobDescriptionModelEnv2 = map[string]interface{}

// JobDescriptionModel_Env Dictionary of environment variables to set in the job context
type JobDescriptionModel_Env struct {
	union json.RawMessage
}

// JobDescriptionModelName0 defines model for .
type JobDescriptionModelName0 = string

// JobDescriptionModelName1 defines model for .
type JobDescriptionModelName1 = map[string]interface{}

// JobDescriptionModel_Name Name for the job
type JobDescriptionModel_Name struct {
	union json.RawMessage
}

// JobDescriptionModelStandardError0 defines model for .
type JobDescriptionModelStandardError0 = string

// JobDescriptionModelStandardError1 defines model for .
type JobDescriptionModelStandardError1 = map[string]interface{}

// JobDescriptionModel_StandardError Standard error file name
type JobDescriptionModel_StandardError struct {
	union json.RawMessage
}

// JobDescriptionModelStandardInput0 defines model for .
type JobDescriptionModelStandardInput0 = string

// JobDescriptionModelStandardInput1 defines model for .
type JobDescriptionModelStandardInput1 = map[string]interface{}

// JobDescriptionModel_StandardInput Standard input file name
type JobDescriptionModel_StandardInput struct {
	union json.RawMessage
}

// JobDescriptionModelStandardOutput0 defines model for .
type JobDescriptionModelStandardOutput0 = string

// JobDescriptionModelStandardOutput1 defines model for .
type JobDescriptionModelStandardOutput1 = map[string]interface{}

// JobDescriptionModel_StandardOutput Standard output file name
type JobDescriptionModel_StandardOutput struct {
	union json.RawMessage
}

// JobMetadataModel defines model for JobMetadataModel.
type JobMetadataModel struct {
	JobId          int                              `json:"jobId"`
	Script         *JobMetadataModel_Script         `json:"script,omitempty"`
	StandardError  *JobMetadataModel_StandardError  `json:"standardError,omitempty"`
	StandardInput  *JobMetadataModel_StandardInput  `json:"standardInput,omitempty"`
	StandardOutput *JobMetadataModel_StandardOutput `json:"standardOutput,omitempty"`
}

// JobMetadataModelScript0 defines model for .
type JobMetadataModelScript0 = string

// JobMetadataModelScript1 defines model for .
type JobMetadataModelScript1 = map[string]interface{}

// JobMetadataModel_Script defines model for JobMetadataModel.Script.
type JobMetadataModel_Script struct {
	union json.RawMessage
}

// JobMetadataModelStandardError0 defines model for .
type JobMetadataModelStandardError0 = string

// JobMetadataModelStandardError1 defines model for .
type JobMetadataModelStandardError1 = map[string]interface{}

// JobMetadataModel_StandardError defines model for JobMetadataModel.StandardError.
type JobMetadataModel_StandardError struct {
	union json.RawMessage
}

// JobMetadataModelStandardInput0 defines model for .
type JobMetadataModelStandardInput0 = string

// JobMetadataModelStandardInput1 defines model for .
type JobMetadataModelStandardInput1 = map[string]interface{}

// JobMetadataModel_StandardInput defines model for JobMetadataModel.StandardInput.
type JobMetadataModel_StandardInput struct {
	union json.RawMessage
}

// JobMetadataModelStandardOutput0 defines model for .
type JobMetadataModelStandardOutput0 = string

// JobMetadataModelStandardOutput1 defines model for .
type JobMetadataModelStandardOutput1 = map[string]interface{}

// JobMetadataModel_StandardOutput defines model for JobMetadataModel.StandardOutput.
type JobMetadataModel_StandardOutput struct {
	union json.RawMessage
}

// JobModel defines model for JobModel.
type JobModel struct {
	Account          *JobModel_Account         `json:"account,omitempty"`
	AllocationNodes  int                       `json:"allocationNodes"`
	Cluster          string                    `json:"cluster"`
	Group            *JobModel_Group           `json:"group,omitempty"`
	JobId            int                       `json:"jobId"`
	KillRequestUser  *JobModel_KillRequestUser `json:"killRequestUser,omitempty"`
	Name             string                    `json:"name"`
	Nodes            string                    `json:"nodes"`
	Partition        string                    `json:"partition"`
	Priority         *JobModel_Priority        `json:"priority,omitempty"`
	Status           JobStatus                 `json:"status"`
	Tasks            *JobModel_Tasks           `json:"tasks,omitempty"`
	Time             JobTime                   `json:"time"`
	User             JobModel_User             `json:"user"`
	WorkingDirectory string                    `json:"workingDirectory"`
}

// JobModelAccount0 defines model for .
type JobModelAccount0 = string

// JobModelAccount1 defines model for .
type JobModelAccount1 = map[string]interface{}

// JobModel_Account defines model for JobModel.Account.
type JobModel_Account struct {
	union json.RawMessage
}

// JobModelGroup0 defines model for .
type JobModelGroup0 = string

// JobModelGroup1 defines model for .
type JobModelGroup1 = map[string]interface{}

// JobModel_Group defines model for JobModel.Group.
type JobModel_Group struct {
	union json.RawMessage
}

// JobModelKillRequestUser0 defines model for .
type JobModelKillRequestUser0 = string

// JobModelKillRequestUser1 defines model for .
type JobModelKillRequestUser1 = map[string]interface{}

// JobModel_KillRequestUser defines model for JobModel.KillRequestUser.
type JobModel_KillRequestUser struct {
	union json.RawMessage
}

// JobModelPriority0 defines model for .
type JobModelPriority0 = int

// JobModelPriority1 defines model for .
type JobModelPriority1 = map[string]interface{}

// JobModel_Priority defines model for JobModel.Priority.
type JobModel_Priority struct {
	union json.RawMessage
}

// JobModelTasks0 defines model for .
type JobModelTasks0 = []JobTask

// JobModelTasks1 defines model for .
type JobModelTasks1 = map[string]interface{}

// JobModel_Tasks defines model for JobModel.Tasks.
type JobModel_Tasks struct {
	union json.RawMessage
}

// JobModelUser0 defines model for .
type JobModelUser0 = string

// JobModelUser1 defines model for .
type JobModelUser1 = map[string]interface{}

// JobModel_User defines model for JobModel.User.
type JobModel_User struct {
	union json.RawMessage
}

// JobStatus defines model for JobStatus.
type JobStatus struct {
	ExitCode        *JobStatus_ExitCode        `json:"exitCode,omitempty"`
	InterruptSignal *JobStatus_InterruptSignal `json:"interruptSignal,omitempty"`
	State           string                     `json:"state"`
	StateReason     *JobStatus_StateReason     `json:"stateReason,omitempty"`
}

// JobStatusExitCode0 defines model for .
type JobStatusExitCode0 = int

// JobStatusExitCode1 defines model for .
type JobStatusExitCode1 = map[string]interface{}

// JobStatus_ExitCode defines model for JobStatus.ExitCode.
type JobStatus_ExitCode struct {
	union json.RawMessage
}

// JobStatusInterruptSignal0 defines model for .
type JobStatusInterruptSignal0 = int

// JobStatusInterruptSignal1 defines model for .
type JobStatusInterruptSignal1 = map[string]interface{}

// JobStatus_InterruptSignal defines model for JobStatus.InterruptSignal.
type JobStatus_InterruptSignal struct {
	union json.RawMessage
}

// JobStatusStateReason0 defines model for .
type JobStatusStateReason0 = string

// JobStatusStateReason1 defines model for .
type JobStatusStateReason1 = map[string]interface{}

// JobStatus_StateReason defines model for JobStatus.StateReason.
type JobStatus_StateReason struct {
	union json.RawMessage
}

// JobTask defines model for JobTask.
type JobTask struct {
	Id     string    `json:"id"`
	Name   string    `json:"name"`
	Status JobStatus `json:"status"`
	Time   JobTime   `json:"time"`
}

// JobTime defines model for JobTime.
type JobTime struct {
	Elapsed   *JobTime_Elapsed   `json:"elapsed,omitempty"`
	End       *JobTime_End       `json:"end,omitempty"`
	Limit     *JobTime_Limit     `json:"limit,omitempty"`
	Start     *JobTime_Start     `json:"start,omitempty"`
	Suspended *JobTime_Suspended `json:"suspended,omitempty"`
}

// JobTimeElapsed0 defines model for .
type JobTimeElapsed0 = int

// JobTimeElapsed1 defines model for .
type JobTimeElapsed1 = map[string]interface{}

// JobTime_Elapsed defines model for JobTime.Elapsed.
type JobTime_Elapsed struct {
	union json.RawMessage
}

// JobTimeEnd0 defines model for .
type JobTimeEnd0 = int

// JobTimeEnd1 defines model for .
type JobTimeEnd1 = map[string]interface{}

// JobTime_End defines model for JobTime.End.
type JobTime_End struct {
	union json.RawMessage
}

// JobTimeLimit0 defines model for .
type JobTimeLimit0 = int

// JobTimeLimit1 defines model for .
type JobTimeLimit1 = map[string]interface{}

// JobTime_Limit defines model for JobTime.Limit.
type JobTime_Limit struct {
	union json.RawMessage
}

// JobTimeStart0 defines model for .
type JobTimeStart0 = int

// JobTimeStart1 defines model for .
type JobTimeStart1 = map[string]interface{}

// JobTime_Start defines model for JobTime.Start.
type JobTime_Start struct {
	union json.RawMessage
}

// JobTimeSuspended0 defines model for .
type JobTimeSuspended0 = int

// JobTimeSuspended1 defines model for .
type JobTimeSuspended1 = map[string]interface{}

// JobTime_Suspended defines model for JobTime.Suspended.
type JobTime_Suspended struct {
	union json.RawMessage
}

// MoveRequest defines model for MoveRequest.
type MoveRequest struct {
	// Account Name of the account in the scheduler
	Account    *MoveRequest_Account   `json:"account,omitempty"`
	SourcePath MoveRequest_SourcePath `json:"sourcePath"`

	// TargetPath Target path of the move operation
	TargetPath string `json:"targetPath"`
}

// MoveRequestAccount0 defines model for .
type MoveRequestAccount0 = string

// MoveRequestAccount1 defines model for .
type MoveRequestAccount1 = map[string]interface{}

// MoveRequest_Account Name of the account in the scheduler
type MoveRequest_Account struct {
	union json.RawMessage
}

// MoveRequestSourcePath0 defines model for .
type MoveRequestSourcePath0 = string

// MoveRequestSourcePath1 defines model for .
type MoveRequestSourcePath1 = map[string]interface{}

// MoveRequest_SourcePath defines model for MoveRequest.SourcePath.
type MoveRequest_SourcePath struct {
	union json.RawMessage
}

// MoveResponse defines model for MoveResponse.
type MoveResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// MultipartUpload Configuration for multipart upload behavior.
type MultipartUpload struct {
	// MaxPartSize Maximum size (in bytes) for multipart data transfers. Default is 2 GB.
	MaxPartSize *int `json:"max_part_size,omitempty"`

	// ParallelRuns Number of parts to upload in parallel to the staging area.
	ParallelRuns *int `json:"parallel_runs,omitempty"`

	// TmpFolder Temporary folder used for storing split parts during upload.
	TmpFolder *string `json:"tmp_folder,omitempty"`

	// UseSplit Enable or disable splitting large files into parts when uploading the file to the staging area.
	UseSplit *bool `json:"use_split,omitempty"`
}

// NodeModel defines model for NodeModel.
type NodeModel struct {
	Address     *NodeModel_Address     `json:"address,omitempty"`
	AllocCpus   *NodeModel_AllocCpus   `json:"allocCpus,omitempty"`
	AllocMemory *NodeModel_AllocMemory `json:"allocMemory,omitempty"`
	Cores       *NodeModel_Cores       `json:"cores,omitempty"`
	CpuLoad     *NodeModel_CpuLoad     `json:"cpuLoad,omitempty"`
	Cpus        int                    `json:"cpus"`
	Features    *NodeModel_Features    `json:"features,omitempty"`
	FreeMemory  *NodeModel_FreeMemory  `json:"freeMemory,omitempty"`
	Hostname    *NodeModel_Hostname    `json:"hostname,omitempty"`
	IdleCpus    *NodeModel_IdleCpus    `json:"idleCpus,omitempty"`
	Name        string                 `json:"name"`
	Partitions  *NodeModel_Partitions  `json:"partitions,omitempty"`
	Sockets     *NodeModel_Sockets     `json:"sockets,omitempty"`
	State       NodeModel_State        `json:"state"`
	Threads     *NodeModel_Threads     `json:"threads,omitempty"`
	Weight      *NodeModel_Weight      `json:"weight,omitempty"`
}

// NodeModelAddress0 defines model for .
type NodeModelAddress0 = string

// NodeModelAddress1 defines model for .
type NodeModelAddress1 = map[string]interface{}

// NodeModel_Address defines model for NodeModel.Address.
type NodeModel_Address struct {
	union json.RawMessage
}

// NodeModelAllocCpus0 defines model for .
type NodeModelAllocCpus0 = int

// NodeModelAllocCpus1 defines model for .
type NodeModelAllocCpus1 = map[string]interface{}

// NodeModel_AllocCpus defines model for NodeModel.AllocCpus.
type NodeModel_AllocCpus struct {
	union json.RawMessage
}

// NodeModelAllocMemory0 defines model for .
type NodeModelAllocMemory0 = int

// NodeModelAllocMemory1 defines model for .
type NodeModelAllocMemory1 = map[string]interface{}

// NodeModel_AllocMemory defines model for NodeModel.AllocMemory.
type NodeModel_AllocMemory struct {
	union json.RawMessage
}

// NodeModelCores0 defines model for .
type NodeModelCores0 = int

// NodeModelCores1 defines model for .
type NodeModelCores1 = map[string]interface{}

// NodeModel_Cores defines model for NodeModel.Cores.
type NodeModel_Cores struct {
	union json.RawMessage
}

// NodeModelCpuLoad0 defines model for .
type NodeModelCpuLoad0 = float32

// NodeModelCpuLoad1 defines model for .
type NodeModelCpuLoad1 = map[string]interface{}

// NodeModel_CpuLoad defines model for NodeModel.CpuLoad.
type NodeModel_CpuLoad struct {
	union json.RawMessage
}

// NodeModelFeatures0 defines model for .
type NodeModelFeatures0 = string

// NodeModelFeatures1 defines model for .
type NodeModelFeatures1 = []string

// NodeModelFeatures2 defines model for .
type NodeModelFeatures2 = map[string]interface{}

// NodeModel_Features defines model for NodeModel.Features.
type NodeModel_Features struct {
	union json.RawMessage
}

// NodeModelFreeMemory0 defines model for .
type NodeModelFreeMemory0 = int

// NodeModelFreeMemory1 defines model for .
type NodeModelFreeMemory1 = map[string]interface{}

// NodeModel_FreeMemory defines model for NodeModel.FreeMemory.
type NodeModel_FreeMemory struct {
	union json.RawMessage
}

// NodeModelHostname0 defines model for .
type NodeModelHostname0 = string

// NodeModelHostname1 defines model for .
type NodeModelHostname1 = map[string]interface{}

// NodeModel_Hostname defines model for NodeModel.Hostname.
type NodeModel_Hostname struct {
	union json.RawMessage
}

// NodeModelIdleCpus0 defines model for .
type NodeModelIdleCpus0 = int

// NodeModelIdleCpus1 defines model for .
type NodeModelIdleCpus1 = map[string]interface{}

// NodeModel_IdleCpus defines model for NodeModel.IdleCpus.
type NodeModel_IdleCpus struct {
	union json.RawMessage
}

// NodeModelPartitions0 defines model for .
type NodeModelPartitions0 = []string

// NodeModelPartitions1 defines model for .
type NodeModelPartitions1 = map[string]interface{}

// NodeModel_Partitions defines model for NodeModel.Partitions.
type NodeModel_Partitions struct {
	union json.RawMessage
}

// NodeModelSockets0 defines model for .
type NodeModelSockets0 = int

// NodeModelSockets1 defines model for .
type NodeModelSockets1 = map[string]interface{}

// NodeModel_Sockets defines model for NodeModel.Sockets.
type NodeModel_Sockets struct {
	union json.RawMessage
}

// NodeModelState0 defines model for .
type NodeModelState0 = string

// NodeModelState1 defines model for .
type NodeModelState1 = []string

// NodeModel_State defines model for NodeModel.State.
type NodeModel_State struct {
	union json.RawMessage
}

// NodeModelThreads0 defines model for .
type NodeModelThreads0 = int

// NodeModelThreads1 defines model for .
type NodeModelThreads1 = map[string]interface{}

// NodeModel_Threads defines model for NodeModel.Threads.
type NodeModel_Threads struct {
	union json.RawMessage
}

// NodeModelWeight0 defines model for .
type NodeModelWeight0 = int

// NodeModelWeight1 defines model for .
type NodeModelWeight1 = map[string]interface{}

// NodeModel_Weight defines model for NodeModel.Weight.
type NodeModel_Weight struct {
	union json.RawMessage
}

// PartitionModel defines model for PartitionModel.
type PartitionModel struct {
	Cpus       *PartitionModel_Cpus       `json:"cpus,omitempty"`
	Name       string                     `json:"name"`
	Partition  PartitionModel_Partition   `json:"partition"`
	TotalNodes *PartitionModel_TotalNodes `json:"totalNodes,omitempty"`
}

// PartitionModelCpus0 defines model for .
type PartitionModelCpus0 = int

// PartitionModelCpus1 defines model for .
type PartitionModelCpus1 = map[string]interface{}

// PartitionModel_Cpus defines model for PartitionModel.Cpus.
type PartitionModel_Cpus struct {
	union json.RawMessage
}

// PartitionModelPartition0 defines model for .
type PartitionModelPartition0 = string

// PartitionModelPartition1 defines model for .
type PartitionModelPartition1 = []string

// PartitionModel_Partition defines model for PartitionModel.Partition.
type PartitionModel_Partition struct {
	union json.RawMessage
}

// PartitionModelTotalNodes0 defines model for .
type PartitionModelTotalNodes0 = int

// PartitionModelTotalNodes1 defines model for .
type PartitionModelTotalNodes1 = map[string]interface{}

// PartitionModel_TotalNodes defines model for PartitionModel.TotalNodes.
type PartitionModel_TotalNodes struct {
	union json.RawMessage
}

// PosixIdentified defines model for PosixIdentified.
type PosixIdentified struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PostCompressRequest defines model for PostCompressRequest.
type PostCompressRequest struct {
	// Dereference If set to `true`, it follows symbolic links and archive the files they point to instead of the links themselves.
	Dereference *PostCompressRequest_Dereference `json:"dereference,omitempty"`

	// MatchPattern Regex pattern to filter files to compress
	MatchPattern *PostCompressRequest_MatchPattern `json:"matchPattern,omitempty"`
	SourcePath   PostCompressRequest_SourcePath    `json:"sourcePath"`

	// TargetPath Path to the compressed file
	TargetPath string `json:"targetPath"`
}

// PostCompressRequestDereference0 defines model for .
type PostCompressRequestDereference0 = bool

// PostCompressRequestDereference1 defines model for .
type PostCompressRequestDereference1 = map[string]interface{}

// PostCompressRequest_Dereference If set to `true`, it follows symbolic links and archive the files they point to instead of the links themselves.
type PostCompressRequest_Dereference struct {
	union json.RawMessage
}

// PostCompressRequestMatchPattern0 defines model for .
type PostCompressRequestMatchPattern0 = string

// PostCompressRequestMatchPattern1 defines model for .
type PostCompressRequestMatchPattern1 = map[string]interface{}

// PostCompressRequest_MatchPattern Regex pattern to filter files to compress
type PostCompressRequest_MatchPattern struct {
	union json.RawMessage
}

// PostCompressRequestSourcePath0 defines model for .
type PostCompressRequestSourcePath0 = string

// PostCompressRequestSourcePath1 defines model for .
type PostCompressRequestSourcePath1 = map[string]interface{}

// PostCompressRequest_SourcePath defines model for PostCompressRequest.SourcePath.
type PostCompressRequest_SourcePath struct {
	union json.RawMessage
}

// PostExtractRequest defines model for PostExtractRequest.
type PostExtractRequest struct {
	SourcePath PostExtractRequest_SourcePath `json:"sourcePath"`

	// TargetPath Path to the directory where to extract the compressed file
	TargetPath string `json:"targetPath"`
}

// PostExtractRequestSourcePath0 defines model for .
type PostExtractRequestSourcePath0 = string

// PostExtractRequestSourcePath1 defines model for .
type PostExtractRequestSourcePath1 = map[string]interface{}

// PostExtractRequest_SourcePath defines model for PostExtractRequest.SourcePath.
type PostExtractRequest_SourcePath struct {
	union json.RawMessage
}

// PostFileDownloadRequest defines model for PostFileDownloadRequest.
type PostFileDownloadRequest struct {
	// Account Name of the account in the scheduler
	Account    *PostFileDownloadRequest_Account   `json:"account,omitempty"`
	SourcePath PostFileDownloadRequest_SourcePath `json:"sourcePath"`
}

// PostFileDownloadRequestAccount0 defines model for .
type PostFileDownloadRequestAccount0 = string

// PostFileDownloadRequestAccount1 defines model for .
type PostFileDownloadRequestAccount1 = map[string]interface{}

// PostFileDownloadRequest_Account Name of the account in the scheduler
type PostFileDownloadRequest_Account struct {
	union json.RawMessage
}

// PostFileDownloadRequestSourcePath0 defines model for .
type PostFileDownloadRequestSourcePath0 = string

// PostFileDownloadRequestSourcePath1 defines model for .
type PostFileDownloadRequestSourcePath1 = map[string]interface{}

// PostFileDownloadRequest_SourcePath defines model for PostFileDownloadRequest.SourcePath.
type PostFileDownloadRequest_SourcePath struct {
	union json.RawMessage
}

// PostFileSymlinkRequest defines model for PostFileSymlinkRequest.
type PostFileSymlinkRequest struct {
	// LinkPath Path to the new symlink
	LinkPath   string                            `json:"linkPath"`
	SourcePath PostFileSymlinkRequest_SourcePath `json:"sourcePath"`
}

// PostFileSymlinkRequestSourcePath0 defines model for .
type PostFileSymlinkRequestSourcePath0 = string

// PostFileSymlinkRequestSourcePath1 defines model for .
type PostFileSymlinkRequestSourcePath1 = map[string]interface{}

// PostFileSymlinkRequest_SourcePath defines model for PostFileSymlinkRequest.SourcePath.
type PostFileSymlinkRequest_SourcePath struct {
	union json.RawMessage
}

// PostFileSymlinkResponse defines model for PostFileSymlinkResponse.
type PostFileSymlinkResponse struct {
	Output PostFileSymlinkResponse_Output `json:"output"`
}

// PostFileSymlinkResponseOutput1 defines model for .
type PostFileSymlinkResponseOutput1 = map[string]interface{}

// PostFileSymlinkResponse_Output defines model for PostFileSymlinkResponse.Output.
type PostFileSymlinkResponse_Output struct {
	union json.RawMessage
}

// PostFileUploadRequest defines model for PostFileUploadRequest.
type PostFileUploadRequest struct {
	// Account Name of the account in the scheduler
	Account *PostFileUploadRequest_Account `json:"account,omitempty"`

	// FileName Name of the local file to upload
	FileName string `json:"fileName"`

	// FileSize Size of the file to upload in bytes
	FileSize   int                              `json:"fileSize"`
	SourcePath PostFileUploadRequest_SourcePath `json:"sourcePath"`
}

// PostFileUploadRequestAccount0 defines model for .
type PostFileUploadRequestAccount0 = string

// PostFileUploadRequestAccount1 defines model for .
type PostFileUploadRequestAccount1 = map[string]interface{}

// PostFileUploadRequest_Account Name of the account in the scheduler
type PostFileUploadRequest_Account struct {
	union json.RawMessage
}

// PostFileUploadRequestSourcePath0 defines model for .
type PostFileUploadRequestSourcePath0 = string

// PostFileUploadRequestSourcePath1 defines model for .
type PostFileUploadRequestSourcePath1 = map[string]interface{}

// PostFileUploadRequest_SourcePath defines model for PostFileUploadRequest.SourcePath.
type PostFileUploadRequest_SourcePath struct {
	union json.RawMessage
}

// PostJobAttachRequest defines model for PostJobAttachRequest.
type PostJobAttachRequest struct {
	// Command Command to attach to the job
	Command *string `json:"command,omitempty"`
}

// PostJobSubmissionResponse defines model for PostJobSubmissionResponse.
type PostJobSubmissionResponse struct {
	JobId *PostJobSubmissionResponse_JobId `json:"jobId,omitempty"`
}

// PostJobSubmissionResponseJobId0 defines model for .
type PostJobSubmissionResponseJobId0 = int

// PostJobSubmissionResponseJobId1 defines model for .
type PostJobSubmissionResponseJobId1 = map[string]interface{}

// PostJobSubmissionResponse_JobId defines model for PostJobSubmissionResponse.JobId.
type PostJobSubmissionResponse_JobId struct {
	union json.RawMessage
}

// PostJobSubmitRequest defines model for PostJobSubmitRequest.
type PostJobSubmitRequest struct {
	Job JobDescriptionModel `json:"job"`
}

// PostMakeDirRequest defines model for PostMakeDirRequest.
type PostMakeDirRequest struct {
	// Parent If set to `true` creates all its parent directories if they do not already exist
	Parent     *PostMakeDirRequest_Parent    `json:"parent,omitempty"`
	SourcePath PostMakeDirRequest_SourcePath `json:"sourcePath"`
}

// PostMakeDirRequestParent0 defines model for .
type PostMakeDirRequestParent0 = bool

// PostMakeDirRequestParent1 defines model for .
type PostMakeDirRequestParent1 = map[string]interface{}

// PostMakeDirRequest_Parent If set to `true` creates all its parent directories if they do not already exist
type PostMakeDirRequest_Parent struct {
	union json.RawMessage
}

// PostMakeDirRequestSourcePath0 defines model for .
type PostMakeDirRequestSourcePath0 = string

// PostMakeDirRequestSourcePath1 defines model for .
type PostMakeDirRequestSourcePath1 = map[string]interface{}

// PostMakeDirRequest_SourcePath defines model for PostMakeDirRequest.SourcePath.
type PostMakeDirRequest_SourcePath struct {
	union json.RawMessage
}

// PostMkdirResponse defines model for PostMkdirResponse.
type PostMkdirResponse struct {
	Output PostMkdirResponse_Output `json:"output"`
}

// PostMkdirResponseOutput1 defines model for .
type PostMkdirResponseOutput1 = map[string]interface{}

// PostMkdirResponse_Output defines model for PostMkdirResponse.Output.
type PostMkdirResponse_Output struct {
	union json.RawMessage
}

// Probing Cluster monitoring attributes.
type Probing struct {
	// Interval Interval in seconds between cluster checks.
	Interval int `json:"interval"`

	// Timeout Maximum time in seconds allowed per check.
	Timeout int `json:"timeout"`
}

// PutFileChmodRequest defines model for PutFileChmodRequest.
type PutFileChmodRequest struct {
	// Mode Mode in octal permission format
	Mode       string                         `json:"mode"`
	SourcePath PutFileChmodRequest_SourcePath `json:"sourcePath"`
}

// PutFileChmodRequestSourcePath0 defines model for .
type PutFileChmodRequestSourcePath0 = string

// PutFileChmodRequestSourcePath1 defines model for .
type PutFileChmodRequestSourcePath1 = map[string]interface{}

// PutFileChmodRequest_SourcePath defines model for PutFileChmodRequest.SourcePath.
type PutFileChmodRequest_SourcePath struct {
	union json.RawMessage
}

// PutFileChmodResponse defines model for PutFileChmodResponse.
type PutFileChmodResponse struct {
	Output PutFileChmodResponse_Output `json:"output"`
}

// PutFileChmodResponseOutput1 defines model for .
type PutFileChmodResponseOutput1 = map[string]interface{}

// PutFileChmodResponse_Output defines model for PutFileChmodResponse.Output.
type PutFileChmodResponse_Output struct {
	union json.RawMessage
}

// PutFileChownRequest defines model for PutFileChownRequest.
type PutFileChownRequest struct {
	// Group Group name of the new group owner of the file
	Group *PutFileChownRequest_Group `json:"group,omitempty"`

	// Owner User name of the new user owner of the file
	Owner      *PutFileChownRequest_Owner     `json:"owner,omitempty"`
	SourcePath PutFileChownRequest_SourcePath `json:"sourcePath"`
}

// PutFileChownRequestGroup0 defines model for .
type PutFileChownRequestGroup0 = string

// PutFileChownRequestGroup1 defines model for .
type PutFileChownRequestGroup1 = map[string]interface{}

// PutFileChownRequest_Group Group name of the new group owner of the file
type PutFileChownRequest_Group struct {
	union json.RawMessage
}

// PutFileChownRequestOwner0 defines model for .
type PutFileChownRequestOwner0 = string

// PutFileChownRequestOwner1 defines model for .
type PutFileChownRequestOwner1 = map[string]interface{}

// PutFileChownRequest_Owner User name of the new user owner of the file
type PutFileChownRequest_Owner struct {
	union json.RawMessage
}

// PutFileChownRequestSourcePath0 defines model for .
type PutFileChownRequestSourcePath0 = string

// PutFileChownRequestSourcePath1 defines model for .
type PutFileChownRequestSourcePath1 = map[string]interface{}

// PutFileChownRequest_SourcePath defines model for PutFileChownRequest.SourcePath.
type PutFileChownRequest_SourcePath struct {
	union json.RawMessage
}

// PutFileChownResponse defines model for PutFileChownResponse.
type PutFileChownResponse struct {
	Output PutFileChownResponse_Output `json:"output"`
}

// PutFileChownResponseOutput1 defines model for .
type PutFileChownResponseOutput1 = map[string]interface{}

// PutFileChownResponse_Output defines model for PutFileChownResponse.Output.
type PutFileChownResponse_Output struct {
	union json.RawMessage
}

// ReservationModel defines model for ReservationModel.
type ReservationModel struct {
	EndTime   int                        `json:"endTime"`
	Features  *ReservationModel_Features `json:"features,omitempty"`
	Name      string                     `json:"name"`
	NodeList  string                     `json:"nodeList"`
	StartTime int                        `json:"startTime"`
}

// ReservationModelFeatures0 defines model for .
type ReservationModelFeatures0 = string

// ReservationModelFeatures1 defines model for .
type ReservationModelFeatures1 = map[string]interface{}

// ReservationModel_Features defines model for ReservationModel.Features.
type ReservationModel_Features struct {
	union json.RawMessage
}

// S3DataTransfer Object storage configuration, including credentials, endpoints, and upload behavior.
type S3DataTransfer struct {
	// AccessKeyId Access key ID for S3-compatible storage.
	AccessKeyId *string `json:"accessKeyId,omitempty"`

	// BucketLifecycleConfiguration Configuration for automatic object lifecycle in storage buckets.
	BucketLifecycleConfiguration *BucketLifecycleConfiguration `json:"bucketLifecycleConfiguration,omitempty"`

	// Multipart Configuration for multipart upload behavior.
	Multipart *MultipartUpload `json:"multipart,omitempty"`

	// Name Name identifier for the storage.
	Name string `json:"name"`

	// PrivateUrl Private/internal endpoint URL for the storage.
	PrivateUrl *string `json:"privateUrl,omitempty"`

	// Probing Configuration for probing storage availability.
	Probing *S3DataTransfer_Probing `json:"probing,omitempty"`

	// PublicUrl Public/external URL for the storage.
	PublicUrl string `json:"publicUrl"`

	// Region Region of the storage bucket.
	Region string `json:"region"`

	// SecretAccessKey Secret access key for storage. You can give directly the content or the file path using `'secret_file:/path/to/file'`.
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`

	// ServiceType Types of data transfer services
	ServiceType DataTransferType `json:"serviceType"`

	// ServicesHealth Optional health information for different services in the cluster.
	ServicesHealth *S3DataTransfer_ServicesHealth `json:"servicesHealth,omitempty"`

	// Tenant Optional tenant identifier for multi-tenant setups.
	Tenant *S3DataTransfer_Tenant `json:"tenant,omitempty"`

	// Ttl Time-to-live (in seconds) for generated URLs.
	Ttl int `json:"ttl"`
}

// S3DataTransferProbing1 defines model for .
type S3DataTransferProbing1 = map[string]interface{}

// S3DataTransfer_Probing Configuration for probing storage availability.
type S3DataTransfer_Probing struct {
	union json.RawMessage
}

// S3DataTransferServicesHealth0 defines model for .
type S3DataTransferServicesHealth0 = []S3DataTransfer_ServicesHealth_0_Item

// S3DataTransfer_ServicesHealth_0_Item defines model for S3DataTransfer.ServicesHealth.0.Item.
type S3DataTransfer_ServicesHealth_0_Item struct {
	union json.RawMessage
}

// S3DataTransferServicesHealth1 defines model for .
type S3DataTransferServicesHealth1 = map[string]interface{}

// S3DataTransfer_ServicesHealth Optional health information for different services in the cluster.
type S3DataTransfer_ServicesHealth struct {
	union json.RawMessage
}

// S3DataTransferTenant0 defines model for .
type S3DataTransferTenant0 = string

// S3DataTransferTenant1 defines model for .
type S3DataTransferTenant1 = map[string]interface{}

// S3DataTransfer_Tenant Optional tenant identifier for multi-tenant setups.
type S3DataTransfer_Tenant struct {
	union json.RawMessage
}

// S3ServiceHealth Health status of S3-compatible storage.
type S3ServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *S3ServiceHealth_Healthy `json:"healthy,omitempty"`

	// LastChecked Timestamp of the last health check.
	LastChecked *S3ServiceHealth_LastChecked `json:"lastChecked,omitempty"`

	// Latency Service response latency in seconds.
	Latency *S3ServiceHealth_Latency `json:"latency,omitempty"`

	// Message Optional status message.
	Message *S3ServiceHealth_Message `json:"message,omitempty"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// S3ServiceHealthHealthy0 defines model for .
type S3ServiceHealthHealthy0 = bool

// S3ServiceHealthHealthy1 defines model for .
type S3ServiceHealthHealthy1 = map[string]interface{}

// S3ServiceHealth_Healthy True if the service is healthy.
type S3ServiceHealth_Healthy struct {
	union json.RawMessage
}

// S3ServiceHealthLastChecked0 defines model for .
type S3ServiceHealthLastChecked0 = time.Time

// S3ServiceHealthLastChecked1 defines model for .
type S3ServiceHealthLastChecked1 = map[string]interface{}

// S3ServiceHealth_LastChecked Timestamp of the last health check.
type S3ServiceHealth_LastChecked struct {
	union json.RawMessage
}

// S3ServiceHealthLatency0 defines model for .
type S3ServiceHealthLatency0 = float32

// S3ServiceHealthLatency1 defines model for .
type S3ServiceHealthLatency1 = map[string]interface{}

// S3ServiceHealth_Latency Service response latency in seconds.
type S3ServiceHealth_Latency struct {
	union json.RawMessage
}

// S3ServiceHealthMessage0 defines model for .
type S3ServiceHealthMessage0 = string

// S3ServiceHealthMessage1 defines model for .
type S3ServiceHealthMessage1 = map[string]interface{}

// S3ServiceHealth_Message Optional status message.
type S3ServiceHealth_Message struct {
	union json.RawMessage
}

// SSHClientPool SSH connection pool configuration for remote execution.
type SSHClientPool struct {
	// Host SSH target hostname.
	Host string `json:"host"`

	// MaxClients Maximum number of concurrent SSH clients.
	MaxClients *int `json:"maxClients,omitempty"`

	// Port SSH port.
	Port int `json:"port"`

	// ProxyHost Optional proxy host for tunneling.
	ProxyHost *SSHClientPool_ProxyHost `json:"proxyHost,omitempty"`

	// ProxyPort Optional proxy port.
	ProxyPort *SSHClientPool_ProxyPort `json:"proxyPort,omitempty"`

	// Timeout Various SSH settings.
	Timeout *SSHTimeouts `json:"timeout,omitempty"`
}

// SSHClientPoolProxyHost0 defines model for .
type SSHClientPoolProxyHost0 = string

// SSHClientPoolProxyHost1 defines model for .
type SSHClientPoolProxyHost1 = map[string]interface{}

// SSHClientPool_ProxyHost Optional proxy host for tunneling.
type SSHClientPool_ProxyHost struct {
	union json.RawMessage
}

// SSHClientPoolProxyPort0 defines model for .
type SSHClientPoolProxyPort0 = int

// SSHClientPoolProxyPort1 defines model for .
type SSHClientPoolProxyPort1 = map[string]interface{}

// SSHClientPool_ProxyPort Optional proxy port.
type SSHClientPool_ProxyPort struct {
	union json.RawMessage
}

// SSHServiceHealth Health status of SSH service.
type SSHServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *SSHServiceHealth_Healthy `json:"healthy,omitempty"`

	// LastChecked Timestamp of the last health check.
	LastChecked *SSHServiceHealth_LastChecked `json:"lastChecked,omitempty"`

	// Latency Service response latency in seconds.
	Latency *SSHServiceHealth_Latency `json:"latency,omitempty"`

	// Message Optional status message.
	Message *SSHServiceHealth_Message `json:"message,omitempty"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// SSHServiceHealthHealthy0 defines model for .
type SSHServiceHealthHealthy0 = bool

// SSHServiceHealthHealthy1 defines model for .
type SSHServiceHealthHealthy1 = map[string]interface{}

// SSHServiceHealth_Healthy True if the service is healthy.
type SSHServiceHealth_Healthy struct {
	union json.RawMessage
}

// SSHServiceHealthLastChecked0 defines model for .
type SSHServiceHealthLastChecked0 = time.Time

// SSHServiceHealthLastChecked1 defines model for .
type SSHServiceHealthLastChecked1 = map[string]interface{}

// SSHServiceHealth_LastChecked Timestamp of the last health check.
type SSHServiceHealth_LastChecked struct {
	union json.RawMessage
}

// SSHServiceHealthLatency0 defines model for .
type SSHServiceHealthLatency0 = float32

// SSHServiceHealthLatency1 defines model for .
type SSHServiceHealthLatency1 = map[string]interface{}

// SSHServiceHealth_Latency Service response latency in seconds.
type SSHServiceHealth_Latency struct {
	union json.RawMessage
}

// SSHServiceHealthMessage0 defines model for .
type SSHServiceHealthMessage0 = string

// SSHServiceHealthMessage1 defines model for .
type SSHServiceHealthMessage1 = map[string]interface{}

// SSHServiceHealth_Message Optional status message.
type SSHServiceHealth_Message struct {
	union json.RawMessage
}

// SSHTimeouts Various SSH settings.
type SSHTimeouts struct {
	// CommandExecution Timeout (seconds) for executing commands over SSH.
	CommandExecution *int `json:"commandExecution,omitempty"`

	// Connection Timeout (seconds) for initial SSH connection.
	Connection *int `json:"connection,omitempty"`

	// IdleTimeout Max idle time (seconds) before disconnecting.
	IdleTimeout *int `json:"idleTimeout,omitempty"`

	// KeepAlive Interval (seconds) for sending keep-alive messages.
	KeepAlive *int `json:"keepAlive,omitempty"`

	// Login Timeout (seconds) for SSH login/auth.
	Login *int `json:"login,omitempty"`
}

// Scheduler Cluster job scheduler configuration.
type Scheduler struct {
	// ApiUrl REST API endpoint for scheduler.
	ApiUrl *Scheduler_ApiUrl `json:"apiUrl,omitempty"`

	// ApiVersion Scheduler API version.
	ApiVersion *Scheduler_ApiVersion `json:"apiVersion,omitempty"`

	// Timeout Timeout in seconds for scheduler communication with the API.
	Timeout *Scheduler_Timeout `json:"timeout,omitempty"`

	// Type Supported job scheduler types.
	Type SchedulerType `json:"type"`

	// Version Scheduler version.
	Version string `json:"version"`
}

// SchedulerApiUrl0 defines model for .
type SchedulerApiUrl0 = string

// SchedulerApiUrl1 defines model for .
type SchedulerApiUrl1 = map[string]interface{}

// Scheduler_ApiUrl REST API endpoint for scheduler.
type Scheduler_ApiUrl struct {
	union json.RawMessage
}

// SchedulerApiVersion0 defines model for .
type SchedulerApiVersion0 = string

// SchedulerApiVersion1 defines model for .
type SchedulerApiVersion1 = map[string]interface{}

// Scheduler_ApiVersion Scheduler API version.
type Scheduler_ApiVersion struct {
	union json.RawMessage
}

// SchedulerTimeout0 defines model for .
type SchedulerTimeout0 = int

// SchedulerTimeout1 defines model for .
type SchedulerTimeout1 = map[string]interface{}

// Scheduler_Timeout Timeout in seconds for scheduler communication with the API.
type Scheduler_Timeout struct {
	union json.RawMessage
}

// SchedulerServiceHealth Health check result for the job scheduler.
type SchedulerServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *SchedulerServiceHealth_Healthy `json:"healthy,omitempty"`

	// LastChecked Timestamp of the last health check.
	LastChecked *SchedulerServiceHealth_LastChecked `json:"lastChecked,omitempty"`

	// Latency Service response latency in seconds.
	Latency *SchedulerServiceHealth_Latency `json:"latency,omitempty"`

	// Message Optional status message.
	Message *SchedulerServiceHealth_Message `json:"message,omitempty"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// SchedulerServiceHealthHealthy0 defines model for .
type SchedulerServiceHealthHealthy0 = bool

// SchedulerServiceHealthHealthy1 defines model for .
type SchedulerServiceHealthHealthy1 = map[string]interface{}

// SchedulerServiceHealth_Healthy True if the service is healthy.
type SchedulerServiceHealth_Healthy struct {
	union json.RawMessage
}

// SchedulerServiceHealthLastChecked0 defines model for .
type SchedulerServiceHealthLastChecked0 = time.Time

// SchedulerServiceHealthLastChecked1 defines model for .
type SchedulerServiceHealthLastChecked1 = map[string]interface{}

// SchedulerServiceHealth_LastChecked Timestamp of the last health check.
type SchedulerServiceHealth_LastChecked struct {
	union json.RawMessage
}

// SchedulerServiceHealthLatency0 defines model for .
type SchedulerServiceHealthLatency0 = float32

// SchedulerServiceHealthLatency1 defines model for .
type SchedulerServiceHealthLatency1 = map[string]interface{}

// SchedulerServiceHealth_Latency Service response latency in seconds.
type SchedulerServiceHealth_Latency struct {
	union json.RawMessage
}

// SchedulerServiceHealthMessage0 defines model for .
type SchedulerServiceHealthMessage0 = string

// SchedulerServiceHealthMessage1 defines model for .
type SchedulerServiceHealthMessage1 = map[string]interface{}

// SchedulerServiceHealth_Message Optional status message.
type SchedulerServiceHealth_Message struct {
	union json.RawMessage
}

// SchedulerType Supported job scheduler types.
type SchedulerType string

// TransferJob defines model for TransferJob.
type TransferJob struct {
	JobId            int             `json:"jobId"`
	Logs             TransferJobLogs `json:"logs"`
	System           string          `json:"system"`
	WorkingDirectory string          `json:"workingDirectory"`
}

// TransferJobLogs defines model for TransferJobLogs.
type TransferJobLogs struct {
	ErrorLog  string `json:"errorLog"`
	OutputLog string `json:"outputLog"`
}

// UploadFileResponse defines model for UploadFileResponse.
type UploadFileResponse struct {
	CompleteUploadUrl *UploadFileResponse_CompleteUploadUrl `json:"completeUploadUrl,omitempty"`
	DownloadUrl       *UploadFileResponse_DownloadUrl       `json:"downloadUrl,omitempty"`
	MaxPartSize       *UploadFileResponse_MaxPartSize       `json:"maxPartSize,omitempty"`
	PartsUploadUrls   *UploadFileResponse_PartsUploadUrls   `json:"partsUploadUrls,omitempty"`
	TransferJob       TransferJob                           `json:"transferJob"`
}

// UploadFileResponseCompleteUploadUrl0 defines model for .
type UploadFileResponseCompleteUploadUrl0 = string

// UploadFileResponseCompleteUploadUrl1 defines model for .
type UploadFileResponseCompleteUploadUrl1 = map[string]interface{}

// UploadFileResponse_CompleteUploadUrl defines model for UploadFileResponse.CompleteUploadUrl.
type UploadFileResponse_CompleteUploadUrl struct {
	union json.RawMessage
}

// UploadFileResponseDownloadUrl0 defines model for .
type UploadFileResponseDownloadUrl0 = string

// UploadFileResponseDownloadUrl1 defines model for .
type UploadFileResponseDownloadUrl1 = map[string]interface{}

// UploadFileResponse_DownloadUrl defines model for UploadFileResponse.DownloadUrl.
type UploadFileResponse_DownloadUrl struct {
	union json.RawMessage
}

// UploadFileResponseMaxPartSize0 defines model for .
type UploadFileResponseMaxPartSize0 = int

// UploadFileResponseMaxPartSize1 defines model for .
type UploadFileResponseMaxPartSize1 = map[string]interface{}

// UploadFileResponse_MaxPartSize defines model for UploadFileResponse.MaxPartSize.
type UploadFileResponse_MaxPartSize struct {
	union json.RawMessage
}

// UploadFileResponsePartsUploadUrls0 defines model for .
type UploadFileResponsePartsUploadUrls0 = []string

// UploadFileResponsePartsUploadUrls1 defines model for .
type UploadFileResponsePartsUploadUrls1 = map[string]interface{}

// UploadFileResponse_PartsUploadUrls defines model for UploadFileResponse.PartsUploadUrls.
type UploadFileResponse_PartsUploadUrls struct {
	union json.RawMessage
}

// UserInfoResponse defines model for UserInfoResponse.
type UserInfoResponse struct {
	Group  PosixIdentified   `json:"group"`
	Groups []PosixIdentified `json:"groups"`
	User   PosixIdentified   `json:"user"`
}

// GetJobsComputeSystemNameJobsGetParams defines parameters for GetJobsComputeSystemNameJobsGet.
type GetJobsComputeSystemNameJobsGetParams struct {
	// Allusers If set to `true` returns all jobs visible by the current user, otherwise only the current user owned jobs
	Allusers *bool `form:"allusers,omitempty" json:"allusers,omitempty"`
}

// GetChecksumFilesystemSystemNameOpsChecksumGetParams defines parameters for GetChecksumFilesystemSystemNameOpsChecksumGet.
type GetChecksumFilesystemSystemNameOpsChecksumGetParams struct {
	// Path Target system
	Path string `form:"path" json:"path"`
}

// GetDownloadFilesystemSystemNameOpsDownloadGetParams defines parameters for GetDownloadFilesystemSystemNameOpsDownloadGet.
type GetDownloadFilesystemSystemNameOpsDownloadGetParams struct {
	// Path A file to download
	Path string `form:"path" json:"path"`
}

// GetFileFilesystemSystemNameOpsFileGetParams defines parameters for GetFileFilesystemSystemNameOpsFileGet.
type GetFileFilesystemSystemNameOpsFileGetParams struct {
	// Path A file or folder path
	Path string `form:"path" json:"path"`
}

// GetHeadFilesystemSystemNameOpsHeadGetParams defines parameters for GetHeadFilesystemSystemNameOpsHeadGet.
type GetHeadFilesystemSystemNameOpsHeadGetParams struct {
	// Path File path
	Path string `form:"path" json:"path"`

	// Bytes The output will be the first NUM bytes of each file.
	Bytes *struct {
		union json.RawMessage
	} `form:"bytes,omitempty" json:"bytes,omitempty"`

	// Lines The output will be the first NUM lines of each file.
	Lines *struct {
		union json.RawMessage
	} `form:"lines,omitempty" json:"lines,omitempty"`

	// SkipTrailing The output will be the whole file, without the last NUM bytes/lines of each file. NUM should be specified in the respective argument through `bytes` or `lines`.
	SkipTrailing *bool `form:"skipTrailing,omitempty" json:"skipTrailing,omitempty"`
}

// GetHeadFilesystemSystemNameOpsHeadGetParamsBytes0 defines parameters for GetHeadFilesystemSystemNameOpsHeadGet.
type GetHeadFilesystemSystemNameOpsHeadGetParamsBytes0 = int

// GetHeadFilesystemSystemNameOpsHeadGetParamsBytes1 defines parameters for GetHeadFilesystemSystemNameOpsHeadGet.
type GetHeadFilesystemSystemNameOpsHeadGetParamsBytes1 = map[string]interface{}

// GetHeadFilesystemSystemNameOpsHeadGetParamsLines0 defines parameters for GetHeadFilesystemSystemNameOpsHeadGet.
type GetHeadFilesystemSystemNameOpsHeadGetParamsLines0 = int

// GetHeadFilesystemSystemNameOpsHeadGetParamsLines1 defines parameters for GetHeadFilesystemSystemNameOpsHeadGet.
type GetHeadFilesystemSystemNameOpsHeadGetParamsLines1 = map[string]interface{}

// GetLsFilesystemSystemNameOpsLsGetParams defines parameters for GetLsFilesystemSystemNameOpsLsGet.
type GetLsFilesystemSystemNameOpsLsGetParams struct {
	// Path The path to list
	Path string `form:"path" json:"path"`

	// ShowHidden Show hidden files
	ShowHidden *bool `form:"showHidden,omitempty" json:"showHidden,omitempty"`

	// NumericUid List numeric user and group IDs
	NumericUid *bool `form:"numericUid,omitempty" json:"numericUid,omitempty"`

	// Recursive Recursively list files and folders
	Recursive *bool `form:"recursive,omitempty" json:"recursive,omitempty"`

	// Dereference Show information for the file the link references.
	Dereference *bool `form:"dereference,omitempty" json:"dereference,omitempty"`
}

// DeleteRmFilesystemSystemNameOpsRmDeleteParams defines parameters for DeleteRmFilesystemSystemNameOpsRmDelete.
type DeleteRmFilesystemSystemNameOpsRmDeleteParams struct {
	// Path The path to delete
	Path string `form:"path" json:"path"`
}

// GetStatFilesystemSystemNameOpsStatGetParams defines parameters for GetStatFilesystemSystemNameOpsStatGet.
type GetStatFilesystemSystemNameOpsStatGetParams struct {
	// Path A file or folder path
	Path string `form:"path" json:"path"`

	// Dereference Follow symbolic links
	Dereference *bool `form:"dereference,omitempty" json:"dereference,omitempty"`
}

// GetTailFilesystemSystemNameOpsTailGetParams defines parameters for GetTailFilesystemSystemNameOpsTailGet.
type GetTailFilesystemSystemNameOpsTailGetParams struct {
	// Path File path
	Path string `form:"path" json:"path"`

	// Bytes The output will be the last NUM bytes of each file.
	Bytes *struct {
		union json.RawMessage
	} `form:"bytes,omitempty" json:"bytes,omitempty"`

	// Lines The output will be the last NUM lines of each file.
	Lines *struct {
		union json.RawMessage
	} `form:"lines,omitempty" json:"lines,omitempty"`

	// SkipHeading The output will be the whole file, without the first NUM bytes/lines of each file. NUM should be specified in the respective argument through `bytes` or `lines`.
	SkipHeading *bool `form:"skipHeading,omitempty" json:"skipHeading,omitempty"`
}

// GetTailFilesystemSystemNameOpsTailGetParamsBytes0 defines parameters for GetTailFilesystemSystemNameOpsTailGet.
type GetTailFilesystemSystemNameOpsTailGetParamsBytes0 = int

// GetTailFilesystemSystemNameOpsTailGetParamsBytes1 defines parameters for GetTailFilesystemSystemNameOpsTailGet.
type GetTailFilesystemSystemNameOpsTailGetParamsBytes1 = map[string]interface{}

// GetTailFilesystemSystemNameOpsTailGetParamsLines0 defines parameters for GetTailFilesystemSystemNameOpsTailGet.
type GetTailFilesystemSystemNameOpsTailGetParamsLines0 = int

// GetTailFilesystemSystemNameOpsTailGetParamsLines1 defines parameters for GetTailFilesystemSystemNameOpsTailGet.
type GetTailFilesystemSystemNameOpsTailGetParamsLines1 = map[string]interface{}

// PostUploadFilesystemSystemNameOpsUploadPostParams defines parameters for PostUploadFilesystemSystemNameOpsUploadPost.
type PostUploadFilesystemSystemNameOpsUploadPostParams struct {
	// Path Specify path where file should be uploaded.
	Path string `form:"path" json:"path"`
}

// GetViewFilesystemSystemNameOpsViewGetParams defines parameters for GetViewFilesystemSystemNameOpsViewGet.
type GetViewFilesystemSystemNameOpsViewGetParams struct {
	// Path File path
	Path string `form:"path" json:"path"`

	// Size Value, in bytes, of the size of data to be retrieved from the file.
	Size *struct {
		union json.RawMessage
	} `form:"size,omitempty" json:"size,omitempty"`

	// Offset Value in bytes of the offset.
	Offset *struct {
		union json.RawMessage
	} `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetViewFilesystemSystemNameOpsViewGetParamsSize0 defines parameters for GetViewFilesystemSystemNameOpsViewGet.
type GetViewFilesystemSystemNameOpsViewGetParamsSize0 = int

// GetViewFilesystemSystemNameOpsViewGetParamsSize1 defines parameters for GetViewFilesystemSystemNameOpsViewGet.
type GetViewFilesystemSystemNameOpsViewGetParamsSize1 = map[string]interface{}

// GetViewFilesystemSystemNameOpsViewGetParamsOffset0 defines parameters for GetViewFilesystemSystemNameOpsViewGet.
type GetViewFilesystemSystemNameOpsViewGetParamsOffset0 = int

// GetViewFilesystemSystemNameOpsViewGetParamsOffset1 defines parameters for GetViewFilesystemSystemNameOpsViewGet.
type GetViewFilesystemSystemNameOpsViewGetParamsOffset1 = map[string]interface{}

// DeleteRmFilesystemSystemNameTransferRmDeleteParams defines parameters for DeleteRmFilesystemSystemNameTransferRmDelete.
type DeleteRmFilesystemSystemNameTransferRmDeleteParams struct {
	// Path The path to delete
	Path    string `form:"path" json:"path"`
	Account *struct {
		union json.RawMessage
	} `form:"account,omitempty" json:"account,omitempty"`
}

// DeleteRmFilesystemSystemNameTransferRmDeleteParamsAccount0 defines parameters for DeleteRmFilesystemSystemNameTransferRmDelete.
type DeleteRmFilesystemSystemNameTransferRmDeleteParamsAccount0 = string

// DeleteRmFilesystemSystemNameTransferRmDeleteParamsAccount1 defines parameters for DeleteRmFilesystemSystemNameTransferRmDelete.
type DeleteRmFilesystemSystemNameTransferRmDeleteParamsAccount1 = map[string]interface{}

// PostJobSubmitComputeSystemNameJobsPostJSONRequestBody defines body for PostJobSubmitComputeSystemNameJobsPost for application/json ContentType.
type PostJobSubmitComputeSystemNameJobsPostJSONRequestBody = PostJobSubmitRequest

// AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody defines body for AttachComputeSystemNameJobsJobIdAttachPut for application/json ContentType.
type AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody = PostJobAttachRequest

// PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody defines body for PutChmodFilesystemSystemNameOpsChmodPut for application/json ContentType.
type PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody = PutFileChmodRequest

// PutChownFilesystemSystemNameOpsChownPutJSONRequestBody defines body for PutChownFilesystemSystemNameOpsChownPut for application/json ContentType.
type PutChownFilesystemSystemNameOpsChownPutJSONRequestBody = PutFileChownRequest

// PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody defines body for PostCompressFilesystemSystemNameOpsCompressPost for application/json ContentType.
type PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody = PostCompressRequest

// PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody defines body for PostExtractFilesystemSystemNameOpsExtractPost for application/json ContentType.
type PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody = PostExtractRequest

// PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody defines body for PostMkdirFilesystemSystemNameOpsMkdirPost for application/json ContentType.
type PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody = PostMakeDirRequest

// PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody defines body for PostSymlinkFilesystemSystemNameOpsSymlinkPost for application/json ContentType.
type PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody = PostFileSymlinkRequest

// PostUploadFilesystemSystemNameOpsUploadPostMultipartRequestBody defines body for PostUploadFilesystemSystemNameOpsUploadPost for multipart/form-data ContentType.
type PostUploadFilesystemSystemNameOpsUploadPostMultipartRequestBody = BodyPostUploadFilesystemSystemNameOpsUploadPost

// CompressFilesystemSystemNameTransferCompressPostJSONRequestBody defines body for CompressFilesystemSystemNameTransferCompressPost for application/json ContentType.
type CompressFilesystemSystemNameTransferCompressPostJSONRequestBody = CompressRequest

// PostCpFilesystemSystemNameTransferCpPostJSONRequestBody defines body for PostCpFilesystemSystemNameTransferCpPost for application/json ContentType.
type PostCpFilesystemSystemNameTransferCpPostJSONRequestBody = CopyRequest

// PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody defines body for PostDownloadFilesystemSystemNameTransferDownloadPost for application/json ContentType.
type PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody = PostFileDownloadRequest

// ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody defines body for ExtractFilesystemSystemNameTransferExtractPost for application/json ContentType.
type ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody = ExtractRequest

// MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody defines body for MoveMvFilesystemSystemNameTransferMvPost for application/json ContentType.
type MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody = MoveRequest

// PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody defines body for PostUploadFilesystemSystemNameTransferUploadPost for application/json ContentType.
type PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody = PostFileUploadRequest

// AsApiResponseErrorData0 returns the union data inside the ApiResponseError_Data as a ApiResponseErrorData0
func (t ApiResponseError_Data) AsApiResponseErrorData0() (ApiResponseErrorData0, error) {
	var body ApiResponseErrorData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseErrorData0 overwrites any union data inside the ApiResponseError_Data as the provided ApiResponseErrorData0
func (t *ApiResponseError_Data) FromApiResponseErrorData0(v ApiResponseErrorData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseErrorData0 performs a merge with any union data inside the ApiResponseError_Data, using the provided ApiResponseErrorData0
func (t *ApiResponseError_Data) MergeApiResponseErrorData0(v ApiResponseErrorData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiResponseErrorData1 returns the union data inside the ApiResponseError_Data as a ApiResponseErrorData1
func (t ApiResponseError_Data) AsApiResponseErrorData1() (ApiResponseErrorData1, error) {
	var body ApiResponseErrorData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseErrorData1 overwrites any union data inside the ApiResponseError_Data as the provided ApiResponseErrorData1
func (t *ApiResponseError_Data) FromApiResponseErrorData1(v ApiResponseErrorData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseErrorData1 performs a merge with any union data inside the ApiResponseError_Data, using the provided ApiResponseErrorData1
func (t *ApiResponseError_Data) MergeApiResponseErrorData1(v ApiResponseErrorData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiResponseError_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiResponseError_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiResponseErrorUser0 returns the union data inside the ApiResponseError_User as a ApiResponseErrorUser0
func (t ApiResponseError_User) AsApiResponseErrorUser0() (ApiResponseErrorUser0, error) {
	var body ApiResponseErrorUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseErrorUser0 overwrites any union data inside the ApiResponseError_User as the provided ApiResponseErrorUser0
func (t *ApiResponseError_User) FromApiResponseErrorUser0(v ApiResponseErrorUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseErrorUser0 performs a merge with any union data inside the ApiResponseError_User, using the provided ApiResponseErrorUser0
func (t *ApiResponseError_User) MergeApiResponseErrorUser0(v ApiResponseErrorUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiResponseErrorUser1 returns the union data inside the ApiResponseError_User as a ApiResponseErrorUser1
func (t ApiResponseError_User) AsApiResponseErrorUser1() (ApiResponseErrorUser1, error) {
	var body ApiResponseErrorUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiResponseErrorUser1 overwrites any union data inside the ApiResponseError_User as the provided ApiResponseErrorUser1
func (t *ApiResponseError_User) FromApiResponseErrorUser1(v ApiResponseErrorUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiResponseErrorUser1 performs a merge with any union data inside the ApiResponseError_User, using the provided ApiResponseErrorUser1
func (t *ApiResponseError_User) MergeApiResponseErrorUser1(v ApiResponseErrorUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiResponseError_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApiResponseError_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCompressRequestAccount0 returns the union data inside the CompressRequest_Account as a CompressRequestAccount0
func (t CompressRequest_Account) AsCompressRequestAccount0() (CompressRequestAccount0, error) {
	var body CompressRequestAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestAccount0 overwrites any union data inside the CompressRequest_Account as the provided CompressRequestAccount0
func (t *CompressRequest_Account) FromCompressRequestAccount0(v CompressRequestAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestAccount0 performs a merge with any union data inside the CompressRequest_Account, using the provided CompressRequestAccount0
func (t *CompressRequest_Account) MergeCompressRequestAccount0(v CompressRequestAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCompressRequestAccount1 returns the union data inside the CompressRequest_Account as a CompressRequestAccount1
func (t CompressRequest_Account) AsCompressRequestAccount1() (CompressRequestAccount1, error) {
	var body CompressRequestAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestAccount1 overwrites any union data inside the CompressRequest_Account as the provided CompressRequestAccount1
func (t *CompressRequest_Account) FromCompressRequestAccount1(v CompressRequestAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestAccount1 performs a merge with any union data inside the CompressRequest_Account, using the provided CompressRequestAccount1
func (t *CompressRequest_Account) MergeCompressRequestAccount1(v CompressRequestAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CompressRequest_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CompressRequest_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCompressRequestDereference0 returns the union data inside the CompressRequest_Dereference as a CompressRequestDereference0
func (t CompressRequest_Dereference) AsCompressRequestDereference0() (CompressRequestDereference0, error) {
	var body CompressRequestDereference0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestDereference0 overwrites any union data inside the CompressRequest_Dereference as the provided CompressRequestDereference0
func (t *CompressRequest_Dereference) FromCompressRequestDereference0(v CompressRequestDereference0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestDereference0 performs a merge with any union data inside the CompressRequest_Dereference, using the provided CompressRequestDereference0
func (t *CompressRequest_Dereference) MergeCompressRequestDereference0(v CompressRequestDereference0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCompressRequestDereference1 returns the union data inside the CompressRequest_Dereference as a CompressRequestDereference1
func (t CompressRequest_Dereference) AsCompressRequestDereference1() (CompressRequestDereference1, error) {
	var body CompressRequestDereference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestDereference1 overwrites any union data inside the CompressRequest_Dereference as the provided CompressRequestDereference1
func (t *CompressRequest_Dereference) FromCompressRequestDereference1(v CompressRequestDereference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestDereference1 performs a merge with any union data inside the CompressRequest_Dereference, using the provided CompressRequestDereference1
func (t *CompressRequest_Dereference) MergeCompressRequestDereference1(v CompressRequestDereference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CompressRequest_Dereference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CompressRequest_Dereference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCompressRequestMatchPattern0 returns the union data inside the CompressRequest_MatchPattern as a CompressRequestMatchPattern0
func (t CompressRequest_MatchPattern) AsCompressRequestMatchPattern0() (CompressRequestMatchPattern0, error) {
	var body CompressRequestMatchPattern0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestMatchPattern0 overwrites any union data inside the CompressRequest_MatchPattern as the provided CompressRequestMatchPattern0
func (t *CompressRequest_MatchPattern) FromCompressRequestMatchPattern0(v CompressRequestMatchPattern0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestMatchPattern0 performs a merge with any union data inside the CompressRequest_MatchPattern, using the provided CompressRequestMatchPattern0
func (t *CompressRequest_MatchPattern) MergeCompressRequestMatchPattern0(v CompressRequestMatchPattern0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCompressRequestMatchPattern1 returns the union data inside the CompressRequest_MatchPattern as a CompressRequestMatchPattern1
func (t CompressRequest_MatchPattern) AsCompressRequestMatchPattern1() (CompressRequestMatchPattern1, error) {
	var body CompressRequestMatchPattern1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestMatchPattern1 overwrites any union data inside the CompressRequest_MatchPattern as the provided CompressRequestMatchPattern1
func (t *CompressRequest_MatchPattern) FromCompressRequestMatchPattern1(v CompressRequestMatchPattern1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestMatchPattern1 performs a merge with any union data inside the CompressRequest_MatchPattern, using the provided CompressRequestMatchPattern1
func (t *CompressRequest_MatchPattern) MergeCompressRequestMatchPattern1(v CompressRequestMatchPattern1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CompressRequest_MatchPattern) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CompressRequest_MatchPattern) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCompressRequestSourcePath0 returns the union data inside the CompressRequest_SourcePath as a CompressRequestSourcePath0
func (t CompressRequest_SourcePath) AsCompressRequestSourcePath0() (CompressRequestSourcePath0, error) {
	var body CompressRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestSourcePath0 overwrites any union data inside the CompressRequest_SourcePath as the provided CompressRequestSourcePath0
func (t *CompressRequest_SourcePath) FromCompressRequestSourcePath0(v CompressRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestSourcePath0 performs a merge with any union data inside the CompressRequest_SourcePath, using the provided CompressRequestSourcePath0
func (t *CompressRequest_SourcePath) MergeCompressRequestSourcePath0(v CompressRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCompressRequestSourcePath1 returns the union data inside the CompressRequest_SourcePath as a CompressRequestSourcePath1
func (t CompressRequest_SourcePath) AsCompressRequestSourcePath1() (CompressRequestSourcePath1, error) {
	var body CompressRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCompressRequestSourcePath1 overwrites any union data inside the CompressRequest_SourcePath as the provided CompressRequestSourcePath1
func (t *CompressRequest_SourcePath) FromCompressRequestSourcePath1(v CompressRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCompressRequestSourcePath1 performs a merge with any union data inside the CompressRequest_SourcePath, using the provided CompressRequestSourcePath1
func (t *CompressRequest_SourcePath) MergeCompressRequestSourcePath1(v CompressRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CompressRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CompressRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCopyRequestAccount0 returns the union data inside the CopyRequest_Account as a CopyRequestAccount0
func (t CopyRequest_Account) AsCopyRequestAccount0() (CopyRequestAccount0, error) {
	var body CopyRequestAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCopyRequestAccount0 overwrites any union data inside the CopyRequest_Account as the provided CopyRequestAccount0
func (t *CopyRequest_Account) FromCopyRequestAccount0(v CopyRequestAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCopyRequestAccount0 performs a merge with any union data inside the CopyRequest_Account, using the provided CopyRequestAccount0
func (t *CopyRequest_Account) MergeCopyRequestAccount0(v CopyRequestAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCopyRequestAccount1 returns the union data inside the CopyRequest_Account as a CopyRequestAccount1
func (t CopyRequest_Account) AsCopyRequestAccount1() (CopyRequestAccount1, error) {
	var body CopyRequestAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCopyRequestAccount1 overwrites any union data inside the CopyRequest_Account as the provided CopyRequestAccount1
func (t *CopyRequest_Account) FromCopyRequestAccount1(v CopyRequestAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCopyRequestAccount1 performs a merge with any union data inside the CopyRequest_Account, using the provided CopyRequestAccount1
func (t *CopyRequest_Account) MergeCopyRequestAccount1(v CopyRequestAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CopyRequest_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CopyRequest_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCopyRequestDereference0 returns the union data inside the CopyRequest_Dereference as a CopyRequestDereference0
func (t CopyRequest_Dereference) AsCopyRequestDereference0() (CopyRequestDereference0, error) {
	var body CopyRequestDereference0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCopyRequestDereference0 overwrites any union data inside the CopyRequest_Dereference as the provided CopyRequestDereference0
func (t *CopyRequest_Dereference) FromCopyRequestDereference0(v CopyRequestDereference0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCopyRequestDereference0 performs a merge with any union data inside the CopyRequest_Dereference, using the provided CopyRequestDereference0
func (t *CopyRequest_Dereference) MergeCopyRequestDereference0(v CopyRequestDereference0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCopyRequestDereference1 returns the union data inside the CopyRequest_Dereference as a CopyRequestDereference1
func (t CopyRequest_Dereference) AsCopyRequestDereference1() (CopyRequestDereference1, error) {
	var body CopyRequestDereference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCopyRequestDereference1 overwrites any union data inside the CopyRequest_Dereference as the provided CopyRequestDereference1
func (t *CopyRequest_Dereference) FromCopyRequestDereference1(v CopyRequestDereference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCopyRequestDereference1 performs a merge with any union data inside the CopyRequest_Dereference, using the provided CopyRequestDereference1
func (t *CopyRequest_Dereference) MergeCopyRequestDereference1(v CopyRequestDereference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CopyRequest_Dereference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CopyRequest_Dereference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCopyRequestSourcePath0 returns the union data inside the CopyRequest_SourcePath as a CopyRequestSourcePath0
func (t CopyRequest_SourcePath) AsCopyRequestSourcePath0() (CopyRequestSourcePath0, error) {
	var body CopyRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCopyRequestSourcePath0 overwrites any union data inside the CopyRequest_SourcePath as the provided CopyRequestSourcePath0
func (t *CopyRequest_SourcePath) FromCopyRequestSourcePath0(v CopyRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCopyRequestSourcePath0 performs a merge with any union data inside the CopyRequest_SourcePath, using the provided CopyRequestSourcePath0
func (t *CopyRequest_SourcePath) MergeCopyRequestSourcePath0(v CopyRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCopyRequestSourcePath1 returns the union data inside the CopyRequest_SourcePath as a CopyRequestSourcePath1
func (t CopyRequest_SourcePath) AsCopyRequestSourcePath1() (CopyRequestSourcePath1, error) {
	var body CopyRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCopyRequestSourcePath1 overwrites any union data inside the CopyRequest_SourcePath as the provided CopyRequestSourcePath1
func (t *CopyRequest_SourcePath) FromCopyRequestSourcePath1(v CopyRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCopyRequestSourcePath1 performs a merge with any union data inside the CopyRequest_SourcePath, using the provided CopyRequestSourcePath1
func (t *CopyRequest_SourcePath) MergeCopyRequestSourcePath1(v CopyRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CopyRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CopyRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3DataTransfer returns the union data inside the DataOperation_DataTransfer as a S3DataTransfer
func (t DataOperation_DataTransfer) AsS3DataTransfer() (S3DataTransfer, error) {
	var body S3DataTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3DataTransfer overwrites any union data inside the DataOperation_DataTransfer as the provided S3DataTransfer
func (t *DataOperation_DataTransfer) FromS3DataTransfer(v S3DataTransfer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3DataTransfer performs a merge with any union data inside the DataOperation_DataTransfer, using the provided S3DataTransfer
func (t *DataOperation_DataTransfer) MergeS3DataTransfer(v S3DataTransfer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataOperationDataTransfer1 returns the union data inside the DataOperation_DataTransfer as a DataOperationDataTransfer1
func (t DataOperation_DataTransfer) AsDataOperationDataTransfer1() (DataOperationDataTransfer1, error) {
	var body DataOperationDataTransfer1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataOperationDataTransfer1 overwrites any union data inside the DataOperation_DataTransfer as the provided DataOperationDataTransfer1
func (t *DataOperation_DataTransfer) FromDataOperationDataTransfer1(v DataOperationDataTransfer1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataOperationDataTransfer1 performs a merge with any union data inside the DataOperation_DataTransfer, using the provided DataOperationDataTransfer1
func (t *DataOperation_DataTransfer) MergeDataOperationDataTransfer1(v DataOperationDataTransfer1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataOperation_DataTransfer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataOperation_DataTransfer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDownloadFileResponseCompleteUploadUrl0 returns the union data inside the DownloadFileResponse_CompleteUploadUrl as a DownloadFileResponseCompleteUploadUrl0
func (t DownloadFileResponse_CompleteUploadUrl) AsDownloadFileResponseCompleteUploadUrl0() (DownloadFileResponseCompleteUploadUrl0, error) {
	var body DownloadFileResponseCompleteUploadUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponseCompleteUploadUrl0 overwrites any union data inside the DownloadFileResponse_CompleteUploadUrl as the provided DownloadFileResponseCompleteUploadUrl0
func (t *DownloadFileResponse_CompleteUploadUrl) FromDownloadFileResponseCompleteUploadUrl0(v DownloadFileResponseCompleteUploadUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponseCompleteUploadUrl0 performs a merge with any union data inside the DownloadFileResponse_CompleteUploadUrl, using the provided DownloadFileResponseCompleteUploadUrl0
func (t *DownloadFileResponse_CompleteUploadUrl) MergeDownloadFileResponseCompleteUploadUrl0(v DownloadFileResponseCompleteUploadUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDownloadFileResponseCompleteUploadUrl1 returns the union data inside the DownloadFileResponse_CompleteUploadUrl as a DownloadFileResponseCompleteUploadUrl1
func (t DownloadFileResponse_CompleteUploadUrl) AsDownloadFileResponseCompleteUploadUrl1() (DownloadFileResponseCompleteUploadUrl1, error) {
	var body DownloadFileResponseCompleteUploadUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponseCompleteUploadUrl1 overwrites any union data inside the DownloadFileResponse_CompleteUploadUrl as the provided DownloadFileResponseCompleteUploadUrl1
func (t *DownloadFileResponse_CompleteUploadUrl) FromDownloadFileResponseCompleteUploadUrl1(v DownloadFileResponseCompleteUploadUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponseCompleteUploadUrl1 performs a merge with any union data inside the DownloadFileResponse_CompleteUploadUrl, using the provided DownloadFileResponseCompleteUploadUrl1
func (t *DownloadFileResponse_CompleteUploadUrl) MergeDownloadFileResponseCompleteUploadUrl1(v DownloadFileResponseCompleteUploadUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DownloadFileResponse_CompleteUploadUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DownloadFileResponse_CompleteUploadUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDownloadFileResponseDownloadUrl0 returns the union data inside the DownloadFileResponse_DownloadUrl as a DownloadFileResponseDownloadUrl0
func (t DownloadFileResponse_DownloadUrl) AsDownloadFileResponseDownloadUrl0() (DownloadFileResponseDownloadUrl0, error) {
	var body DownloadFileResponseDownloadUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponseDownloadUrl0 overwrites any union data inside the DownloadFileResponse_DownloadUrl as the provided DownloadFileResponseDownloadUrl0
func (t *DownloadFileResponse_DownloadUrl) FromDownloadFileResponseDownloadUrl0(v DownloadFileResponseDownloadUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponseDownloadUrl0 performs a merge with any union data inside the DownloadFileResponse_DownloadUrl, using the provided DownloadFileResponseDownloadUrl0
func (t *DownloadFileResponse_DownloadUrl) MergeDownloadFileResponseDownloadUrl0(v DownloadFileResponseDownloadUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDownloadFileResponseDownloadUrl1 returns the union data inside the DownloadFileResponse_DownloadUrl as a DownloadFileResponseDownloadUrl1
func (t DownloadFileResponse_DownloadUrl) AsDownloadFileResponseDownloadUrl1() (DownloadFileResponseDownloadUrl1, error) {
	var body DownloadFileResponseDownloadUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponseDownloadUrl1 overwrites any union data inside the DownloadFileResponse_DownloadUrl as the provided DownloadFileResponseDownloadUrl1
func (t *DownloadFileResponse_DownloadUrl) FromDownloadFileResponseDownloadUrl1(v DownloadFileResponseDownloadUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponseDownloadUrl1 performs a merge with any union data inside the DownloadFileResponse_DownloadUrl, using the provided DownloadFileResponseDownloadUrl1
func (t *DownloadFileResponse_DownloadUrl) MergeDownloadFileResponseDownloadUrl1(v DownloadFileResponseDownloadUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DownloadFileResponse_DownloadUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DownloadFileResponse_DownloadUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDownloadFileResponseMaxPartSize0 returns the union data inside the DownloadFileResponse_MaxPartSize as a DownloadFileResponseMaxPartSize0
func (t DownloadFileResponse_MaxPartSize) AsDownloadFileResponseMaxPartSize0() (DownloadFileResponseMaxPartSize0, error) {
	var body DownloadFileResponseMaxPartSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponseMaxPartSize0 overwrites any union data inside the DownloadFileResponse_MaxPartSize as the provided DownloadFileResponseMaxPartSize0
func (t *DownloadFileResponse_MaxPartSize) FromDownloadFileResponseMaxPartSize0(v DownloadFileResponseMaxPartSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponseMaxPartSize0 performs a merge with any union data inside the DownloadFileResponse_MaxPartSize, using the provided DownloadFileResponseMaxPartSize0
func (t *DownloadFileResponse_MaxPartSize) MergeDownloadFileResponseMaxPartSize0(v DownloadFileResponseMaxPartSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDownloadFileResponseMaxPartSize1 returns the union data inside the DownloadFileResponse_MaxPartSize as a DownloadFileResponseMaxPartSize1
func (t DownloadFileResponse_MaxPartSize) AsDownloadFileResponseMaxPartSize1() (DownloadFileResponseMaxPartSize1, error) {
	var body DownloadFileResponseMaxPartSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponseMaxPartSize1 overwrites any union data inside the DownloadFileResponse_MaxPartSize as the provided DownloadFileResponseMaxPartSize1
func (t *DownloadFileResponse_MaxPartSize) FromDownloadFileResponseMaxPartSize1(v DownloadFileResponseMaxPartSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponseMaxPartSize1 performs a merge with any union data inside the DownloadFileResponse_MaxPartSize, using the provided DownloadFileResponseMaxPartSize1
func (t *DownloadFileResponse_MaxPartSize) MergeDownloadFileResponseMaxPartSize1(v DownloadFileResponseMaxPartSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DownloadFileResponse_MaxPartSize) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DownloadFileResponse_MaxPartSize) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDownloadFileResponsePartsUploadUrls0 returns the union data inside the DownloadFileResponse_PartsUploadUrls as a DownloadFileResponsePartsUploadUrls0
func (t DownloadFileResponse_PartsUploadUrls) AsDownloadFileResponsePartsUploadUrls0() (DownloadFileResponsePartsUploadUrls0, error) {
	var body DownloadFileResponsePartsUploadUrls0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponsePartsUploadUrls0 overwrites any union data inside the DownloadFileResponse_PartsUploadUrls as the provided DownloadFileResponsePartsUploadUrls0
func (t *DownloadFileResponse_PartsUploadUrls) FromDownloadFileResponsePartsUploadUrls0(v DownloadFileResponsePartsUploadUrls0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponsePartsUploadUrls0 performs a merge with any union data inside the DownloadFileResponse_PartsUploadUrls, using the provided DownloadFileResponsePartsUploadUrls0
func (t *DownloadFileResponse_PartsUploadUrls) MergeDownloadFileResponsePartsUploadUrls0(v DownloadFileResponsePartsUploadUrls0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDownloadFileResponsePartsUploadUrls1 returns the union data inside the DownloadFileResponse_PartsUploadUrls as a DownloadFileResponsePartsUploadUrls1
func (t DownloadFileResponse_PartsUploadUrls) AsDownloadFileResponsePartsUploadUrls1() (DownloadFileResponsePartsUploadUrls1, error) {
	var body DownloadFileResponsePartsUploadUrls1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDownloadFileResponsePartsUploadUrls1 overwrites any union data inside the DownloadFileResponse_PartsUploadUrls as the provided DownloadFileResponsePartsUploadUrls1
func (t *DownloadFileResponse_PartsUploadUrls) FromDownloadFileResponsePartsUploadUrls1(v DownloadFileResponsePartsUploadUrls1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDownloadFileResponsePartsUploadUrls1 performs a merge with any union data inside the DownloadFileResponse_PartsUploadUrls, using the provided DownloadFileResponsePartsUploadUrls1
func (t *DownloadFileResponse_PartsUploadUrls) MergeDownloadFileResponsePartsUploadUrls1(v DownloadFileResponsePartsUploadUrls1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DownloadFileResponse_PartsUploadUrls) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DownloadFileResponse_PartsUploadUrls) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtractRequestAccount0 returns the union data inside the ExtractRequest_Account as a ExtractRequestAccount0
func (t ExtractRequest_Account) AsExtractRequestAccount0() (ExtractRequestAccount0, error) {
	var body ExtractRequestAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtractRequestAccount0 overwrites any union data inside the ExtractRequest_Account as the provided ExtractRequestAccount0
func (t *ExtractRequest_Account) FromExtractRequestAccount0(v ExtractRequestAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtractRequestAccount0 performs a merge with any union data inside the ExtractRequest_Account, using the provided ExtractRequestAccount0
func (t *ExtractRequest_Account) MergeExtractRequestAccount0(v ExtractRequestAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtractRequestAccount1 returns the union data inside the ExtractRequest_Account as a ExtractRequestAccount1
func (t ExtractRequest_Account) AsExtractRequestAccount1() (ExtractRequestAccount1, error) {
	var body ExtractRequestAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtractRequestAccount1 overwrites any union data inside the ExtractRequest_Account as the provided ExtractRequestAccount1
func (t *ExtractRequest_Account) FromExtractRequestAccount1(v ExtractRequestAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtractRequestAccount1 performs a merge with any union data inside the ExtractRequest_Account, using the provided ExtractRequestAccount1
func (t *ExtractRequest_Account) MergeExtractRequestAccount1(v ExtractRequestAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtractRequest_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtractRequest_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExtractRequestSourcePath0 returns the union data inside the ExtractRequest_SourcePath as a ExtractRequestSourcePath0
func (t ExtractRequest_SourcePath) AsExtractRequestSourcePath0() (ExtractRequestSourcePath0, error) {
	var body ExtractRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtractRequestSourcePath0 overwrites any union data inside the ExtractRequest_SourcePath as the provided ExtractRequestSourcePath0
func (t *ExtractRequest_SourcePath) FromExtractRequestSourcePath0(v ExtractRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtractRequestSourcePath0 performs a merge with any union data inside the ExtractRequest_SourcePath, using the provided ExtractRequestSourcePath0
func (t *ExtractRequest_SourcePath) MergeExtractRequestSourcePath0(v ExtractRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExtractRequestSourcePath1 returns the union data inside the ExtractRequest_SourcePath as a ExtractRequestSourcePath1
func (t ExtractRequest_SourcePath) AsExtractRequestSourcePath1() (ExtractRequestSourcePath1, error) {
	var body ExtractRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExtractRequestSourcePath1 overwrites any union data inside the ExtractRequest_SourcePath as the provided ExtractRequestSourcePath1
func (t *ExtractRequest_SourcePath) FromExtractRequestSourcePath1(v ExtractRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExtractRequestSourcePath1 performs a merge with any union data inside the ExtractRequest_SourcePath, using the provided ExtractRequestSourcePath1
func (t *ExtractRequest_SourcePath) MergeExtractRequestSourcePath1(v ExtractRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExtractRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExtractRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileLinkTarget0 returns the union data inside the File_LinkTarget as a FileLinkTarget0
func (t File_LinkTarget) AsFileLinkTarget0() (FileLinkTarget0, error) {
	var body FileLinkTarget0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileLinkTarget0 overwrites any union data inside the File_LinkTarget as the provided FileLinkTarget0
func (t *File_LinkTarget) FromFileLinkTarget0(v FileLinkTarget0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileLinkTarget0 performs a merge with any union data inside the File_LinkTarget, using the provided FileLinkTarget0
func (t *File_LinkTarget) MergeFileLinkTarget0(v FileLinkTarget0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFileLinkTarget1 returns the union data inside the File_LinkTarget as a FileLinkTarget1
func (t File_LinkTarget) AsFileLinkTarget1() (FileLinkTarget1, error) {
	var body FileLinkTarget1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileLinkTarget1 overwrites any union data inside the File_LinkTarget as the provided FileLinkTarget1
func (t *File_LinkTarget) FromFileLinkTarget1(v FileLinkTarget1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileLinkTarget1 performs a merge with any union data inside the File_LinkTarget, using the provided FileLinkTarget1
func (t *File_LinkTarget) MergeFileLinkTarget1(v FileLinkTarget1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t File_LinkTarget) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *File_LinkTarget) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilesystemServiceHealthHealthy0 returns the union data inside the FilesystemServiceHealth_Healthy as a FilesystemServiceHealthHealthy0
func (t FilesystemServiceHealth_Healthy) AsFilesystemServiceHealthHealthy0() (FilesystemServiceHealthHealthy0, error) {
	var body FilesystemServiceHealthHealthy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthHealthy0 overwrites any union data inside the FilesystemServiceHealth_Healthy as the provided FilesystemServiceHealthHealthy0
func (t *FilesystemServiceHealth_Healthy) FromFilesystemServiceHealthHealthy0(v FilesystemServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthHealthy0 performs a merge with any union data inside the FilesystemServiceHealth_Healthy, using the provided FilesystemServiceHealthHealthy0
func (t *FilesystemServiceHealth_Healthy) MergeFilesystemServiceHealthHealthy0(v FilesystemServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealthHealthy1 returns the union data inside the FilesystemServiceHealth_Healthy as a FilesystemServiceHealthHealthy1
func (t FilesystemServiceHealth_Healthy) AsFilesystemServiceHealthHealthy1() (FilesystemServiceHealthHealthy1, error) {
	var body FilesystemServiceHealthHealthy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthHealthy1 overwrites any union data inside the FilesystemServiceHealth_Healthy as the provided FilesystemServiceHealthHealthy1
func (t *FilesystemServiceHealth_Healthy) FromFilesystemServiceHealthHealthy1(v FilesystemServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthHealthy1 performs a merge with any union data inside the FilesystemServiceHealth_Healthy, using the provided FilesystemServiceHealthHealthy1
func (t *FilesystemServiceHealth_Healthy) MergeFilesystemServiceHealthHealthy1(v FilesystemServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilesystemServiceHealth_Healthy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemServiceHealth_Healthy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilesystemServiceHealthLastChecked0 returns the union data inside the FilesystemServiceHealth_LastChecked as a FilesystemServiceHealthLastChecked0
func (t FilesystemServiceHealth_LastChecked) AsFilesystemServiceHealthLastChecked0() (FilesystemServiceHealthLastChecked0, error) {
	var body FilesystemServiceHealthLastChecked0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthLastChecked0 overwrites any union data inside the FilesystemServiceHealth_LastChecked as the provided FilesystemServiceHealthLastChecked0
func (t *FilesystemServiceHealth_LastChecked) FromFilesystemServiceHealthLastChecked0(v FilesystemServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthLastChecked0 performs a merge with any union data inside the FilesystemServiceHealth_LastChecked, using the provided FilesystemServiceHealthLastChecked0
func (t *FilesystemServiceHealth_LastChecked) MergeFilesystemServiceHealthLastChecked0(v FilesystemServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealthLastChecked1 returns the union data inside the FilesystemServiceHealth_LastChecked as a FilesystemServiceHealthLastChecked1
func (t FilesystemServiceHealth_LastChecked) AsFilesystemServiceHealthLastChecked1() (FilesystemServiceHealthLastChecked1, error) {
	var body FilesystemServiceHealthLastChecked1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthLastChecked1 overwrites any union data inside the FilesystemServiceHealth_LastChecked as the provided FilesystemServiceHealthLastChecked1
func (t *FilesystemServiceHealth_LastChecked) FromFilesystemServiceHealthLastChecked1(v FilesystemServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthLastChecked1 performs a merge with any union data inside the FilesystemServiceHealth_LastChecked, using the provided FilesystemServiceHealthLastChecked1
func (t *FilesystemServiceHealth_LastChecked) MergeFilesystemServiceHealthLastChecked1(v FilesystemServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilesystemServiceHealth_LastChecked) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemServiceHealth_LastChecked) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilesystemServiceHealthLatency0 returns the union data inside the FilesystemServiceHealth_Latency as a FilesystemServiceHealthLatency0
func (t FilesystemServiceHealth_Latency) AsFilesystemServiceHealthLatency0() (FilesystemServiceHealthLatency0, error) {
	var body FilesystemServiceHealthLatency0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthLatency0 overwrites any union data inside the FilesystemServiceHealth_Latency as the provided FilesystemServiceHealthLatency0
func (t *FilesystemServiceHealth_Latency) FromFilesystemServiceHealthLatency0(v FilesystemServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthLatency0 performs a merge with any union data inside the FilesystemServiceHealth_Latency, using the provided FilesystemServiceHealthLatency0
func (t *FilesystemServiceHealth_Latency) MergeFilesystemServiceHealthLatency0(v FilesystemServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealthLatency1 returns the union data inside the FilesystemServiceHealth_Latency as a FilesystemServiceHealthLatency1
func (t FilesystemServiceHealth_Latency) AsFilesystemServiceHealthLatency1() (FilesystemServiceHealthLatency1, error) {
	var body FilesystemServiceHealthLatency1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthLatency1 overwrites any union data inside the FilesystemServiceHealth_Latency as the provided FilesystemServiceHealthLatency1
func (t *FilesystemServiceHealth_Latency) FromFilesystemServiceHealthLatency1(v FilesystemServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthLatency1 performs a merge with any union data inside the FilesystemServiceHealth_Latency, using the provided FilesystemServiceHealthLatency1
func (t *FilesystemServiceHealth_Latency) MergeFilesystemServiceHealthLatency1(v FilesystemServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilesystemServiceHealth_Latency) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemServiceHealth_Latency) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilesystemServiceHealthMessage0 returns the union data inside the FilesystemServiceHealth_Message as a FilesystemServiceHealthMessage0
func (t FilesystemServiceHealth_Message) AsFilesystemServiceHealthMessage0() (FilesystemServiceHealthMessage0, error) {
	var body FilesystemServiceHealthMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthMessage0 overwrites any union data inside the FilesystemServiceHealth_Message as the provided FilesystemServiceHealthMessage0
func (t *FilesystemServiceHealth_Message) FromFilesystemServiceHealthMessage0(v FilesystemServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthMessage0 performs a merge with any union data inside the FilesystemServiceHealth_Message, using the provided FilesystemServiceHealthMessage0
func (t *FilesystemServiceHealth_Message) MergeFilesystemServiceHealthMessage0(v FilesystemServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealthMessage1 returns the union data inside the FilesystemServiceHealth_Message as a FilesystemServiceHealthMessage1
func (t FilesystemServiceHealth_Message) AsFilesystemServiceHealthMessage1() (FilesystemServiceHealthMessage1, error) {
	var body FilesystemServiceHealthMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthMessage1 overwrites any union data inside the FilesystemServiceHealth_Message as the provided FilesystemServiceHealthMessage1
func (t *FilesystemServiceHealth_Message) FromFilesystemServiceHealthMessage1(v FilesystemServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthMessage1 performs a merge with any union data inside the FilesystemServiceHealth_Message, using the provided FilesystemServiceHealthMessage1
func (t *FilesystemServiceHealth_Message) MergeFilesystemServiceHealthMessage1(v FilesystemServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilesystemServiceHealth_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemServiceHealth_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilesystemServiceHealthPath0 returns the union data inside the FilesystemServiceHealth_Path as a FilesystemServiceHealthPath0
func (t FilesystemServiceHealth_Path) AsFilesystemServiceHealthPath0() (FilesystemServiceHealthPath0, error) {
	var body FilesystemServiceHealthPath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthPath0 overwrites any union data inside the FilesystemServiceHealth_Path as the provided FilesystemServiceHealthPath0
func (t *FilesystemServiceHealth_Path) FromFilesystemServiceHealthPath0(v FilesystemServiceHealthPath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthPath0 performs a merge with any union data inside the FilesystemServiceHealth_Path, using the provided FilesystemServiceHealthPath0
func (t *FilesystemServiceHealth_Path) MergeFilesystemServiceHealthPath0(v FilesystemServiceHealthPath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealthPath1 returns the union data inside the FilesystemServiceHealth_Path as a FilesystemServiceHealthPath1
func (t FilesystemServiceHealth_Path) AsFilesystemServiceHealthPath1() (FilesystemServiceHealthPath1, error) {
	var body FilesystemServiceHealthPath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealthPath1 overwrites any union data inside the FilesystemServiceHealth_Path as the provided FilesystemServiceHealthPath1
func (t *FilesystemServiceHealth_Path) FromFilesystemServiceHealthPath1(v FilesystemServiceHealthPath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealthPath1 performs a merge with any union data inside the FilesystemServiceHealth_Path, using the provided FilesystemServiceHealthPath1
func (t *FilesystemServiceHealth_Path) MergeFilesystemServiceHealthPath1(v FilesystemServiceHealthPath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilesystemServiceHealth_Path) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilesystemServiceHealth_Path) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetDirectoryLsResponseOutput0 returns the union data inside the GetDirectoryLsResponse_Output as a GetDirectoryLsResponseOutput0
func (t GetDirectoryLsResponse_Output) AsGetDirectoryLsResponseOutput0() (GetDirectoryLsResponseOutput0, error) {
	var body GetDirectoryLsResponseOutput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetDirectoryLsResponseOutput0 overwrites any union data inside the GetDirectoryLsResponse_Output as the provided GetDirectoryLsResponseOutput0
func (t *GetDirectoryLsResponse_Output) FromGetDirectoryLsResponseOutput0(v GetDirectoryLsResponseOutput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetDirectoryLsResponseOutput0 performs a merge with any union data inside the GetDirectoryLsResponse_Output, using the provided GetDirectoryLsResponseOutput0
func (t *GetDirectoryLsResponse_Output) MergeGetDirectoryLsResponseOutput0(v GetDirectoryLsResponseOutput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetDirectoryLsResponseOutput1 returns the union data inside the GetDirectoryLsResponse_Output as a GetDirectoryLsResponseOutput1
func (t GetDirectoryLsResponse_Output) AsGetDirectoryLsResponseOutput1() (GetDirectoryLsResponseOutput1, error) {
	var body GetDirectoryLsResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetDirectoryLsResponseOutput1 overwrites any union data inside the GetDirectoryLsResponse_Output as the provided GetDirectoryLsResponseOutput1
func (t *GetDirectoryLsResponse_Output) FromGetDirectoryLsResponseOutput1(v GetDirectoryLsResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetDirectoryLsResponseOutput1 performs a merge with any union data inside the GetDirectoryLsResponse_Output, using the provided GetDirectoryLsResponseOutput1
func (t *GetDirectoryLsResponse_Output) MergeGetDirectoryLsResponseOutput1(v GetDirectoryLsResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetDirectoryLsResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetDirectoryLsResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileChecksum returns the union data inside the GetFileChecksumResponse_Output as a FileChecksum
func (t GetFileChecksumResponse_Output) AsFileChecksum() (FileChecksum, error) {
	var body FileChecksum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileChecksum overwrites any union data inside the GetFileChecksumResponse_Output as the provided FileChecksum
func (t *GetFileChecksumResponse_Output) FromFileChecksum(v FileChecksum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileChecksum performs a merge with any union data inside the GetFileChecksumResponse_Output, using the provided FileChecksum
func (t *GetFileChecksumResponse_Output) MergeFileChecksum(v FileChecksum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetFileChecksumResponseOutput1 returns the union data inside the GetFileChecksumResponse_Output as a GetFileChecksumResponseOutput1
func (t GetFileChecksumResponse_Output) AsGetFileChecksumResponseOutput1() (GetFileChecksumResponseOutput1, error) {
	var body GetFileChecksumResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetFileChecksumResponseOutput1 overwrites any union data inside the GetFileChecksumResponse_Output as the provided GetFileChecksumResponseOutput1
func (t *GetFileChecksumResponse_Output) FromGetFileChecksumResponseOutput1(v GetFileChecksumResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetFileChecksumResponseOutput1 performs a merge with any union data inside the GetFileChecksumResponse_Output, using the provided GetFileChecksumResponseOutput1
func (t *GetFileChecksumResponse_Output) MergeGetFileChecksumResponseOutput1(v GetFileChecksumResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFileChecksumResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFileChecksumResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileContent returns the union data inside the GetFileHeadResponse_Output as a FileContent
func (t GetFileHeadResponse_Output) AsFileContent() (FileContent, error) {
	var body FileContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileContent overwrites any union data inside the GetFileHeadResponse_Output as the provided FileContent
func (t *GetFileHeadResponse_Output) FromFileContent(v FileContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileContent performs a merge with any union data inside the GetFileHeadResponse_Output, using the provided FileContent
func (t *GetFileHeadResponse_Output) MergeFileContent(v FileContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetFileHeadResponseOutput1 returns the union data inside the GetFileHeadResponse_Output as a GetFileHeadResponseOutput1
func (t GetFileHeadResponse_Output) AsGetFileHeadResponseOutput1() (GetFileHeadResponseOutput1, error) {
	var body GetFileHeadResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetFileHeadResponseOutput1 overwrites any union data inside the GetFileHeadResponse_Output as the provided GetFileHeadResponseOutput1
func (t *GetFileHeadResponse_Output) FromGetFileHeadResponseOutput1(v GetFileHeadResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetFileHeadResponseOutput1 performs a merge with any union data inside the GetFileHeadResponse_Output, using the provided GetFileHeadResponseOutput1
func (t *GetFileHeadResponse_Output) MergeGetFileHeadResponseOutput1(v GetFileHeadResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFileHeadResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFileHeadResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileStat returns the union data inside the GetFileStatResponse_Output as a FileStat
func (t GetFileStatResponse_Output) AsFileStat() (FileStat, error) {
	var body FileStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileStat overwrites any union data inside the GetFileStatResponse_Output as the provided FileStat
func (t *GetFileStatResponse_Output) FromFileStat(v FileStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileStat performs a merge with any union data inside the GetFileStatResponse_Output, using the provided FileStat
func (t *GetFileStatResponse_Output) MergeFileStat(v FileStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetFileStatResponseOutput1 returns the union data inside the GetFileStatResponse_Output as a GetFileStatResponseOutput1
func (t GetFileStatResponse_Output) AsGetFileStatResponseOutput1() (GetFileStatResponseOutput1, error) {
	var body GetFileStatResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetFileStatResponseOutput1 overwrites any union data inside the GetFileStatResponse_Output as the provided GetFileStatResponseOutput1
func (t *GetFileStatResponse_Output) FromGetFileStatResponseOutput1(v GetFileStatResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetFileStatResponseOutput1 performs a merge with any union data inside the GetFileStatResponse_Output, using the provided GetFileStatResponseOutput1
func (t *GetFileStatResponse_Output) MergeGetFileStatResponseOutput1(v GetFileStatResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFileStatResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFileStatResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileContent returns the union data inside the GetFileTailResponse_Output as a FileContent
func (t GetFileTailResponse_Output) AsFileContent() (FileContent, error) {
	var body FileContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileContent overwrites any union data inside the GetFileTailResponse_Output as the provided FileContent
func (t *GetFileTailResponse_Output) FromFileContent(v FileContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileContent performs a merge with any union data inside the GetFileTailResponse_Output, using the provided FileContent
func (t *GetFileTailResponse_Output) MergeFileContent(v FileContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetFileTailResponseOutput1 returns the union data inside the GetFileTailResponse_Output as a GetFileTailResponseOutput1
func (t GetFileTailResponse_Output) AsGetFileTailResponseOutput1() (GetFileTailResponseOutput1, error) {
	var body GetFileTailResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetFileTailResponseOutput1 overwrites any union data inside the GetFileTailResponse_Output as the provided GetFileTailResponseOutput1
func (t *GetFileTailResponse_Output) FromGetFileTailResponseOutput1(v GetFileTailResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetFileTailResponseOutput1 performs a merge with any union data inside the GetFileTailResponse_Output, using the provided GetFileTailResponseOutput1
func (t *GetFileTailResponse_Output) MergeGetFileTailResponseOutput1(v GetFileTailResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFileTailResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFileTailResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetFileTypeResponseOutput0 returns the union data inside the GetFileTypeResponse_Output as a GetFileTypeResponseOutput0
func (t GetFileTypeResponse_Output) AsGetFileTypeResponseOutput0() (GetFileTypeResponseOutput0, error) {
	var body GetFileTypeResponseOutput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetFileTypeResponseOutput0 overwrites any union data inside the GetFileTypeResponse_Output as the provided GetFileTypeResponseOutput0
func (t *GetFileTypeResponse_Output) FromGetFileTypeResponseOutput0(v GetFileTypeResponseOutput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetFileTypeResponseOutput0 performs a merge with any union data inside the GetFileTypeResponse_Output, using the provided GetFileTypeResponseOutput0
func (t *GetFileTypeResponse_Output) MergeGetFileTypeResponseOutput0(v GetFileTypeResponseOutput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetFileTypeResponseOutput1 returns the union data inside the GetFileTypeResponse_Output as a GetFileTypeResponseOutput1
func (t GetFileTypeResponse_Output) AsGetFileTypeResponseOutput1() (GetFileTypeResponseOutput1, error) {
	var body GetFileTypeResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetFileTypeResponseOutput1 overwrites any union data inside the GetFileTypeResponse_Output as the provided GetFileTypeResponseOutput1
func (t *GetFileTypeResponse_Output) FromGetFileTypeResponseOutput1(v GetFileTypeResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetFileTypeResponseOutput1 performs a merge with any union data inside the GetFileTypeResponse_Output, using the provided GetFileTypeResponseOutput1
func (t *GetFileTypeResponse_Output) MergeGetFileTypeResponseOutput1(v GetFileTypeResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetFileTypeResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetFileTypeResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetJobMetadataResponseJobs0 returns the union data inside the GetJobMetadataResponse_Jobs as a GetJobMetadataResponseJobs0
func (t GetJobMetadataResponse_Jobs) AsGetJobMetadataResponseJobs0() (GetJobMetadataResponseJobs0, error) {
	var body GetJobMetadataResponseJobs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetJobMetadataResponseJobs0 overwrites any union data inside the GetJobMetadataResponse_Jobs as the provided GetJobMetadataResponseJobs0
func (t *GetJobMetadataResponse_Jobs) FromGetJobMetadataResponseJobs0(v GetJobMetadataResponseJobs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetJobMetadataResponseJobs0 performs a merge with any union data inside the GetJobMetadataResponse_Jobs, using the provided GetJobMetadataResponseJobs0
func (t *GetJobMetadataResponse_Jobs) MergeGetJobMetadataResponseJobs0(v GetJobMetadataResponseJobs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetJobMetadataResponseJobs1 returns the union data inside the GetJobMetadataResponse_Jobs as a GetJobMetadataResponseJobs1
func (t GetJobMetadataResponse_Jobs) AsGetJobMetadataResponseJobs1() (GetJobMetadataResponseJobs1, error) {
	var body GetJobMetadataResponseJobs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetJobMetadataResponseJobs1 overwrites any union data inside the GetJobMetadataResponse_Jobs as the provided GetJobMetadataResponseJobs1
func (t *GetJobMetadataResponse_Jobs) FromGetJobMetadataResponseJobs1(v GetJobMetadataResponseJobs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetJobMetadataResponseJobs1 performs a merge with any union data inside the GetJobMetadataResponse_Jobs, using the provided GetJobMetadataResponseJobs1
func (t *GetJobMetadataResponse_Jobs) MergeGetJobMetadataResponseJobs1(v GetJobMetadataResponseJobs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetJobMetadataResponse_Jobs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetJobMetadataResponse_Jobs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetJobResponseJobs0 returns the union data inside the GetJobResponse_Jobs as a GetJobResponseJobs0
func (t GetJobResponse_Jobs) AsGetJobResponseJobs0() (GetJobResponseJobs0, error) {
	var body GetJobResponseJobs0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetJobResponseJobs0 overwrites any union data inside the GetJobResponse_Jobs as the provided GetJobResponseJobs0
func (t *GetJobResponse_Jobs) FromGetJobResponseJobs0(v GetJobResponseJobs0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetJobResponseJobs0 performs a merge with any union data inside the GetJobResponse_Jobs, using the provided GetJobResponseJobs0
func (t *GetJobResponse_Jobs) MergeGetJobResponseJobs0(v GetJobResponseJobs0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetJobResponseJobs1 returns the union data inside the GetJobResponse_Jobs as a GetJobResponseJobs1
func (t GetJobResponse_Jobs) AsGetJobResponseJobs1() (GetJobResponseJobs1, error) {
	var body GetJobResponseJobs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetJobResponseJobs1 overwrites any union data inside the GetJobResponse_Jobs as the provided GetJobResponseJobs1
func (t *GetJobResponse_Jobs) FromGetJobResponseJobs1(v GetJobResponseJobs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetJobResponseJobs1 performs a merge with any union data inside the GetJobResponse_Jobs, using the provided GetJobResponseJobs1
func (t *GetJobResponse_Jobs) MergeGetJobResponseJobs1(v GetJobResponseJobs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetJobResponse_Jobs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetJobResponse_Jobs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataOperation returns the union data inside the GetSystemsResponse_DataOperation as a DataOperation
func (t GetSystemsResponse_DataOperation) AsDataOperation() (DataOperation, error) {
	var body DataOperation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataOperation overwrites any union data inside the GetSystemsResponse_DataOperation as the provided DataOperation
func (t *GetSystemsResponse_DataOperation) FromDataOperation(v DataOperation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataOperation performs a merge with any union data inside the GetSystemsResponse_DataOperation, using the provided DataOperation
func (t *GetSystemsResponse_DataOperation) MergeDataOperation(v DataOperation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetSystemsResponseDataOperation1 returns the union data inside the GetSystemsResponse_DataOperation as a GetSystemsResponseDataOperation1
func (t GetSystemsResponse_DataOperation) AsGetSystemsResponseDataOperation1() (GetSystemsResponseDataOperation1, error) {
	var body GetSystemsResponseDataOperation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetSystemsResponseDataOperation1 overwrites any union data inside the GetSystemsResponse_DataOperation as the provided GetSystemsResponseDataOperation1
func (t *GetSystemsResponse_DataOperation) FromGetSystemsResponseDataOperation1(v GetSystemsResponseDataOperation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetSystemsResponseDataOperation1 performs a merge with any union data inside the GetSystemsResponse_DataOperation, using the provided GetSystemsResponseDataOperation1
func (t *GetSystemsResponse_DataOperation) MergeGetSystemsResponseDataOperation1(v GetSystemsResponseDataOperation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetSystemsResponse_DataOperation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetSystemsResponse_DataOperation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGetViewFileResponseOutput0 returns the union data inside the GetViewFileResponse_Output as a GetViewFileResponseOutput0
func (t GetViewFileResponse_Output) AsGetViewFileResponseOutput0() (GetViewFileResponseOutput0, error) {
	var body GetViewFileResponseOutput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetViewFileResponseOutput0 overwrites any union data inside the GetViewFileResponse_Output as the provided GetViewFileResponseOutput0
func (t *GetViewFileResponse_Output) FromGetViewFileResponseOutput0(v GetViewFileResponseOutput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetViewFileResponseOutput0 performs a merge with any union data inside the GetViewFileResponse_Output, using the provided GetViewFileResponseOutput0
func (t *GetViewFileResponse_Output) MergeGetViewFileResponseOutput0(v GetViewFileResponseOutput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetViewFileResponseOutput1 returns the union data inside the GetViewFileResponse_Output as a GetViewFileResponseOutput1
func (t GetViewFileResponse_Output) AsGetViewFileResponseOutput1() (GetViewFileResponseOutput1, error) {
	var body GetViewFileResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetViewFileResponseOutput1 overwrites any union data inside the GetViewFileResponse_Output as the provided GetViewFileResponseOutput1
func (t *GetViewFileResponse_Output) FromGetViewFileResponseOutput1(v GetViewFileResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetViewFileResponseOutput1 performs a merge with any union data inside the GetViewFileResponse_Output, using the provided GetViewFileResponseOutput1
func (t *GetViewFileResponse_Output) MergeGetViewFileResponseOutput1(v GetViewFileResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetViewFileResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetViewFileResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerServiceHealth returns the union data inside the HPCCluster_ServicesHealth_0_Item as a SchedulerServiceHealth
func (t HPCCluster_ServicesHealth_0_Item) AsSchedulerServiceHealth() (SchedulerServiceHealth, error) {
	var body SchedulerServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealth overwrites any union data inside the HPCCluster_ServicesHealth_0_Item as the provided SchedulerServiceHealth
func (t *HPCCluster_ServicesHealth_0_Item) FromSchedulerServiceHealth(v SchedulerServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealth performs a merge with any union data inside the HPCCluster_ServicesHealth_0_Item, using the provided SchedulerServiceHealth
func (t *HPCCluster_ServicesHealth_0_Item) MergeSchedulerServiceHealth(v SchedulerServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealth returns the union data inside the HPCCluster_ServicesHealth_0_Item as a FilesystemServiceHealth
func (t HPCCluster_ServicesHealth_0_Item) AsFilesystemServiceHealth() (FilesystemServiceHealth, error) {
	var body FilesystemServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealth overwrites any union data inside the HPCCluster_ServicesHealth_0_Item as the provided FilesystemServiceHealth
func (t *HPCCluster_ServicesHealth_0_Item) FromFilesystemServiceHealth(v FilesystemServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealth performs a merge with any union data inside the HPCCluster_ServicesHealth_0_Item, using the provided FilesystemServiceHealth
func (t *HPCCluster_ServicesHealth_0_Item) MergeFilesystemServiceHealth(v FilesystemServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHServiceHealth returns the union data inside the HPCCluster_ServicesHealth_0_Item as a SSHServiceHealth
func (t HPCCluster_ServicesHealth_0_Item) AsSSHServiceHealth() (SSHServiceHealth, error) {
	var body SSHServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealth overwrites any union data inside the HPCCluster_ServicesHealth_0_Item as the provided SSHServiceHealth
func (t *HPCCluster_ServicesHealth_0_Item) FromSSHServiceHealth(v SSHServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealth performs a merge with any union data inside the HPCCluster_ServicesHealth_0_Item, using the provided SSHServiceHealth
func (t *HPCCluster_ServicesHealth_0_Item) MergeSSHServiceHealth(v SSHServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckException returns the union data inside the HPCCluster_ServicesHealth_0_Item as a HealthCheckException
func (t HPCCluster_ServicesHealth_0_Item) AsHealthCheckException() (HealthCheckException, error) {
	var body HealthCheckException
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckException overwrites any union data inside the HPCCluster_ServicesHealth_0_Item as the provided HealthCheckException
func (t *HPCCluster_ServicesHealth_0_Item) FromHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckException performs a merge with any union data inside the HPCCluster_ServicesHealth_0_Item, using the provided HealthCheckException
func (t *HPCCluster_ServicesHealth_0_Item) MergeHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HPCCluster_ServicesHealth_0_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HPCCluster_ServicesHealth_0_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHPCClusterServicesHealth0 returns the union data inside the HPCCluster_ServicesHealth as a HPCClusterServicesHealth0
func (t HPCCluster_ServicesHealth) AsHPCClusterServicesHealth0() (HPCClusterServicesHealth0, error) {
	var body HPCClusterServicesHealth0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHPCClusterServicesHealth0 overwrites any union data inside the HPCCluster_ServicesHealth as the provided HPCClusterServicesHealth0
func (t *HPCCluster_ServicesHealth) FromHPCClusterServicesHealth0(v HPCClusterServicesHealth0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHPCClusterServicesHealth0 performs a merge with any union data inside the HPCCluster_ServicesHealth, using the provided HPCClusterServicesHealth0
func (t *HPCCluster_ServicesHealth) MergeHPCClusterServicesHealth0(v HPCClusterServicesHealth0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHPCClusterServicesHealth1 returns the union data inside the HPCCluster_ServicesHealth as a HPCClusterServicesHealth1
func (t HPCCluster_ServicesHealth) AsHPCClusterServicesHealth1() (HPCClusterServicesHealth1, error) {
	var body HPCClusterServicesHealth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHPCClusterServicesHealth1 overwrites any union data inside the HPCCluster_ServicesHealth as the provided HPCClusterServicesHealth1
func (t *HPCCluster_ServicesHealth) FromHPCClusterServicesHealth1(v HPCClusterServicesHealth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHPCClusterServicesHealth1 performs a merge with any union data inside the HPCCluster_ServicesHealth, using the provided HPCClusterServicesHealth1
func (t *HPCCluster_ServicesHealth) MergeHPCClusterServicesHealth1(v HPCClusterServicesHealth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HPCCluster_ServicesHealth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HPCCluster_ServicesHealth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHealthCheckExceptionHealthy0 returns the union data inside the HealthCheckException_Healthy as a HealthCheckExceptionHealthy0
func (t HealthCheckException_Healthy) AsHealthCheckExceptionHealthy0() (HealthCheckExceptionHealthy0, error) {
	var body HealthCheckExceptionHealthy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionHealthy0 overwrites any union data inside the HealthCheckException_Healthy as the provided HealthCheckExceptionHealthy0
func (t *HealthCheckException_Healthy) FromHealthCheckExceptionHealthy0(v HealthCheckExceptionHealthy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionHealthy0 performs a merge with any union data inside the HealthCheckException_Healthy, using the provided HealthCheckExceptionHealthy0
func (t *HealthCheckException_Healthy) MergeHealthCheckExceptionHealthy0(v HealthCheckExceptionHealthy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckExceptionHealthy1 returns the union data inside the HealthCheckException_Healthy as a HealthCheckExceptionHealthy1
func (t HealthCheckException_Healthy) AsHealthCheckExceptionHealthy1() (HealthCheckExceptionHealthy1, error) {
	var body HealthCheckExceptionHealthy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionHealthy1 overwrites any union data inside the HealthCheckException_Healthy as the provided HealthCheckExceptionHealthy1
func (t *HealthCheckException_Healthy) FromHealthCheckExceptionHealthy1(v HealthCheckExceptionHealthy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionHealthy1 performs a merge with any union data inside the HealthCheckException_Healthy, using the provided HealthCheckExceptionHealthy1
func (t *HealthCheckException_Healthy) MergeHealthCheckExceptionHealthy1(v HealthCheckExceptionHealthy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HealthCheckException_Healthy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HealthCheckException_Healthy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHealthCheckExceptionLastChecked0 returns the union data inside the HealthCheckException_LastChecked as a HealthCheckExceptionLastChecked0
func (t HealthCheckException_LastChecked) AsHealthCheckExceptionLastChecked0() (HealthCheckExceptionLastChecked0, error) {
	var body HealthCheckExceptionLastChecked0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionLastChecked0 overwrites any union data inside the HealthCheckException_LastChecked as the provided HealthCheckExceptionLastChecked0
func (t *HealthCheckException_LastChecked) FromHealthCheckExceptionLastChecked0(v HealthCheckExceptionLastChecked0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionLastChecked0 performs a merge with any union data inside the HealthCheckException_LastChecked, using the provided HealthCheckExceptionLastChecked0
func (t *HealthCheckException_LastChecked) MergeHealthCheckExceptionLastChecked0(v HealthCheckExceptionLastChecked0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckExceptionLastChecked1 returns the union data inside the HealthCheckException_LastChecked as a HealthCheckExceptionLastChecked1
func (t HealthCheckException_LastChecked) AsHealthCheckExceptionLastChecked1() (HealthCheckExceptionLastChecked1, error) {
	var body HealthCheckExceptionLastChecked1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionLastChecked1 overwrites any union data inside the HealthCheckException_LastChecked as the provided HealthCheckExceptionLastChecked1
func (t *HealthCheckException_LastChecked) FromHealthCheckExceptionLastChecked1(v HealthCheckExceptionLastChecked1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionLastChecked1 performs a merge with any union data inside the HealthCheckException_LastChecked, using the provided HealthCheckExceptionLastChecked1
func (t *HealthCheckException_LastChecked) MergeHealthCheckExceptionLastChecked1(v HealthCheckExceptionLastChecked1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HealthCheckException_LastChecked) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HealthCheckException_LastChecked) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHealthCheckExceptionLatency0 returns the union data inside the HealthCheckException_Latency as a HealthCheckExceptionLatency0
func (t HealthCheckException_Latency) AsHealthCheckExceptionLatency0() (HealthCheckExceptionLatency0, error) {
	var body HealthCheckExceptionLatency0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionLatency0 overwrites any union data inside the HealthCheckException_Latency as the provided HealthCheckExceptionLatency0
func (t *HealthCheckException_Latency) FromHealthCheckExceptionLatency0(v HealthCheckExceptionLatency0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionLatency0 performs a merge with any union data inside the HealthCheckException_Latency, using the provided HealthCheckExceptionLatency0
func (t *HealthCheckException_Latency) MergeHealthCheckExceptionLatency0(v HealthCheckExceptionLatency0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckExceptionLatency1 returns the union data inside the HealthCheckException_Latency as a HealthCheckExceptionLatency1
func (t HealthCheckException_Latency) AsHealthCheckExceptionLatency1() (HealthCheckExceptionLatency1, error) {
	var body HealthCheckExceptionLatency1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionLatency1 overwrites any union data inside the HealthCheckException_Latency as the provided HealthCheckExceptionLatency1
func (t *HealthCheckException_Latency) FromHealthCheckExceptionLatency1(v HealthCheckExceptionLatency1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionLatency1 performs a merge with any union data inside the HealthCheckException_Latency, using the provided HealthCheckExceptionLatency1
func (t *HealthCheckException_Latency) MergeHealthCheckExceptionLatency1(v HealthCheckExceptionLatency1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HealthCheckException_Latency) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HealthCheckException_Latency) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHealthCheckExceptionMessage0 returns the union data inside the HealthCheckException_Message as a HealthCheckExceptionMessage0
func (t HealthCheckException_Message) AsHealthCheckExceptionMessage0() (HealthCheckExceptionMessage0, error) {
	var body HealthCheckExceptionMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionMessage0 overwrites any union data inside the HealthCheckException_Message as the provided HealthCheckExceptionMessage0
func (t *HealthCheckException_Message) FromHealthCheckExceptionMessage0(v HealthCheckExceptionMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionMessage0 performs a merge with any union data inside the HealthCheckException_Message, using the provided HealthCheckExceptionMessage0
func (t *HealthCheckException_Message) MergeHealthCheckExceptionMessage0(v HealthCheckExceptionMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckExceptionMessage1 returns the union data inside the HealthCheckException_Message as a HealthCheckExceptionMessage1
func (t HealthCheckException_Message) AsHealthCheckExceptionMessage1() (HealthCheckExceptionMessage1, error) {
	var body HealthCheckExceptionMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckExceptionMessage1 overwrites any union data inside the HealthCheckException_Message as the provided HealthCheckExceptionMessage1
func (t *HealthCheckException_Message) FromHealthCheckExceptionMessage1(v HealthCheckExceptionMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckExceptionMessage1 performs a merge with any union data inside the HealthCheckException_Message, using the provided HealthCheckExceptionMessage1
func (t *HealthCheckException_Message) MergeHealthCheckExceptionMessage1(v HealthCheckExceptionMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HealthCheckException_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HealthCheckException_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelAccount0 returns the union data inside the JobDescriptionModel_Account as a JobDescriptionModelAccount0
func (t JobDescriptionModel_Account) AsJobDescriptionModelAccount0() (JobDescriptionModelAccount0, error) {
	var body JobDescriptionModelAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelAccount0 overwrites any union data inside the JobDescriptionModel_Account as the provided JobDescriptionModelAccount0
func (t *JobDescriptionModel_Account) FromJobDescriptionModelAccount0(v JobDescriptionModelAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelAccount0 performs a merge with any union data inside the JobDescriptionModel_Account, using the provided JobDescriptionModelAccount0
func (t *JobDescriptionModel_Account) MergeJobDescriptionModelAccount0(v JobDescriptionModelAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelAccount1 returns the union data inside the JobDescriptionModel_Account as a JobDescriptionModelAccount1
func (t JobDescriptionModel_Account) AsJobDescriptionModelAccount1() (JobDescriptionModelAccount1, error) {
	var body JobDescriptionModelAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelAccount1 overwrites any union data inside the JobDescriptionModel_Account as the provided JobDescriptionModelAccount1
func (t *JobDescriptionModel_Account) FromJobDescriptionModelAccount1(v JobDescriptionModelAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelAccount1 performs a merge with any union data inside the JobDescriptionModel_Account, using the provided JobDescriptionModelAccount1
func (t *JobDescriptionModel_Account) MergeJobDescriptionModelAccount1(v JobDescriptionModelAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelConstraints0 returns the union data inside the JobDescriptionModel_Constraints as a JobDescriptionModelConstraints0
func (t JobDescriptionModel_Constraints) AsJobDescriptionModelConstraints0() (JobDescriptionModelConstraints0, error) {
	var body JobDescriptionModelConstraints0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelConstraints0 overwrites any union data inside the JobDescriptionModel_Constraints as the provided JobDescriptionModelConstraints0
func (t *JobDescriptionModel_Constraints) FromJobDescriptionModelConstraints0(v JobDescriptionModelConstraints0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelConstraints0 performs a merge with any union data inside the JobDescriptionModel_Constraints, using the provided JobDescriptionModelConstraints0
func (t *JobDescriptionModel_Constraints) MergeJobDescriptionModelConstraints0(v JobDescriptionModelConstraints0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelConstraints1 returns the union data inside the JobDescriptionModel_Constraints as a JobDescriptionModelConstraints1
func (t JobDescriptionModel_Constraints) AsJobDescriptionModelConstraints1() (JobDescriptionModelConstraints1, error) {
	var body JobDescriptionModelConstraints1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelConstraints1 overwrites any union data inside the JobDescriptionModel_Constraints as the provided JobDescriptionModelConstraints1
func (t *JobDescriptionModel_Constraints) FromJobDescriptionModelConstraints1(v JobDescriptionModelConstraints1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelConstraints1 performs a merge with any union data inside the JobDescriptionModel_Constraints, using the provided JobDescriptionModelConstraints1
func (t *JobDescriptionModel_Constraints) MergeJobDescriptionModelConstraints1(v JobDescriptionModelConstraints1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_Constraints) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_Constraints) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelEnv0 returns the union data inside the JobDescriptionModel_Env as a JobDescriptionModelEnv0
func (t JobDescriptionModel_Env) AsJobDescriptionModelEnv0() (JobDescriptionModelEnv0, error) {
	var body JobDescriptionModelEnv0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelEnv0 overwrites any union data inside the JobDescriptionModel_Env as the provided JobDescriptionModelEnv0
func (t *JobDescriptionModel_Env) FromJobDescriptionModelEnv0(v JobDescriptionModelEnv0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelEnv0 performs a merge with any union data inside the JobDescriptionModel_Env, using the provided JobDescriptionModelEnv0
func (t *JobDescriptionModel_Env) MergeJobDescriptionModelEnv0(v JobDescriptionModelEnv0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelEnv1 returns the union data inside the JobDescriptionModel_Env as a JobDescriptionModelEnv1
func (t JobDescriptionModel_Env) AsJobDescriptionModelEnv1() (JobDescriptionModelEnv1, error) {
	var body JobDescriptionModelEnv1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelEnv1 overwrites any union data inside the JobDescriptionModel_Env as the provided JobDescriptionModelEnv1
func (t *JobDescriptionModel_Env) FromJobDescriptionModelEnv1(v JobDescriptionModelEnv1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelEnv1 performs a merge with any union data inside the JobDescriptionModel_Env, using the provided JobDescriptionModelEnv1
func (t *JobDescriptionModel_Env) MergeJobDescriptionModelEnv1(v JobDescriptionModelEnv1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelEnv2 returns the union data inside the JobDescriptionModel_Env as a JobDescriptionModelEnv2
func (t JobDescriptionModel_Env) AsJobDescriptionModelEnv2() (JobDescriptionModelEnv2, error) {
	var body JobDescriptionModelEnv2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelEnv2 overwrites any union data inside the JobDescriptionModel_Env as the provided JobDescriptionModelEnv2
func (t *JobDescriptionModel_Env) FromJobDescriptionModelEnv2(v JobDescriptionModelEnv2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelEnv2 performs a merge with any union data inside the JobDescriptionModel_Env, using the provided JobDescriptionModelEnv2
func (t *JobDescriptionModel_Env) MergeJobDescriptionModelEnv2(v JobDescriptionModelEnv2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_Env) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_Env) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelName0 returns the union data inside the JobDescriptionModel_Name as a JobDescriptionModelName0
func (t JobDescriptionModel_Name) AsJobDescriptionModelName0() (JobDescriptionModelName0, error) {
	var body JobDescriptionModelName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelName0 overwrites any union data inside the JobDescriptionModel_Name as the provided JobDescriptionModelName0
func (t *JobDescriptionModel_Name) FromJobDescriptionModelName0(v JobDescriptionModelName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelName0 performs a merge with any union data inside the JobDescriptionModel_Name, using the provided JobDescriptionModelName0
func (t *JobDescriptionModel_Name) MergeJobDescriptionModelName0(v JobDescriptionModelName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelName1 returns the union data inside the JobDescriptionModel_Name as a JobDescriptionModelName1
func (t JobDescriptionModel_Name) AsJobDescriptionModelName1() (JobDescriptionModelName1, error) {
	var body JobDescriptionModelName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelName1 overwrites any union data inside the JobDescriptionModel_Name as the provided JobDescriptionModelName1
func (t *JobDescriptionModel_Name) FromJobDescriptionModelName1(v JobDescriptionModelName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelName1 performs a merge with any union data inside the JobDescriptionModel_Name, using the provided JobDescriptionModelName1
func (t *JobDescriptionModel_Name) MergeJobDescriptionModelName1(v JobDescriptionModelName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_Name) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_Name) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelStandardError0 returns the union data inside the JobDescriptionModel_StandardError as a JobDescriptionModelStandardError0
func (t JobDescriptionModel_StandardError) AsJobDescriptionModelStandardError0() (JobDescriptionModelStandardError0, error) {
	var body JobDescriptionModelStandardError0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelStandardError0 overwrites any union data inside the JobDescriptionModel_StandardError as the provided JobDescriptionModelStandardError0
func (t *JobDescriptionModel_StandardError) FromJobDescriptionModelStandardError0(v JobDescriptionModelStandardError0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelStandardError0 performs a merge with any union data inside the JobDescriptionModel_StandardError, using the provided JobDescriptionModelStandardError0
func (t *JobDescriptionModel_StandardError) MergeJobDescriptionModelStandardError0(v JobDescriptionModelStandardError0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelStandardError1 returns the union data inside the JobDescriptionModel_StandardError as a JobDescriptionModelStandardError1
func (t JobDescriptionModel_StandardError) AsJobDescriptionModelStandardError1() (JobDescriptionModelStandardError1, error) {
	var body JobDescriptionModelStandardError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelStandardError1 overwrites any union data inside the JobDescriptionModel_StandardError as the provided JobDescriptionModelStandardError1
func (t *JobDescriptionModel_StandardError) FromJobDescriptionModelStandardError1(v JobDescriptionModelStandardError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelStandardError1 performs a merge with any union data inside the JobDescriptionModel_StandardError, using the provided JobDescriptionModelStandardError1
func (t *JobDescriptionModel_StandardError) MergeJobDescriptionModelStandardError1(v JobDescriptionModelStandardError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_StandardError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_StandardError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelStandardInput0 returns the union data inside the JobDescriptionModel_StandardInput as a JobDescriptionModelStandardInput0
func (t JobDescriptionModel_StandardInput) AsJobDescriptionModelStandardInput0() (JobDescriptionModelStandardInput0, error) {
	var body JobDescriptionModelStandardInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelStandardInput0 overwrites any union data inside the JobDescriptionModel_StandardInput as the provided JobDescriptionModelStandardInput0
func (t *JobDescriptionModel_StandardInput) FromJobDescriptionModelStandardInput0(v JobDescriptionModelStandardInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelStandardInput0 performs a merge with any union data inside the JobDescriptionModel_StandardInput, using the provided JobDescriptionModelStandardInput0
func (t *JobDescriptionModel_StandardInput) MergeJobDescriptionModelStandardInput0(v JobDescriptionModelStandardInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelStandardInput1 returns the union data inside the JobDescriptionModel_StandardInput as a JobDescriptionModelStandardInput1
func (t JobDescriptionModel_StandardInput) AsJobDescriptionModelStandardInput1() (JobDescriptionModelStandardInput1, error) {
	var body JobDescriptionModelStandardInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelStandardInput1 overwrites any union data inside the JobDescriptionModel_StandardInput as the provided JobDescriptionModelStandardInput1
func (t *JobDescriptionModel_StandardInput) FromJobDescriptionModelStandardInput1(v JobDescriptionModelStandardInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelStandardInput1 performs a merge with any union data inside the JobDescriptionModel_StandardInput, using the provided JobDescriptionModelStandardInput1
func (t *JobDescriptionModel_StandardInput) MergeJobDescriptionModelStandardInput1(v JobDescriptionModelStandardInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_StandardInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_StandardInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelStandardOutput0 returns the union data inside the JobDescriptionModel_StandardOutput as a JobDescriptionModelStandardOutput0
func (t JobDescriptionModel_StandardOutput) AsJobDescriptionModelStandardOutput0() (JobDescriptionModelStandardOutput0, error) {
	var body JobDescriptionModelStandardOutput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelStandardOutput0 overwrites any union data inside the JobDescriptionModel_StandardOutput as the provided JobDescriptionModelStandardOutput0
func (t *JobDescriptionModel_StandardOutput) FromJobDescriptionModelStandardOutput0(v JobDescriptionModelStandardOutput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelStandardOutput0 performs a merge with any union data inside the JobDescriptionModel_StandardOutput, using the provided JobDescriptionModelStandardOutput0
func (t *JobDescriptionModel_StandardOutput) MergeJobDescriptionModelStandardOutput0(v JobDescriptionModelStandardOutput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelStandardOutput1 returns the union data inside the JobDescriptionModel_StandardOutput as a JobDescriptionModelStandardOutput1
func (t JobDescriptionModel_StandardOutput) AsJobDescriptionModelStandardOutput1() (JobDescriptionModelStandardOutput1, error) {
	var body JobDescriptionModelStandardOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelStandardOutput1 overwrites any union data inside the JobDescriptionModel_StandardOutput as the provided JobDescriptionModelStandardOutput1
func (t *JobDescriptionModel_StandardOutput) FromJobDescriptionModelStandardOutput1(v JobDescriptionModelStandardOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelStandardOutput1 performs a merge with any union data inside the JobDescriptionModel_StandardOutput, using the provided JobDescriptionModelStandardOutput1
func (t *JobDescriptionModel_StandardOutput) MergeJobDescriptionModelStandardOutput1(v JobDescriptionModelStandardOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_StandardOutput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_StandardOutput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobMetadataModelScript0 returns the union data inside the JobMetadataModel_Script as a JobMetadataModelScript0
func (t JobMetadataModel_Script) AsJobMetadataModelScript0() (JobMetadataModelScript0, error) {
	var body JobMetadataModelScript0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelScript0 overwrites any union data inside the JobMetadataModel_Script as the provided JobMetadataModelScript0
func (t *JobMetadataModel_Script) FromJobMetadataModelScript0(v JobMetadataModelScript0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelScript0 performs a merge with any union data inside the JobMetadataModel_Script, using the provided JobMetadataModelScript0
func (t *JobMetadataModel_Script) MergeJobMetadataModelScript0(v JobMetadataModelScript0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobMetadataModelScript1 returns the union data inside the JobMetadataModel_Script as a JobMetadataModelScript1
func (t JobMetadataModel_Script) AsJobMetadataModelScript1() (JobMetadataModelScript1, error) {
	var body JobMetadataModelScript1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelScript1 overwrites any union data inside the JobMetadataModel_Script as the provided JobMetadataModelScript1
func (t *JobMetadataModel_Script) FromJobMetadataModelScript1(v JobMetadataModelScript1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelScript1 performs a merge with any union data inside the JobMetadataModel_Script, using the provided JobMetadataModelScript1
func (t *JobMetadataModel_Script) MergeJobMetadataModelScript1(v JobMetadataModelScript1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobMetadataModel_Script) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobMetadataModel_Script) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobMetadataModelStandardError0 returns the union data inside the JobMetadataModel_StandardError as a JobMetadataModelStandardError0
func (t JobMetadataModel_StandardError) AsJobMetadataModelStandardError0() (JobMetadataModelStandardError0, error) {
	var body JobMetadataModelStandardError0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelStandardError0 overwrites any union data inside the JobMetadataModel_StandardError as the provided JobMetadataModelStandardError0
func (t *JobMetadataModel_StandardError) FromJobMetadataModelStandardError0(v JobMetadataModelStandardError0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelStandardError0 performs a merge with any union data inside the JobMetadataModel_StandardError, using the provided JobMetadataModelStandardError0
func (t *JobMetadataModel_StandardError) MergeJobMetadataModelStandardError0(v JobMetadataModelStandardError0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobMetadataModelStandardError1 returns the union data inside the JobMetadataModel_StandardError as a JobMetadataModelStandardError1
func (t JobMetadataModel_StandardError) AsJobMetadataModelStandardError1() (JobMetadataModelStandardError1, error) {
	var body JobMetadataModelStandardError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelStandardError1 overwrites any union data inside the JobMetadataModel_StandardError as the provided JobMetadataModelStandardError1
func (t *JobMetadataModel_StandardError) FromJobMetadataModelStandardError1(v JobMetadataModelStandardError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelStandardError1 performs a merge with any union data inside the JobMetadataModel_StandardError, using the provided JobMetadataModelStandardError1
func (t *JobMetadataModel_StandardError) MergeJobMetadataModelStandardError1(v JobMetadataModelStandardError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobMetadataModel_StandardError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobMetadataModel_StandardError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobMetadataModelStandardInput0 returns the union data inside the JobMetadataModel_StandardInput as a JobMetadataModelStandardInput0
func (t JobMetadataModel_StandardInput) AsJobMetadataModelStandardInput0() (JobMetadataModelStandardInput0, error) {
	var body JobMetadataModelStandardInput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelStandardInput0 overwrites any union data inside the JobMetadataModel_StandardInput as the provided JobMetadataModelStandardInput0
func (t *JobMetadataModel_StandardInput) FromJobMetadataModelStandardInput0(v JobMetadataModelStandardInput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelStandardInput0 performs a merge with any union data inside the JobMetadataModel_StandardInput, using the provided JobMetadataModelStandardInput0
func (t *JobMetadataModel_StandardInput) MergeJobMetadataModelStandardInput0(v JobMetadataModelStandardInput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobMetadataModelStandardInput1 returns the union data inside the JobMetadataModel_StandardInput as a JobMetadataModelStandardInput1
func (t JobMetadataModel_StandardInput) AsJobMetadataModelStandardInput1() (JobMetadataModelStandardInput1, error) {
	var body JobMetadataModelStandardInput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelStandardInput1 overwrites any union data inside the JobMetadataModel_StandardInput as the provided JobMetadataModelStandardInput1
func (t *JobMetadataModel_StandardInput) FromJobMetadataModelStandardInput1(v JobMetadataModelStandardInput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelStandardInput1 performs a merge with any union data inside the JobMetadataModel_StandardInput, using the provided JobMetadataModelStandardInput1
func (t *JobMetadataModel_StandardInput) MergeJobMetadataModelStandardInput1(v JobMetadataModelStandardInput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobMetadataModel_StandardInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobMetadataModel_StandardInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobMetadataModelStandardOutput0 returns the union data inside the JobMetadataModel_StandardOutput as a JobMetadataModelStandardOutput0
func (t JobMetadataModel_StandardOutput) AsJobMetadataModelStandardOutput0() (JobMetadataModelStandardOutput0, error) {
	var body JobMetadataModelStandardOutput0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelStandardOutput0 overwrites any union data inside the JobMetadataModel_StandardOutput as the provided JobMetadataModelStandardOutput0
func (t *JobMetadataModel_StandardOutput) FromJobMetadataModelStandardOutput0(v JobMetadataModelStandardOutput0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelStandardOutput0 performs a merge with any union data inside the JobMetadataModel_StandardOutput, using the provided JobMetadataModelStandardOutput0
func (t *JobMetadataModel_StandardOutput) MergeJobMetadataModelStandardOutput0(v JobMetadataModelStandardOutput0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobMetadataModelStandardOutput1 returns the union data inside the JobMetadataModel_StandardOutput as a JobMetadataModelStandardOutput1
func (t JobMetadataModel_StandardOutput) AsJobMetadataModelStandardOutput1() (JobMetadataModelStandardOutput1, error) {
	var body JobMetadataModelStandardOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobMetadataModelStandardOutput1 overwrites any union data inside the JobMetadataModel_StandardOutput as the provided JobMetadataModelStandardOutput1
func (t *JobMetadataModel_StandardOutput) FromJobMetadataModelStandardOutput1(v JobMetadataModelStandardOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobMetadataModelStandardOutput1 performs a merge with any union data inside the JobMetadataModel_StandardOutput, using the provided JobMetadataModelStandardOutput1
func (t *JobMetadataModel_StandardOutput) MergeJobMetadataModelStandardOutput1(v JobMetadataModelStandardOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobMetadataModel_StandardOutput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobMetadataModel_StandardOutput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobModelAccount0 returns the union data inside the JobModel_Account as a JobModelAccount0
func (t JobModel_Account) AsJobModelAccount0() (JobModelAccount0, error) {
	var body JobModelAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelAccount0 overwrites any union data inside the JobModel_Account as the provided JobModelAccount0
func (t *JobModel_Account) FromJobModelAccount0(v JobModelAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelAccount0 performs a merge with any union data inside the JobModel_Account, using the provided JobModelAccount0
func (t *JobModel_Account) MergeJobModelAccount0(v JobModelAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobModelAccount1 returns the union data inside the JobModel_Account as a JobModelAccount1
func (t JobModel_Account) AsJobModelAccount1() (JobModelAccount1, error) {
	var body JobModelAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelAccount1 overwrites any union data inside the JobModel_Account as the provided JobModelAccount1
func (t *JobModel_Account) FromJobModelAccount1(v JobModelAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelAccount1 performs a merge with any union data inside the JobModel_Account, using the provided JobModelAccount1
func (t *JobModel_Account) MergeJobModelAccount1(v JobModelAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobModel_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobModelGroup0 returns the union data inside the JobModel_Group as a JobModelGroup0
func (t JobModel_Group) AsJobModelGroup0() (JobModelGroup0, error) {
	var body JobModelGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelGroup0 overwrites any union data inside the JobModel_Group as the provided JobModelGroup0
func (t *JobModel_Group) FromJobModelGroup0(v JobModelGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelGroup0 performs a merge with any union data inside the JobModel_Group, using the provided JobModelGroup0
func (t *JobModel_Group) MergeJobModelGroup0(v JobModelGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobModelGroup1 returns the union data inside the JobModel_Group as a JobModelGroup1
func (t JobModel_Group) AsJobModelGroup1() (JobModelGroup1, error) {
	var body JobModelGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelGroup1 overwrites any union data inside the JobModel_Group as the provided JobModelGroup1
func (t *JobModel_Group) FromJobModelGroup1(v JobModelGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelGroup1 performs a merge with any union data inside the JobModel_Group, using the provided JobModelGroup1
func (t *JobModel_Group) MergeJobModelGroup1(v JobModelGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobModel_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobModelKillRequestUser0 returns the union data inside the JobModel_KillRequestUser as a JobModelKillRequestUser0
func (t JobModel_KillRequestUser) AsJobModelKillRequestUser0() (JobModelKillRequestUser0, error) {
	var body JobModelKillRequestUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelKillRequestUser0 overwrites any union data inside the JobModel_KillRequestUser as the provided JobModelKillRequestUser0
func (t *JobModel_KillRequestUser) FromJobModelKillRequestUser0(v JobModelKillRequestUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelKillRequestUser0 performs a merge with any union data inside the JobModel_KillRequestUser, using the provided JobModelKillRequestUser0
func (t *JobModel_KillRequestUser) MergeJobModelKillRequestUser0(v JobModelKillRequestUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobModelKillRequestUser1 returns the union data inside the JobModel_KillRequestUser as a JobModelKillRequestUser1
func (t JobModel_KillRequestUser) AsJobModelKillRequestUser1() (JobModelKillRequestUser1, error) {
	var body JobModelKillRequestUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelKillRequestUser1 overwrites any union data inside the JobModel_KillRequestUser as the provided JobModelKillRequestUser1
func (t *JobModel_KillRequestUser) FromJobModelKillRequestUser1(v JobModelKillRequestUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelKillRequestUser1 performs a merge with any union data inside the JobModel_KillRequestUser, using the provided JobModelKillRequestUser1
func (t *JobModel_KillRequestUser) MergeJobModelKillRequestUser1(v JobModelKillRequestUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel_KillRequestUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobModel_KillRequestUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobModelPriority0 returns the union data inside the JobModel_Priority as a JobModelPriority0
func (t JobModel_Priority) AsJobModelPriority0() (JobModelPriority0, error) {
	var body JobModelPriority0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelPriority0 overwrites any union data inside the JobModel_Priority as the provided JobModelPriority0
func (t *JobModel_Priority) FromJobModelPriority0(v JobModelPriority0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelPriority0 performs a merge with any union data inside the JobModel_Priority, using the provided JobModelPriority0
func (t *JobModel_Priority) MergeJobModelPriority0(v JobModelPriority0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobModelPriority1 returns the union data inside the JobModel_Priority as a JobModelPriority1
func (t JobModel_Priority) AsJobModelPriority1() (JobModelPriority1, error) {
	var body JobModelPriority1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelPriority1 overwrites any union data inside the JobModel_Priority as the provided JobModelPriority1
func (t *JobModel_Priority) FromJobModelPriority1(v JobModelPriority1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelPriority1 performs a merge with any union data inside the JobModel_Priority, using the provided JobModelPriority1
func (t *JobModel_Priority) MergeJobModelPriority1(v JobModelPriority1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel_Priority) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobModel_Priority) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobModelTasks0 returns the union data inside the JobModel_Tasks as a JobModelTasks0
func (t JobModel_Tasks) AsJobModelTasks0() (JobModelTasks0, error) {
	var body JobModelTasks0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelTasks0 overwrites any union data inside the JobModel_Tasks as the provided JobModelTasks0
func (t *JobModel_Tasks) FromJobModelTasks0(v JobModelTasks0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelTasks0 performs a merge with any union data inside the JobModel_Tasks, using the provided JobModelTasks0
func (t *JobModel_Tasks) MergeJobModelTasks0(v JobModelTasks0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobModelTasks1 returns the union data inside the JobModel_Tasks as a JobModelTasks1
func (t JobModel_Tasks) AsJobModelTasks1() (JobModelTasks1, error) {
	var body JobModelTasks1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelTasks1 overwrites any union data inside the JobModel_Tasks as the provided JobModelTasks1
func (t *JobModel_Tasks) FromJobModelTasks1(v JobModelTasks1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelTasks1 performs a merge with any union data inside the JobModel_Tasks, using the provided JobModelTasks1
func (t *JobModel_Tasks) MergeJobModelTasks1(v JobModelTasks1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel_Tasks) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobModel_Tasks) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobModelUser0 returns the union data inside the JobModel_User as a JobModelUser0
func (t JobModel_User) AsJobModelUser0() (JobModelUser0, error) {
	var body JobModelUser0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelUser0 overwrites any union data inside the JobModel_User as the provided JobModelUser0
func (t *JobModel_User) FromJobModelUser0(v JobModelUser0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelUser0 performs a merge with any union data inside the JobModel_User, using the provided JobModelUser0
func (t *JobModel_User) MergeJobModelUser0(v JobModelUser0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobModelUser1 returns the union data inside the JobModel_User as a JobModelUser1
func (t JobModel_User) AsJobModelUser1() (JobModelUser1, error) {
	var body JobModelUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobModelUser1 overwrites any union data inside the JobModel_User as the provided JobModelUser1
func (t *JobModel_User) FromJobModelUser1(v JobModelUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobModelUser1 performs a merge with any union data inside the JobModel_User, using the provided JobModelUser1
func (t *JobModel_User) MergeJobModelUser1(v JobModelUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobModel_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobStatusExitCode0 returns the union data inside the JobStatus_ExitCode as a JobStatusExitCode0
func (t JobStatus_ExitCode) AsJobStatusExitCode0() (JobStatusExitCode0, error) {
	var body JobStatusExitCode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobStatusExitCode0 overwrites any union data inside the JobStatus_ExitCode as the provided JobStatusExitCode0
func (t *JobStatus_ExitCode) FromJobStatusExitCode0(v JobStatusExitCode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobStatusExitCode0 performs a merge with any union data inside the JobStatus_ExitCode, using the provided JobStatusExitCode0
func (t *JobStatus_ExitCode) MergeJobStatusExitCode0(v JobStatusExitCode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobStatusExitCode1 returns the union data inside the JobStatus_ExitCode as a JobStatusExitCode1
func (t JobStatus_ExitCode) AsJobStatusExitCode1() (JobStatusExitCode1, error) {
	var body JobStatusExitCode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobStatusExitCode1 overwrites any union data inside the JobStatus_ExitCode as the provided JobStatusExitCode1
func (t *JobStatus_ExitCode) FromJobStatusExitCode1(v JobStatusExitCode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobStatusExitCode1 performs a merge with any union data inside the JobStatus_ExitCode, using the provided JobStatusExitCode1
func (t *JobStatus_ExitCode) MergeJobStatusExitCode1(v JobStatusExitCode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobStatus_ExitCode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobStatus_ExitCode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobStatusInterruptSignal0 returns the union data inside the JobStatus_InterruptSignal as a JobStatusInterruptSignal0
func (t JobStatus_InterruptSignal) AsJobStatusInterruptSignal0() (JobStatusInterruptSignal0, error) {
	var body JobStatusInterruptSignal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobStatusInterruptSignal0 overwrites any union data inside the JobStatus_InterruptSignal as the provided JobStatusInterruptSignal0
func (t *JobStatus_InterruptSignal) FromJobStatusInterruptSignal0(v JobStatusInterruptSignal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobStatusInterruptSignal0 performs a merge with any union data inside the JobStatus_InterruptSignal, using the provided JobStatusInterruptSignal0
func (t *JobStatus_InterruptSignal) MergeJobStatusInterruptSignal0(v JobStatusInterruptSignal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobStatusInterruptSignal1 returns the union data inside the JobStatus_InterruptSignal as a JobStatusInterruptSignal1
func (t JobStatus_InterruptSignal) AsJobStatusInterruptSignal1() (JobStatusInterruptSignal1, error) {
	var body JobStatusInterruptSignal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobStatusInterruptSignal1 overwrites any union data inside the JobStatus_InterruptSignal as the provided JobStatusInterruptSignal1
func (t *JobStatus_InterruptSignal) FromJobStatusInterruptSignal1(v JobStatusInterruptSignal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobStatusInterruptSignal1 performs a merge with any union data inside the JobStatus_InterruptSignal, using the provided JobStatusInterruptSignal1
func (t *JobStatus_InterruptSignal) MergeJobStatusInterruptSignal1(v JobStatusInterruptSignal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobStatus_InterruptSignal) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobStatus_InterruptSignal) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobStatusStateReason0 returns the union data inside the JobStatus_StateReason as a JobStatusStateReason0
func (t JobStatus_StateReason) AsJobStatusStateReason0() (JobStatusStateReason0, error) {
	var body JobStatusStateReason0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobStatusStateReason0 overwrites any union data inside the JobStatus_StateReason as the provided JobStatusStateReason0
func (t *JobStatus_StateReason) FromJobStatusStateReason0(v JobStatusStateReason0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobStatusStateReason0 performs a merge with any union data inside the JobStatus_StateReason, using the provided JobStatusStateReason0
func (t *JobStatus_StateReason) MergeJobStatusStateReason0(v JobStatusStateReason0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobStatusStateReason1 returns the union data inside the JobStatus_StateReason as a JobStatusStateReason1
func (t JobStatus_StateReason) AsJobStatusStateReason1() (JobStatusStateReason1, error) {
	var body JobStatusStateReason1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobStatusStateReason1 overwrites any union data inside the JobStatus_StateReason as the provided JobStatusStateReason1
func (t *JobStatus_StateReason) FromJobStatusStateReason1(v JobStatusStateReason1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobStatusStateReason1 performs a merge with any union data inside the JobStatus_StateReason, using the provided JobStatusStateReason1
func (t *JobStatus_StateReason) MergeJobStatusStateReason1(v JobStatusStateReason1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobStatus_StateReason) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobStatus_StateReason) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobTimeElapsed0 returns the union data inside the JobTime_Elapsed as a JobTimeElapsed0
func (t JobTime_Elapsed) AsJobTimeElapsed0() (JobTimeElapsed0, error) {
	var body JobTimeElapsed0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeElapsed0 overwrites any union data inside the JobTime_Elapsed as the provided JobTimeElapsed0
func (t *JobTime_Elapsed) FromJobTimeElapsed0(v JobTimeElapsed0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeElapsed0 performs a merge with any union data inside the JobTime_Elapsed, using the provided JobTimeElapsed0
func (t *JobTime_Elapsed) MergeJobTimeElapsed0(v JobTimeElapsed0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobTimeElapsed1 returns the union data inside the JobTime_Elapsed as a JobTimeElapsed1
func (t JobTime_Elapsed) AsJobTimeElapsed1() (JobTimeElapsed1, error) {
	var body JobTimeElapsed1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeElapsed1 overwrites any union data inside the JobTime_Elapsed as the provided JobTimeElapsed1
func (t *JobTime_Elapsed) FromJobTimeElapsed1(v JobTimeElapsed1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeElapsed1 performs a merge with any union data inside the JobTime_Elapsed, using the provided JobTimeElapsed1
func (t *JobTime_Elapsed) MergeJobTimeElapsed1(v JobTimeElapsed1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobTime_Elapsed) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobTime_Elapsed) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobTimeEnd0 returns the union data inside the JobTime_End as a JobTimeEnd0
func (t JobTime_End) AsJobTimeEnd0() (JobTimeEnd0, error) {
	var body JobTimeEnd0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeEnd0 overwrites any union data inside the JobTime_End as the provided JobTimeEnd0
func (t *JobTime_End) FromJobTimeEnd0(v JobTimeEnd0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeEnd0 performs a merge with any union data inside the JobTime_End, using the provided JobTimeEnd0
func (t *JobTime_End) MergeJobTimeEnd0(v JobTimeEnd0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobTimeEnd1 returns the union data inside the JobTime_End as a JobTimeEnd1
func (t JobTime_End) AsJobTimeEnd1() (JobTimeEnd1, error) {
	var body JobTimeEnd1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeEnd1 overwrites any union data inside the JobTime_End as the provided JobTimeEnd1
func (t *JobTime_End) FromJobTimeEnd1(v JobTimeEnd1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeEnd1 performs a merge with any union data inside the JobTime_End, using the provided JobTimeEnd1
func (t *JobTime_End) MergeJobTimeEnd1(v JobTimeEnd1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobTime_End) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobTime_End) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobTimeLimit0 returns the union data inside the JobTime_Limit as a JobTimeLimit0
func (t JobTime_Limit) AsJobTimeLimit0() (JobTimeLimit0, error) {
	var body JobTimeLimit0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeLimit0 overwrites any union data inside the JobTime_Limit as the provided JobTimeLimit0
func (t *JobTime_Limit) FromJobTimeLimit0(v JobTimeLimit0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeLimit0 performs a merge with any union data inside the JobTime_Limit, using the provided JobTimeLimit0
func (t *JobTime_Limit) MergeJobTimeLimit0(v JobTimeLimit0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobTimeLimit1 returns the union data inside the JobTime_Limit as a JobTimeLimit1
func (t JobTime_Limit) AsJobTimeLimit1() (JobTimeLimit1, error) {
	var body JobTimeLimit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeLimit1 overwrites any union data inside the JobTime_Limit as the provided JobTimeLimit1
func (t *JobTime_Limit) FromJobTimeLimit1(v JobTimeLimit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeLimit1 performs a merge with any union data inside the JobTime_Limit, using the provided JobTimeLimit1
func (t *JobTime_Limit) MergeJobTimeLimit1(v JobTimeLimit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobTime_Limit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobTime_Limit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobTimeStart0 returns the union data inside the JobTime_Start as a JobTimeStart0
func (t JobTime_Start) AsJobTimeStart0() (JobTimeStart0, error) {
	var body JobTimeStart0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeStart0 overwrites any union data inside the JobTime_Start as the provided JobTimeStart0
func (t *JobTime_Start) FromJobTimeStart0(v JobTimeStart0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeStart0 performs a merge with any union data inside the JobTime_Start, using the provided JobTimeStart0
func (t *JobTime_Start) MergeJobTimeStart0(v JobTimeStart0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobTimeStart1 returns the union data inside the JobTime_Start as a JobTimeStart1
func (t JobTime_Start) AsJobTimeStart1() (JobTimeStart1, error) {
	var body JobTimeStart1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeStart1 overwrites any union data inside the JobTime_Start as the provided JobTimeStart1
func (t *JobTime_Start) FromJobTimeStart1(v JobTimeStart1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeStart1 performs a merge with any union data inside the JobTime_Start, using the provided JobTimeStart1
func (t *JobTime_Start) MergeJobTimeStart1(v JobTimeStart1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobTime_Start) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobTime_Start) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobTimeSuspended0 returns the union data inside the JobTime_Suspended as a JobTimeSuspended0
func (t JobTime_Suspended) AsJobTimeSuspended0() (JobTimeSuspended0, error) {
	var body JobTimeSuspended0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeSuspended0 overwrites any union data inside the JobTime_Suspended as the provided JobTimeSuspended0
func (t *JobTime_Suspended) FromJobTimeSuspended0(v JobTimeSuspended0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeSuspended0 performs a merge with any union data inside the JobTime_Suspended, using the provided JobTimeSuspended0
func (t *JobTime_Suspended) MergeJobTimeSuspended0(v JobTimeSuspended0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobTimeSuspended1 returns the union data inside the JobTime_Suspended as a JobTimeSuspended1
func (t JobTime_Suspended) AsJobTimeSuspended1() (JobTimeSuspended1, error) {
	var body JobTimeSuspended1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobTimeSuspended1 overwrites any union data inside the JobTime_Suspended as the provided JobTimeSuspended1
func (t *JobTime_Suspended) FromJobTimeSuspended1(v JobTimeSuspended1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobTimeSuspended1 performs a merge with any union data inside the JobTime_Suspended, using the provided JobTimeSuspended1
func (t *JobTime_Suspended) MergeJobTimeSuspended1(v JobTimeSuspended1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobTime_Suspended) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobTime_Suspended) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMoveRequestAccount0 returns the union data inside the MoveRequest_Account as a MoveRequestAccount0
func (t MoveRequest_Account) AsMoveRequestAccount0() (MoveRequestAccount0, error) {
	var body MoveRequestAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveRequestAccount0 overwrites any union data inside the MoveRequest_Account as the provided MoveRequestAccount0
func (t *MoveRequest_Account) FromMoveRequestAccount0(v MoveRequestAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveRequestAccount0 performs a merge with any union data inside the MoveRequest_Account, using the provided MoveRequestAccount0
func (t *MoveRequest_Account) MergeMoveRequestAccount0(v MoveRequestAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveRequestAccount1 returns the union data inside the MoveRequest_Account as a MoveRequestAccount1
func (t MoveRequest_Account) AsMoveRequestAccount1() (MoveRequestAccount1, error) {
	var body MoveRequestAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveRequestAccount1 overwrites any union data inside the MoveRequest_Account as the provided MoveRequestAccount1
func (t *MoveRequest_Account) FromMoveRequestAccount1(v MoveRequestAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveRequestAccount1 performs a merge with any union data inside the MoveRequest_Account, using the provided MoveRequestAccount1
func (t *MoveRequest_Account) MergeMoveRequestAccount1(v MoveRequestAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MoveRequest_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MoveRequest_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMoveRequestSourcePath0 returns the union data inside the MoveRequest_SourcePath as a MoveRequestSourcePath0
func (t MoveRequest_SourcePath) AsMoveRequestSourcePath0() (MoveRequestSourcePath0, error) {
	var body MoveRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveRequestSourcePath0 overwrites any union data inside the MoveRequest_SourcePath as the provided MoveRequestSourcePath0
func (t *MoveRequest_SourcePath) FromMoveRequestSourcePath0(v MoveRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveRequestSourcePath0 performs a merge with any union data inside the MoveRequest_SourcePath, using the provided MoveRequestSourcePath0
func (t *MoveRequest_SourcePath) MergeMoveRequestSourcePath0(v MoveRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMoveRequestSourcePath1 returns the union data inside the MoveRequest_SourcePath as a MoveRequestSourcePath1
func (t MoveRequest_SourcePath) AsMoveRequestSourcePath1() (MoveRequestSourcePath1, error) {
	var body MoveRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMoveRequestSourcePath1 overwrites any union data inside the MoveRequest_SourcePath as the provided MoveRequestSourcePath1
func (t *MoveRequest_SourcePath) FromMoveRequestSourcePath1(v MoveRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMoveRequestSourcePath1 performs a merge with any union data inside the MoveRequest_SourcePath, using the provided MoveRequestSourcePath1
func (t *MoveRequest_SourcePath) MergeMoveRequestSourcePath1(v MoveRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MoveRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MoveRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelAddress0 returns the union data inside the NodeModel_Address as a NodeModelAddress0
func (t NodeModel_Address) AsNodeModelAddress0() (NodeModelAddress0, error) {
	var body NodeModelAddress0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelAddress0 overwrites any union data inside the NodeModel_Address as the provided NodeModelAddress0
func (t *NodeModel_Address) FromNodeModelAddress0(v NodeModelAddress0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelAddress0 performs a merge with any union data inside the NodeModel_Address, using the provided NodeModelAddress0
func (t *NodeModel_Address) MergeNodeModelAddress0(v NodeModelAddress0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelAddress1 returns the union data inside the NodeModel_Address as a NodeModelAddress1
func (t NodeModel_Address) AsNodeModelAddress1() (NodeModelAddress1, error) {
	var body NodeModelAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelAddress1 overwrites any union data inside the NodeModel_Address as the provided NodeModelAddress1
func (t *NodeModel_Address) FromNodeModelAddress1(v NodeModelAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelAddress1 performs a merge with any union data inside the NodeModel_Address, using the provided NodeModelAddress1
func (t *NodeModel_Address) MergeNodeModelAddress1(v NodeModelAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Address) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Address) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelAllocCpus0 returns the union data inside the NodeModel_AllocCpus as a NodeModelAllocCpus0
func (t NodeModel_AllocCpus) AsNodeModelAllocCpus0() (NodeModelAllocCpus0, error) {
	var body NodeModelAllocCpus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelAllocCpus0 overwrites any union data inside the NodeModel_AllocCpus as the provided NodeModelAllocCpus0
func (t *NodeModel_AllocCpus) FromNodeModelAllocCpus0(v NodeModelAllocCpus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelAllocCpus0 performs a merge with any union data inside the NodeModel_AllocCpus, using the provided NodeModelAllocCpus0
func (t *NodeModel_AllocCpus) MergeNodeModelAllocCpus0(v NodeModelAllocCpus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelAllocCpus1 returns the union data inside the NodeModel_AllocCpus as a NodeModelAllocCpus1
func (t NodeModel_AllocCpus) AsNodeModelAllocCpus1() (NodeModelAllocCpus1, error) {
	var body NodeModelAllocCpus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelAllocCpus1 overwrites any union data inside the NodeModel_AllocCpus as the provided NodeModelAllocCpus1
func (t *NodeModel_AllocCpus) FromNodeModelAllocCpus1(v NodeModelAllocCpus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelAllocCpus1 performs a merge with any union data inside the NodeModel_AllocCpus, using the provided NodeModelAllocCpus1
func (t *NodeModel_AllocCpus) MergeNodeModelAllocCpus1(v NodeModelAllocCpus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_AllocCpus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_AllocCpus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelAllocMemory0 returns the union data inside the NodeModel_AllocMemory as a NodeModelAllocMemory0
func (t NodeModel_AllocMemory) AsNodeModelAllocMemory0() (NodeModelAllocMemory0, error) {
	var body NodeModelAllocMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelAllocMemory0 overwrites any union data inside the NodeModel_AllocMemory as the provided NodeModelAllocMemory0
func (t *NodeModel_AllocMemory) FromNodeModelAllocMemory0(v NodeModelAllocMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelAllocMemory0 performs a merge with any union data inside the NodeModel_AllocMemory, using the provided NodeModelAllocMemory0
func (t *NodeModel_AllocMemory) MergeNodeModelAllocMemory0(v NodeModelAllocMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelAllocMemory1 returns the union data inside the NodeModel_AllocMemory as a NodeModelAllocMemory1
func (t NodeModel_AllocMemory) AsNodeModelAllocMemory1() (NodeModelAllocMemory1, error) {
	var body NodeModelAllocMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelAllocMemory1 overwrites any union data inside the NodeModel_AllocMemory as the provided NodeModelAllocMemory1
func (t *NodeModel_AllocMemory) FromNodeModelAllocMemory1(v NodeModelAllocMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelAllocMemory1 performs a merge with any union data inside the NodeModel_AllocMemory, using the provided NodeModelAllocMemory1
func (t *NodeModel_AllocMemory) MergeNodeModelAllocMemory1(v NodeModelAllocMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_AllocMemory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_AllocMemory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelCores0 returns the union data inside the NodeModel_Cores as a NodeModelCores0
func (t NodeModel_Cores) AsNodeModelCores0() (NodeModelCores0, error) {
	var body NodeModelCores0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelCores0 overwrites any union data inside the NodeModel_Cores as the provided NodeModelCores0
func (t *NodeModel_Cores) FromNodeModelCores0(v NodeModelCores0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelCores0 performs a merge with any union data inside the NodeModel_Cores, using the provided NodeModelCores0
func (t *NodeModel_Cores) MergeNodeModelCores0(v NodeModelCores0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelCores1 returns the union data inside the NodeModel_Cores as a NodeModelCores1
func (t NodeModel_Cores) AsNodeModelCores1() (NodeModelCores1, error) {
	var body NodeModelCores1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelCores1 overwrites any union data inside the NodeModel_Cores as the provided NodeModelCores1
func (t *NodeModel_Cores) FromNodeModelCores1(v NodeModelCores1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelCores1 performs a merge with any union data inside the NodeModel_Cores, using the provided NodeModelCores1
func (t *NodeModel_Cores) MergeNodeModelCores1(v NodeModelCores1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Cores) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Cores) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelCpuLoad0 returns the union data inside the NodeModel_CpuLoad as a NodeModelCpuLoad0
func (t NodeModel_CpuLoad) AsNodeModelCpuLoad0() (NodeModelCpuLoad0, error) {
	var body NodeModelCpuLoad0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelCpuLoad0 overwrites any union data inside the NodeModel_CpuLoad as the provided NodeModelCpuLoad0
func (t *NodeModel_CpuLoad) FromNodeModelCpuLoad0(v NodeModelCpuLoad0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelCpuLoad0 performs a merge with any union data inside the NodeModel_CpuLoad, using the provided NodeModelCpuLoad0
func (t *NodeModel_CpuLoad) MergeNodeModelCpuLoad0(v NodeModelCpuLoad0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelCpuLoad1 returns the union data inside the NodeModel_CpuLoad as a NodeModelCpuLoad1
func (t NodeModel_CpuLoad) AsNodeModelCpuLoad1() (NodeModelCpuLoad1, error) {
	var body NodeModelCpuLoad1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelCpuLoad1 overwrites any union data inside the NodeModel_CpuLoad as the provided NodeModelCpuLoad1
func (t *NodeModel_CpuLoad) FromNodeModelCpuLoad1(v NodeModelCpuLoad1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelCpuLoad1 performs a merge with any union data inside the NodeModel_CpuLoad, using the provided NodeModelCpuLoad1
func (t *NodeModel_CpuLoad) MergeNodeModelCpuLoad1(v NodeModelCpuLoad1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_CpuLoad) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_CpuLoad) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelFeatures0 returns the union data inside the NodeModel_Features as a NodeModelFeatures0
func (t NodeModel_Features) AsNodeModelFeatures0() (NodeModelFeatures0, error) {
	var body NodeModelFeatures0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFeatures0 overwrites any union data inside the NodeModel_Features as the provided NodeModelFeatures0
func (t *NodeModel_Features) FromNodeModelFeatures0(v NodeModelFeatures0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFeatures0 performs a merge with any union data inside the NodeModel_Features, using the provided NodeModelFeatures0
func (t *NodeModel_Features) MergeNodeModelFeatures0(v NodeModelFeatures0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelFeatures1 returns the union data inside the NodeModel_Features as a NodeModelFeatures1
func (t NodeModel_Features) AsNodeModelFeatures1() (NodeModelFeatures1, error) {
	var body NodeModelFeatures1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFeatures1 overwrites any union data inside the NodeModel_Features as the provided NodeModelFeatures1
func (t *NodeModel_Features) FromNodeModelFeatures1(v NodeModelFeatures1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFeatures1 performs a merge with any union data inside the NodeModel_Features, using the provided NodeModelFeatures1
func (t *NodeModel_Features) MergeNodeModelFeatures1(v NodeModelFeatures1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelFeatures2 returns the union data inside the NodeModel_Features as a NodeModelFeatures2
func (t NodeModel_Features) AsNodeModelFeatures2() (NodeModelFeatures2, error) {
	var body NodeModelFeatures2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFeatures2 overwrites any union data inside the NodeModel_Features as the provided NodeModelFeatures2
func (t *NodeModel_Features) FromNodeModelFeatures2(v NodeModelFeatures2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFeatures2 performs a merge with any union data inside the NodeModel_Features, using the provided NodeModelFeatures2
func (t *NodeModel_Features) MergeNodeModelFeatures2(v NodeModelFeatures2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Features) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Features) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelFreeMemory0 returns the union data inside the NodeModel_FreeMemory as a NodeModelFreeMemory0
func (t NodeModel_FreeMemory) AsNodeModelFreeMemory0() (NodeModelFreeMemory0, error) {
	var body NodeModelFreeMemory0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFreeMemory0 overwrites any union data inside the NodeModel_FreeMemory as the provided NodeModelFreeMemory0
func (t *NodeModel_FreeMemory) FromNodeModelFreeMemory0(v NodeModelFreeMemory0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFreeMemory0 performs a merge with any union data inside the NodeModel_FreeMemory, using the provided NodeModelFreeMemory0
func (t *NodeModel_FreeMemory) MergeNodeModelFreeMemory0(v NodeModelFreeMemory0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelFreeMemory1 returns the union data inside the NodeModel_FreeMemory as a NodeModelFreeMemory1
func (t NodeModel_FreeMemory) AsNodeModelFreeMemory1() (NodeModelFreeMemory1, error) {
	var body NodeModelFreeMemory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFreeMemory1 overwrites any union data inside the NodeModel_FreeMemory as the provided NodeModelFreeMemory1
func (t *NodeModel_FreeMemory) FromNodeModelFreeMemory1(v NodeModelFreeMemory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFreeMemory1 performs a merge with any union data inside the NodeModel_FreeMemory, using the provided NodeModelFreeMemory1
func (t *NodeModel_FreeMemory) MergeNodeModelFreeMemory1(v NodeModelFreeMemory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_FreeMemory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_FreeMemory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelHostname0 returns the union data inside the NodeModel_Hostname as a NodeModelHostname0
func (t NodeModel_Hostname) AsNodeModelHostname0() (NodeModelHostname0, error) {
	var body NodeModelHostname0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelHostname0 overwrites any union data inside the NodeModel_Hostname as the provided NodeModelHostname0
func (t *NodeModel_Hostname) FromNodeModelHostname0(v NodeModelHostname0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelHostname0 performs a merge with any union data inside the NodeModel_Hostname, using the provided NodeModelHostname0
func (t *NodeModel_Hostname) MergeNodeModelHostname0(v NodeModelHostname0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelHostname1 returns the union data inside the NodeModel_Hostname as a NodeModelHostname1
func (t NodeModel_Hostname) AsNodeModelHostname1() (NodeModelHostname1, error) {
	var body NodeModelHostname1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelHostname1 overwrites any union data inside the NodeModel_Hostname as the provided NodeModelHostname1
func (t *NodeModel_Hostname) FromNodeModelHostname1(v NodeModelHostname1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelHostname1 performs a merge with any union data inside the NodeModel_Hostname, using the provided NodeModelHostname1
func (t *NodeModel_Hostname) MergeNodeModelHostname1(v NodeModelHostname1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Hostname) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Hostname) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelIdleCpus0 returns the union data inside the NodeModel_IdleCpus as a NodeModelIdleCpus0
func (t NodeModel_IdleCpus) AsNodeModelIdleCpus0() (NodeModelIdleCpus0, error) {
	var body NodeModelIdleCpus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelIdleCpus0 overwrites any union data inside the NodeModel_IdleCpus as the provided NodeModelIdleCpus0
func (t *NodeModel_IdleCpus) FromNodeModelIdleCpus0(v NodeModelIdleCpus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelIdleCpus0 performs a merge with any union data inside the NodeModel_IdleCpus, using the provided NodeModelIdleCpus0
func (t *NodeModel_IdleCpus) MergeNodeModelIdleCpus0(v NodeModelIdleCpus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelIdleCpus1 returns the union data inside the NodeModel_IdleCpus as a NodeModelIdleCpus1
func (t NodeModel_IdleCpus) AsNodeModelIdleCpus1() (NodeModelIdleCpus1, error) {
	var body NodeModelIdleCpus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelIdleCpus1 overwrites any union data inside the NodeModel_IdleCpus as the provided NodeModelIdleCpus1
func (t *NodeModel_IdleCpus) FromNodeModelIdleCpus1(v NodeModelIdleCpus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelIdleCpus1 performs a merge with any union data inside the NodeModel_IdleCpus, using the provided NodeModelIdleCpus1
func (t *NodeModel_IdleCpus) MergeNodeModelIdleCpus1(v NodeModelIdleCpus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_IdleCpus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_IdleCpus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelPartitions0 returns the union data inside the NodeModel_Partitions as a NodeModelPartitions0
func (t NodeModel_Partitions) AsNodeModelPartitions0() (NodeModelPartitions0, error) {
	var body NodeModelPartitions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelPartitions0 overwrites any union data inside the NodeModel_Partitions as the provided NodeModelPartitions0
func (t *NodeModel_Partitions) FromNodeModelPartitions0(v NodeModelPartitions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelPartitions0 performs a merge with any union data inside the NodeModel_Partitions, using the provided NodeModelPartitions0
func (t *NodeModel_Partitions) MergeNodeModelPartitions0(v NodeModelPartitions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelPartitions1 returns the union data inside the NodeModel_Partitions as a NodeModelPartitions1
func (t NodeModel_Partitions) AsNodeModelPartitions1() (NodeModelPartitions1, error) {
	var body NodeModelPartitions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelPartitions1 overwrites any union data inside the NodeModel_Partitions as the provided NodeModelPartitions1
func (t *NodeModel_Partitions) FromNodeModelPartitions1(v NodeModelPartitions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelPartitions1 performs a merge with any union data inside the NodeModel_Partitions, using the provided NodeModelPartitions1
func (t *NodeModel_Partitions) MergeNodeModelPartitions1(v NodeModelPartitions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Partitions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Partitions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelSockets0 returns the union data inside the NodeModel_Sockets as a NodeModelSockets0
func (t NodeModel_Sockets) AsNodeModelSockets0() (NodeModelSockets0, error) {
	var body NodeModelSockets0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelSockets0 overwrites any union data inside the NodeModel_Sockets as the provided NodeModelSockets0
func (t *NodeModel_Sockets) FromNodeModelSockets0(v NodeModelSockets0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelSockets0 performs a merge with any union data inside the NodeModel_Sockets, using the provided NodeModelSockets0
func (t *NodeModel_Sockets) MergeNodeModelSockets0(v NodeModelSockets0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelSockets1 returns the union data inside the NodeModel_Sockets as a NodeModelSockets1
func (t NodeModel_Sockets) AsNodeModelSockets1() (NodeModelSockets1, error) {
	var body NodeModelSockets1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelSockets1 overwrites any union data inside the NodeModel_Sockets as the provided NodeModelSockets1
func (t *NodeModel_Sockets) FromNodeModelSockets1(v NodeModelSockets1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelSockets1 performs a merge with any union data inside the NodeModel_Sockets, using the provided NodeModelSockets1
func (t *NodeModel_Sockets) MergeNodeModelSockets1(v NodeModelSockets1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Sockets) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Sockets) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelState0 returns the union data inside the NodeModel_State as a NodeModelState0
func (t NodeModel_State) AsNodeModelState0() (NodeModelState0, error) {
	var body NodeModelState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelState0 overwrites any union data inside the NodeModel_State as the provided NodeModelState0
func (t *NodeModel_State) FromNodeModelState0(v NodeModelState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelState0 performs a merge with any union data inside the NodeModel_State, using the provided NodeModelState0
func (t *NodeModel_State) MergeNodeModelState0(v NodeModelState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelState1 returns the union data inside the NodeModel_State as a NodeModelState1
func (t NodeModel_State) AsNodeModelState1() (NodeModelState1, error) {
	var body NodeModelState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelState1 overwrites any union data inside the NodeModel_State as the provided NodeModelState1
func (t *NodeModel_State) FromNodeModelState1(v NodeModelState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelState1 performs a merge with any union data inside the NodeModel_State, using the provided NodeModelState1
func (t *NodeModel_State) MergeNodeModelState1(v NodeModelState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelThreads0 returns the union data inside the NodeModel_Threads as a NodeModelThreads0
func (t NodeModel_Threads) AsNodeModelThreads0() (NodeModelThreads0, error) {
	var body NodeModelThreads0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelThreads0 overwrites any union data inside the NodeModel_Threads as the provided NodeModelThreads0
func (t *NodeModel_Threads) FromNodeModelThreads0(v NodeModelThreads0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelThreads0 performs a merge with any union data inside the NodeModel_Threads, using the provided NodeModelThreads0
func (t *NodeModel_Threads) MergeNodeModelThreads0(v NodeModelThreads0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelThreads1 returns the union data inside the NodeModel_Threads as a NodeModelThreads1
func (t NodeModel_Threads) AsNodeModelThreads1() (NodeModelThreads1, error) {
	var body NodeModelThreads1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelThreads1 overwrites any union data inside the NodeModel_Threads as the provided NodeModelThreads1
func (t *NodeModel_Threads) FromNodeModelThreads1(v NodeModelThreads1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelThreads1 performs a merge with any union data inside the NodeModel_Threads, using the provided NodeModelThreads1
func (t *NodeModel_Threads) MergeNodeModelThreads1(v NodeModelThreads1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Threads) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Threads) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelWeight0 returns the union data inside the NodeModel_Weight as a NodeModelWeight0
func (t NodeModel_Weight) AsNodeModelWeight0() (NodeModelWeight0, error) {
	var body NodeModelWeight0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelWeight0 overwrites any union data inside the NodeModel_Weight as the provided NodeModelWeight0
func (t *NodeModel_Weight) FromNodeModelWeight0(v NodeModelWeight0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelWeight0 performs a merge with any union data inside the NodeModel_Weight, using the provided NodeModelWeight0
func (t *NodeModel_Weight) MergeNodeModelWeight0(v NodeModelWeight0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelWeight1 returns the union data inside the NodeModel_Weight as a NodeModelWeight1
func (t NodeModel_Weight) AsNodeModelWeight1() (NodeModelWeight1, error) {
	var body NodeModelWeight1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelWeight1 overwrites any union data inside the NodeModel_Weight as the provided NodeModelWeight1
func (t *NodeModel_Weight) FromNodeModelWeight1(v NodeModelWeight1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelWeight1 performs a merge with any union data inside the NodeModel_Weight, using the provided NodeModelWeight1
func (t *NodeModel_Weight) MergeNodeModelWeight1(v NodeModelWeight1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Weight) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Weight) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPartitionModelCpus0 returns the union data inside the PartitionModel_Cpus as a PartitionModelCpus0
func (t PartitionModel_Cpus) AsPartitionModelCpus0() (PartitionModelCpus0, error) {
	var body PartitionModelCpus0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelCpus0 overwrites any union data inside the PartitionModel_Cpus as the provided PartitionModelCpus0
func (t *PartitionModel_Cpus) FromPartitionModelCpus0(v PartitionModelCpus0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelCpus0 performs a merge with any union data inside the PartitionModel_Cpus, using the provided PartitionModelCpus0
func (t *PartitionModel_Cpus) MergePartitionModelCpus0(v PartitionModelCpus0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartitionModelCpus1 returns the union data inside the PartitionModel_Cpus as a PartitionModelCpus1
func (t PartitionModel_Cpus) AsPartitionModelCpus1() (PartitionModelCpus1, error) {
	var body PartitionModelCpus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelCpus1 overwrites any union data inside the PartitionModel_Cpus as the provided PartitionModelCpus1
func (t *PartitionModel_Cpus) FromPartitionModelCpus1(v PartitionModelCpus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelCpus1 performs a merge with any union data inside the PartitionModel_Cpus, using the provided PartitionModelCpus1
func (t *PartitionModel_Cpus) MergePartitionModelCpus1(v PartitionModelCpus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartitionModel_Cpus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PartitionModel_Cpus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPartitionModelPartition0 returns the union data inside the PartitionModel_Partition as a PartitionModelPartition0
func (t PartitionModel_Partition) AsPartitionModelPartition0() (PartitionModelPartition0, error) {
	var body PartitionModelPartition0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelPartition0 overwrites any union data inside the PartitionModel_Partition as the provided PartitionModelPartition0
func (t *PartitionModel_Partition) FromPartitionModelPartition0(v PartitionModelPartition0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelPartition0 performs a merge with any union data inside the PartitionModel_Partition, using the provided PartitionModelPartition0
func (t *PartitionModel_Partition) MergePartitionModelPartition0(v PartitionModelPartition0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartitionModelPartition1 returns the union data inside the PartitionModel_Partition as a PartitionModelPartition1
func (t PartitionModel_Partition) AsPartitionModelPartition1() (PartitionModelPartition1, error) {
	var body PartitionModelPartition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelPartition1 overwrites any union data inside the PartitionModel_Partition as the provided PartitionModelPartition1
func (t *PartitionModel_Partition) FromPartitionModelPartition1(v PartitionModelPartition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelPartition1 performs a merge with any union data inside the PartitionModel_Partition, using the provided PartitionModelPartition1
func (t *PartitionModel_Partition) MergePartitionModelPartition1(v PartitionModelPartition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartitionModel_Partition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PartitionModel_Partition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPartitionModelTotalNodes0 returns the union data inside the PartitionModel_TotalNodes as a PartitionModelTotalNodes0
func (t PartitionModel_TotalNodes) AsPartitionModelTotalNodes0() (PartitionModelTotalNodes0, error) {
	var body PartitionModelTotalNodes0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelTotalNodes0 overwrites any union data inside the PartitionModel_TotalNodes as the provided PartitionModelTotalNodes0
func (t *PartitionModel_TotalNodes) FromPartitionModelTotalNodes0(v PartitionModelTotalNodes0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelTotalNodes0 performs a merge with any union data inside the PartitionModel_TotalNodes, using the provided PartitionModelTotalNodes0
func (t *PartitionModel_TotalNodes) MergePartitionModelTotalNodes0(v PartitionModelTotalNodes0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartitionModelTotalNodes1 returns the union data inside the PartitionModel_TotalNodes as a PartitionModelTotalNodes1
func (t PartitionModel_TotalNodes) AsPartitionModelTotalNodes1() (PartitionModelTotalNodes1, error) {
	var body PartitionModelTotalNodes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelTotalNodes1 overwrites any union data inside the PartitionModel_TotalNodes as the provided PartitionModelTotalNodes1
func (t *PartitionModel_TotalNodes) FromPartitionModelTotalNodes1(v PartitionModelTotalNodes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelTotalNodes1 performs a merge with any union data inside the PartitionModel_TotalNodes, using the provided PartitionModelTotalNodes1
func (t *PartitionModel_TotalNodes) MergePartitionModelTotalNodes1(v PartitionModelTotalNodes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartitionModel_TotalNodes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PartitionModel_TotalNodes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostCompressRequestDereference0 returns the union data inside the PostCompressRequest_Dereference as a PostCompressRequestDereference0
func (t PostCompressRequest_Dereference) AsPostCompressRequestDereference0() (PostCompressRequestDereference0, error) {
	var body PostCompressRequestDereference0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostCompressRequestDereference0 overwrites any union data inside the PostCompressRequest_Dereference as the provided PostCompressRequestDereference0
func (t *PostCompressRequest_Dereference) FromPostCompressRequestDereference0(v PostCompressRequestDereference0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostCompressRequestDereference0 performs a merge with any union data inside the PostCompressRequest_Dereference, using the provided PostCompressRequestDereference0
func (t *PostCompressRequest_Dereference) MergePostCompressRequestDereference0(v PostCompressRequestDereference0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostCompressRequestDereference1 returns the union data inside the PostCompressRequest_Dereference as a PostCompressRequestDereference1
func (t PostCompressRequest_Dereference) AsPostCompressRequestDereference1() (PostCompressRequestDereference1, error) {
	var body PostCompressRequestDereference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostCompressRequestDereference1 overwrites any union data inside the PostCompressRequest_Dereference as the provided PostCompressRequestDereference1
func (t *PostCompressRequest_Dereference) FromPostCompressRequestDereference1(v PostCompressRequestDereference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostCompressRequestDereference1 performs a merge with any union data inside the PostCompressRequest_Dereference, using the provided PostCompressRequestDereference1
func (t *PostCompressRequest_Dereference) MergePostCompressRequestDereference1(v PostCompressRequestDereference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostCompressRequest_Dereference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostCompressRequest_Dereference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostCompressRequestMatchPattern0 returns the union data inside the PostCompressRequest_MatchPattern as a PostCompressRequestMatchPattern0
func (t PostCompressRequest_MatchPattern) AsPostCompressRequestMatchPattern0() (PostCompressRequestMatchPattern0, error) {
	var body PostCompressRequestMatchPattern0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostCompressRequestMatchPattern0 overwrites any union data inside the PostCompressRequest_MatchPattern as the provided PostCompressRequestMatchPattern0
func (t *PostCompressRequest_MatchPattern) FromPostCompressRequestMatchPattern0(v PostCompressRequestMatchPattern0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostCompressRequestMatchPattern0 performs a merge with any union data inside the PostCompressRequest_MatchPattern, using the provided PostCompressRequestMatchPattern0
func (t *PostCompressRequest_MatchPattern) MergePostCompressRequestMatchPattern0(v PostCompressRequestMatchPattern0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostCompressRequestMatchPattern1 returns the union data inside the PostCompressRequest_MatchPattern as a PostCompressRequestMatchPattern1
func (t PostCompressRequest_MatchPattern) AsPostCompressRequestMatchPattern1() (PostCompressRequestMatchPattern1, error) {
	var body PostCompressRequestMatchPattern1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostCompressRequestMatchPattern1 overwrites any union data inside the PostCompressRequest_MatchPattern as the provided PostCompressRequestMatchPattern1
func (t *PostCompressRequest_MatchPattern) FromPostCompressRequestMatchPattern1(v PostCompressRequestMatchPattern1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostCompressRequestMatchPattern1 performs a merge with any union data inside the PostCompressRequest_MatchPattern, using the provided PostCompressRequestMatchPattern1
func (t *PostCompressRequest_MatchPattern) MergePostCompressRequestMatchPattern1(v PostCompressRequestMatchPattern1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostCompressRequest_MatchPattern) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostCompressRequest_MatchPattern) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostCompressRequestSourcePath0 returns the union data inside the PostCompressRequest_SourcePath as a PostCompressRequestSourcePath0
func (t PostCompressRequest_SourcePath) AsPostCompressRequestSourcePath0() (PostCompressRequestSourcePath0, error) {
	var body PostCompressRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostCompressRequestSourcePath0 overwrites any union data inside the PostCompressRequest_SourcePath as the provided PostCompressRequestSourcePath0
func (t *PostCompressRequest_SourcePath) FromPostCompressRequestSourcePath0(v PostCompressRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostCompressRequestSourcePath0 performs a merge with any union data inside the PostCompressRequest_SourcePath, using the provided PostCompressRequestSourcePath0
func (t *PostCompressRequest_SourcePath) MergePostCompressRequestSourcePath0(v PostCompressRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostCompressRequestSourcePath1 returns the union data inside the PostCompressRequest_SourcePath as a PostCompressRequestSourcePath1
func (t PostCompressRequest_SourcePath) AsPostCompressRequestSourcePath1() (PostCompressRequestSourcePath1, error) {
	var body PostCompressRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostCompressRequestSourcePath1 overwrites any union data inside the PostCompressRequest_SourcePath as the provided PostCompressRequestSourcePath1
func (t *PostCompressRequest_SourcePath) FromPostCompressRequestSourcePath1(v PostCompressRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostCompressRequestSourcePath1 performs a merge with any union data inside the PostCompressRequest_SourcePath, using the provided PostCompressRequestSourcePath1
func (t *PostCompressRequest_SourcePath) MergePostCompressRequestSourcePath1(v PostCompressRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostCompressRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostCompressRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostExtractRequestSourcePath0 returns the union data inside the PostExtractRequest_SourcePath as a PostExtractRequestSourcePath0
func (t PostExtractRequest_SourcePath) AsPostExtractRequestSourcePath0() (PostExtractRequestSourcePath0, error) {
	var body PostExtractRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostExtractRequestSourcePath0 overwrites any union data inside the PostExtractRequest_SourcePath as the provided PostExtractRequestSourcePath0
func (t *PostExtractRequest_SourcePath) FromPostExtractRequestSourcePath0(v PostExtractRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostExtractRequestSourcePath0 performs a merge with any union data inside the PostExtractRequest_SourcePath, using the provided PostExtractRequestSourcePath0
func (t *PostExtractRequest_SourcePath) MergePostExtractRequestSourcePath0(v PostExtractRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostExtractRequestSourcePath1 returns the union data inside the PostExtractRequest_SourcePath as a PostExtractRequestSourcePath1
func (t PostExtractRequest_SourcePath) AsPostExtractRequestSourcePath1() (PostExtractRequestSourcePath1, error) {
	var body PostExtractRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostExtractRequestSourcePath1 overwrites any union data inside the PostExtractRequest_SourcePath as the provided PostExtractRequestSourcePath1
func (t *PostExtractRequest_SourcePath) FromPostExtractRequestSourcePath1(v PostExtractRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostExtractRequestSourcePath1 performs a merge with any union data inside the PostExtractRequest_SourcePath, using the provided PostExtractRequestSourcePath1
func (t *PostExtractRequest_SourcePath) MergePostExtractRequestSourcePath1(v PostExtractRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostExtractRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostExtractRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostFileDownloadRequestAccount0 returns the union data inside the PostFileDownloadRequest_Account as a PostFileDownloadRequestAccount0
func (t PostFileDownloadRequest_Account) AsPostFileDownloadRequestAccount0() (PostFileDownloadRequestAccount0, error) {
	var body PostFileDownloadRequestAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileDownloadRequestAccount0 overwrites any union data inside the PostFileDownloadRequest_Account as the provided PostFileDownloadRequestAccount0
func (t *PostFileDownloadRequest_Account) FromPostFileDownloadRequestAccount0(v PostFileDownloadRequestAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileDownloadRequestAccount0 performs a merge with any union data inside the PostFileDownloadRequest_Account, using the provided PostFileDownloadRequestAccount0
func (t *PostFileDownloadRequest_Account) MergePostFileDownloadRequestAccount0(v PostFileDownloadRequestAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostFileDownloadRequestAccount1 returns the union data inside the PostFileDownloadRequest_Account as a PostFileDownloadRequestAccount1
func (t PostFileDownloadRequest_Account) AsPostFileDownloadRequestAccount1() (PostFileDownloadRequestAccount1, error) {
	var body PostFileDownloadRequestAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileDownloadRequestAccount1 overwrites any union data inside the PostFileDownloadRequest_Account as the provided PostFileDownloadRequestAccount1
func (t *PostFileDownloadRequest_Account) FromPostFileDownloadRequestAccount1(v PostFileDownloadRequestAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileDownloadRequestAccount1 performs a merge with any union data inside the PostFileDownloadRequest_Account, using the provided PostFileDownloadRequestAccount1
func (t *PostFileDownloadRequest_Account) MergePostFileDownloadRequestAccount1(v PostFileDownloadRequestAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostFileDownloadRequest_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostFileDownloadRequest_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostFileDownloadRequestSourcePath0 returns the union data inside the PostFileDownloadRequest_SourcePath as a PostFileDownloadRequestSourcePath0
func (t PostFileDownloadRequest_SourcePath) AsPostFileDownloadRequestSourcePath0() (PostFileDownloadRequestSourcePath0, error) {
	var body PostFileDownloadRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileDownloadRequestSourcePath0 overwrites any union data inside the PostFileDownloadRequest_SourcePath as the provided PostFileDownloadRequestSourcePath0
func (t *PostFileDownloadRequest_SourcePath) FromPostFileDownloadRequestSourcePath0(v PostFileDownloadRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileDownloadRequestSourcePath0 performs a merge with any union data inside the PostFileDownloadRequest_SourcePath, using the provided PostFileDownloadRequestSourcePath0
func (t *PostFileDownloadRequest_SourcePath) MergePostFileDownloadRequestSourcePath0(v PostFileDownloadRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostFileDownloadRequestSourcePath1 returns the union data inside the PostFileDownloadRequest_SourcePath as a PostFileDownloadRequestSourcePath1
func (t PostFileDownloadRequest_SourcePath) AsPostFileDownloadRequestSourcePath1() (PostFileDownloadRequestSourcePath1, error) {
	var body PostFileDownloadRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileDownloadRequestSourcePath1 overwrites any union data inside the PostFileDownloadRequest_SourcePath as the provided PostFileDownloadRequestSourcePath1
func (t *PostFileDownloadRequest_SourcePath) FromPostFileDownloadRequestSourcePath1(v PostFileDownloadRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileDownloadRequestSourcePath1 performs a merge with any union data inside the PostFileDownloadRequest_SourcePath, using the provided PostFileDownloadRequestSourcePath1
func (t *PostFileDownloadRequest_SourcePath) MergePostFileDownloadRequestSourcePath1(v PostFileDownloadRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostFileDownloadRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostFileDownloadRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostFileSymlinkRequestSourcePath0 returns the union data inside the PostFileSymlinkRequest_SourcePath as a PostFileSymlinkRequestSourcePath0
func (t PostFileSymlinkRequest_SourcePath) AsPostFileSymlinkRequestSourcePath0() (PostFileSymlinkRequestSourcePath0, error) {
	var body PostFileSymlinkRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileSymlinkRequestSourcePath0 overwrites any union data inside the PostFileSymlinkRequest_SourcePath as the provided PostFileSymlinkRequestSourcePath0
func (t *PostFileSymlinkRequest_SourcePath) FromPostFileSymlinkRequestSourcePath0(v PostFileSymlinkRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileSymlinkRequestSourcePath0 performs a merge with any union data inside the PostFileSymlinkRequest_SourcePath, using the provided PostFileSymlinkRequestSourcePath0
func (t *PostFileSymlinkRequest_SourcePath) MergePostFileSymlinkRequestSourcePath0(v PostFileSymlinkRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostFileSymlinkRequestSourcePath1 returns the union data inside the PostFileSymlinkRequest_SourcePath as a PostFileSymlinkRequestSourcePath1
func (t PostFileSymlinkRequest_SourcePath) AsPostFileSymlinkRequestSourcePath1() (PostFileSymlinkRequestSourcePath1, error) {
	var body PostFileSymlinkRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileSymlinkRequestSourcePath1 overwrites any union data inside the PostFileSymlinkRequest_SourcePath as the provided PostFileSymlinkRequestSourcePath1
func (t *PostFileSymlinkRequest_SourcePath) FromPostFileSymlinkRequestSourcePath1(v PostFileSymlinkRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileSymlinkRequestSourcePath1 performs a merge with any union data inside the PostFileSymlinkRequest_SourcePath, using the provided PostFileSymlinkRequestSourcePath1
func (t *PostFileSymlinkRequest_SourcePath) MergePostFileSymlinkRequestSourcePath1(v PostFileSymlinkRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostFileSymlinkRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostFileSymlinkRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFile returns the union data inside the PostFileSymlinkResponse_Output as a File
func (t PostFileSymlinkResponse_Output) AsFile() (File, error) {
	var body File
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFile overwrites any union data inside the PostFileSymlinkResponse_Output as the provided File
func (t *PostFileSymlinkResponse_Output) FromFile(v File) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFile performs a merge with any union data inside the PostFileSymlinkResponse_Output, using the provided File
func (t *PostFileSymlinkResponse_Output) MergeFile(v File) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostFileSymlinkResponseOutput1 returns the union data inside the PostFileSymlinkResponse_Output as a PostFileSymlinkResponseOutput1
func (t PostFileSymlinkResponse_Output) AsPostFileSymlinkResponseOutput1() (PostFileSymlinkResponseOutput1, error) {
	var body PostFileSymlinkResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileSymlinkResponseOutput1 overwrites any union data inside the PostFileSymlinkResponse_Output as the provided PostFileSymlinkResponseOutput1
func (t *PostFileSymlinkResponse_Output) FromPostFileSymlinkResponseOutput1(v PostFileSymlinkResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileSymlinkResponseOutput1 performs a merge with any union data inside the PostFileSymlinkResponse_Output, using the provided PostFileSymlinkResponseOutput1
func (t *PostFileSymlinkResponse_Output) MergePostFileSymlinkResponseOutput1(v PostFileSymlinkResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostFileSymlinkResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostFileSymlinkResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostFileUploadRequestAccount0 returns the union data inside the PostFileUploadRequest_Account as a PostFileUploadRequestAccount0
func (t PostFileUploadRequest_Account) AsPostFileUploadRequestAccount0() (PostFileUploadRequestAccount0, error) {
	var body PostFileUploadRequestAccount0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileUploadRequestAccount0 overwrites any union data inside the PostFileUploadRequest_Account as the provided PostFileUploadRequestAccount0
func (t *PostFileUploadRequest_Account) FromPostFileUploadRequestAccount0(v PostFileUploadRequestAccount0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileUploadRequestAccount0 performs a merge with any union data inside the PostFileUploadRequest_Account, using the provided PostFileUploadRequestAccount0
func (t *PostFileUploadRequest_Account) MergePostFileUploadRequestAccount0(v PostFileUploadRequestAccount0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostFileUploadRequestAccount1 returns the union data inside the PostFileUploadRequest_Account as a PostFileUploadRequestAccount1
func (t PostFileUploadRequest_Account) AsPostFileUploadRequestAccount1() (PostFileUploadRequestAccount1, error) {
	var body PostFileUploadRequestAccount1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileUploadRequestAccount1 overwrites any union data inside the PostFileUploadRequest_Account as the provided PostFileUploadRequestAccount1
func (t *PostFileUploadRequest_Account) FromPostFileUploadRequestAccount1(v PostFileUploadRequestAccount1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileUploadRequestAccount1 performs a merge with any union data inside the PostFileUploadRequest_Account, using the provided PostFileUploadRequestAccount1
func (t *PostFileUploadRequest_Account) MergePostFileUploadRequestAccount1(v PostFileUploadRequestAccount1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostFileUploadRequest_Account) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostFileUploadRequest_Account) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostFileUploadRequestSourcePath0 returns the union data inside the PostFileUploadRequest_SourcePath as a PostFileUploadRequestSourcePath0
func (t PostFileUploadRequest_SourcePath) AsPostFileUploadRequestSourcePath0() (PostFileUploadRequestSourcePath0, error) {
	var body PostFileUploadRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileUploadRequestSourcePath0 overwrites any union data inside the PostFileUploadRequest_SourcePath as the provided PostFileUploadRequestSourcePath0
func (t *PostFileUploadRequest_SourcePath) FromPostFileUploadRequestSourcePath0(v PostFileUploadRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileUploadRequestSourcePath0 performs a merge with any union data inside the PostFileUploadRequest_SourcePath, using the provided PostFileUploadRequestSourcePath0
func (t *PostFileUploadRequest_SourcePath) MergePostFileUploadRequestSourcePath0(v PostFileUploadRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostFileUploadRequestSourcePath1 returns the union data inside the PostFileUploadRequest_SourcePath as a PostFileUploadRequestSourcePath1
func (t PostFileUploadRequest_SourcePath) AsPostFileUploadRequestSourcePath1() (PostFileUploadRequestSourcePath1, error) {
	var body PostFileUploadRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostFileUploadRequestSourcePath1 overwrites any union data inside the PostFileUploadRequest_SourcePath as the provided PostFileUploadRequestSourcePath1
func (t *PostFileUploadRequest_SourcePath) FromPostFileUploadRequestSourcePath1(v PostFileUploadRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostFileUploadRequestSourcePath1 performs a merge with any union data inside the PostFileUploadRequest_SourcePath, using the provided PostFileUploadRequestSourcePath1
func (t *PostFileUploadRequest_SourcePath) MergePostFileUploadRequestSourcePath1(v PostFileUploadRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostFileUploadRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostFileUploadRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostJobSubmissionResponseJobId0 returns the union data inside the PostJobSubmissionResponse_JobId as a PostJobSubmissionResponseJobId0
func (t PostJobSubmissionResponse_JobId) AsPostJobSubmissionResponseJobId0() (PostJobSubmissionResponseJobId0, error) {
	var body PostJobSubmissionResponseJobId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostJobSubmissionResponseJobId0 overwrites any union data inside the PostJobSubmissionResponse_JobId as the provided PostJobSubmissionResponseJobId0
func (t *PostJobSubmissionResponse_JobId) FromPostJobSubmissionResponseJobId0(v PostJobSubmissionResponseJobId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostJobSubmissionResponseJobId0 performs a merge with any union data inside the PostJobSubmissionResponse_JobId, using the provided PostJobSubmissionResponseJobId0
func (t *PostJobSubmissionResponse_JobId) MergePostJobSubmissionResponseJobId0(v PostJobSubmissionResponseJobId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostJobSubmissionResponseJobId1 returns the union data inside the PostJobSubmissionResponse_JobId as a PostJobSubmissionResponseJobId1
func (t PostJobSubmissionResponse_JobId) AsPostJobSubmissionResponseJobId1() (PostJobSubmissionResponseJobId1, error) {
	var body PostJobSubmissionResponseJobId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostJobSubmissionResponseJobId1 overwrites any union data inside the PostJobSubmissionResponse_JobId as the provided PostJobSubmissionResponseJobId1
func (t *PostJobSubmissionResponse_JobId) FromPostJobSubmissionResponseJobId1(v PostJobSubmissionResponseJobId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostJobSubmissionResponseJobId1 performs a merge with any union data inside the PostJobSubmissionResponse_JobId, using the provided PostJobSubmissionResponseJobId1
func (t *PostJobSubmissionResponse_JobId) MergePostJobSubmissionResponseJobId1(v PostJobSubmissionResponseJobId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostJobSubmissionResponse_JobId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostJobSubmissionResponse_JobId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostMakeDirRequestParent0 returns the union data inside the PostMakeDirRequest_Parent as a PostMakeDirRequestParent0
func (t PostMakeDirRequest_Parent) AsPostMakeDirRequestParent0() (PostMakeDirRequestParent0, error) {
	var body PostMakeDirRequestParent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostMakeDirRequestParent0 overwrites any union data inside the PostMakeDirRequest_Parent as the provided PostMakeDirRequestParent0
func (t *PostMakeDirRequest_Parent) FromPostMakeDirRequestParent0(v PostMakeDirRequestParent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostMakeDirRequestParent0 performs a merge with any union data inside the PostMakeDirRequest_Parent, using the provided PostMakeDirRequestParent0
func (t *PostMakeDirRequest_Parent) MergePostMakeDirRequestParent0(v PostMakeDirRequestParent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostMakeDirRequestParent1 returns the union data inside the PostMakeDirRequest_Parent as a PostMakeDirRequestParent1
func (t PostMakeDirRequest_Parent) AsPostMakeDirRequestParent1() (PostMakeDirRequestParent1, error) {
	var body PostMakeDirRequestParent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostMakeDirRequestParent1 overwrites any union data inside the PostMakeDirRequest_Parent as the provided PostMakeDirRequestParent1
func (t *PostMakeDirRequest_Parent) FromPostMakeDirRequestParent1(v PostMakeDirRequestParent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostMakeDirRequestParent1 performs a merge with any union data inside the PostMakeDirRequest_Parent, using the provided PostMakeDirRequestParent1
func (t *PostMakeDirRequest_Parent) MergePostMakeDirRequestParent1(v PostMakeDirRequestParent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostMakeDirRequest_Parent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostMakeDirRequest_Parent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPostMakeDirRequestSourcePath0 returns the union data inside the PostMakeDirRequest_SourcePath as a PostMakeDirRequestSourcePath0
func (t PostMakeDirRequest_SourcePath) AsPostMakeDirRequestSourcePath0() (PostMakeDirRequestSourcePath0, error) {
	var body PostMakeDirRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostMakeDirRequestSourcePath0 overwrites any union data inside the PostMakeDirRequest_SourcePath as the provided PostMakeDirRequestSourcePath0
func (t *PostMakeDirRequest_SourcePath) FromPostMakeDirRequestSourcePath0(v PostMakeDirRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostMakeDirRequestSourcePath0 performs a merge with any union data inside the PostMakeDirRequest_SourcePath, using the provided PostMakeDirRequestSourcePath0
func (t *PostMakeDirRequest_SourcePath) MergePostMakeDirRequestSourcePath0(v PostMakeDirRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostMakeDirRequestSourcePath1 returns the union data inside the PostMakeDirRequest_SourcePath as a PostMakeDirRequestSourcePath1
func (t PostMakeDirRequest_SourcePath) AsPostMakeDirRequestSourcePath1() (PostMakeDirRequestSourcePath1, error) {
	var body PostMakeDirRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostMakeDirRequestSourcePath1 overwrites any union data inside the PostMakeDirRequest_SourcePath as the provided PostMakeDirRequestSourcePath1
func (t *PostMakeDirRequest_SourcePath) FromPostMakeDirRequestSourcePath1(v PostMakeDirRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostMakeDirRequestSourcePath1 performs a merge with any union data inside the PostMakeDirRequest_SourcePath, using the provided PostMakeDirRequestSourcePath1
func (t *PostMakeDirRequest_SourcePath) MergePostMakeDirRequestSourcePath1(v PostMakeDirRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostMakeDirRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostMakeDirRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFile returns the union data inside the PostMkdirResponse_Output as a File
func (t PostMkdirResponse_Output) AsFile() (File, error) {
	var body File
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFile overwrites any union data inside the PostMkdirResponse_Output as the provided File
func (t *PostMkdirResponse_Output) FromFile(v File) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFile performs a merge with any union data inside the PostMkdirResponse_Output, using the provided File
func (t *PostMkdirResponse_Output) MergeFile(v File) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPostMkdirResponseOutput1 returns the union data inside the PostMkdirResponse_Output as a PostMkdirResponseOutput1
func (t PostMkdirResponse_Output) AsPostMkdirResponseOutput1() (PostMkdirResponseOutput1, error) {
	var body PostMkdirResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPostMkdirResponseOutput1 overwrites any union data inside the PostMkdirResponse_Output as the provided PostMkdirResponseOutput1
func (t *PostMkdirResponse_Output) FromPostMkdirResponseOutput1(v PostMkdirResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePostMkdirResponseOutput1 performs a merge with any union data inside the PostMkdirResponse_Output, using the provided PostMkdirResponseOutput1
func (t *PostMkdirResponse_Output) MergePostMkdirResponseOutput1(v PostMkdirResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PostMkdirResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PostMkdirResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPutFileChmodRequestSourcePath0 returns the union data inside the PutFileChmodRequest_SourcePath as a PutFileChmodRequestSourcePath0
func (t PutFileChmodRequest_SourcePath) AsPutFileChmodRequestSourcePath0() (PutFileChmodRequestSourcePath0, error) {
	var body PutFileChmodRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChmodRequestSourcePath0 overwrites any union data inside the PutFileChmodRequest_SourcePath as the provided PutFileChmodRequestSourcePath0
func (t *PutFileChmodRequest_SourcePath) FromPutFileChmodRequestSourcePath0(v PutFileChmodRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChmodRequestSourcePath0 performs a merge with any union data inside the PutFileChmodRequest_SourcePath, using the provided PutFileChmodRequestSourcePath0
func (t *PutFileChmodRequest_SourcePath) MergePutFileChmodRequestSourcePath0(v PutFileChmodRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPutFileChmodRequestSourcePath1 returns the union data inside the PutFileChmodRequest_SourcePath as a PutFileChmodRequestSourcePath1
func (t PutFileChmodRequest_SourcePath) AsPutFileChmodRequestSourcePath1() (PutFileChmodRequestSourcePath1, error) {
	var body PutFileChmodRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChmodRequestSourcePath1 overwrites any union data inside the PutFileChmodRequest_SourcePath as the provided PutFileChmodRequestSourcePath1
func (t *PutFileChmodRequest_SourcePath) FromPutFileChmodRequestSourcePath1(v PutFileChmodRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChmodRequestSourcePath1 performs a merge with any union data inside the PutFileChmodRequest_SourcePath, using the provided PutFileChmodRequestSourcePath1
func (t *PutFileChmodRequest_SourcePath) MergePutFileChmodRequestSourcePath1(v PutFileChmodRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PutFileChmodRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PutFileChmodRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFile returns the union data inside the PutFileChmodResponse_Output as a File
func (t PutFileChmodResponse_Output) AsFile() (File, error) {
	var body File
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFile overwrites any union data inside the PutFileChmodResponse_Output as the provided File
func (t *PutFileChmodResponse_Output) FromFile(v File) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFile performs a merge with any union data inside the PutFileChmodResponse_Output, using the provided File
func (t *PutFileChmodResponse_Output) MergeFile(v File) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPutFileChmodResponseOutput1 returns the union data inside the PutFileChmodResponse_Output as a PutFileChmodResponseOutput1
func (t PutFileChmodResponse_Output) AsPutFileChmodResponseOutput1() (PutFileChmodResponseOutput1, error) {
	var body PutFileChmodResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChmodResponseOutput1 overwrites any union data inside the PutFileChmodResponse_Output as the provided PutFileChmodResponseOutput1
func (t *PutFileChmodResponse_Output) FromPutFileChmodResponseOutput1(v PutFileChmodResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChmodResponseOutput1 performs a merge with any union data inside the PutFileChmodResponse_Output, using the provided PutFileChmodResponseOutput1
func (t *PutFileChmodResponse_Output) MergePutFileChmodResponseOutput1(v PutFileChmodResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PutFileChmodResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PutFileChmodResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPutFileChownRequestGroup0 returns the union data inside the PutFileChownRequest_Group as a PutFileChownRequestGroup0
func (t PutFileChownRequest_Group) AsPutFileChownRequestGroup0() (PutFileChownRequestGroup0, error) {
	var body PutFileChownRequestGroup0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownRequestGroup0 overwrites any union data inside the PutFileChownRequest_Group as the provided PutFileChownRequestGroup0
func (t *PutFileChownRequest_Group) FromPutFileChownRequestGroup0(v PutFileChownRequestGroup0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownRequestGroup0 performs a merge with any union data inside the PutFileChownRequest_Group, using the provided PutFileChownRequestGroup0
func (t *PutFileChownRequest_Group) MergePutFileChownRequestGroup0(v PutFileChownRequestGroup0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPutFileChownRequestGroup1 returns the union data inside the PutFileChownRequest_Group as a PutFileChownRequestGroup1
func (t PutFileChownRequest_Group) AsPutFileChownRequestGroup1() (PutFileChownRequestGroup1, error) {
	var body PutFileChownRequestGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownRequestGroup1 overwrites any union data inside the PutFileChownRequest_Group as the provided PutFileChownRequestGroup1
func (t *PutFileChownRequest_Group) FromPutFileChownRequestGroup1(v PutFileChownRequestGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownRequestGroup1 performs a merge with any union data inside the PutFileChownRequest_Group, using the provided PutFileChownRequestGroup1
func (t *PutFileChownRequest_Group) MergePutFileChownRequestGroup1(v PutFileChownRequestGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PutFileChownRequest_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PutFileChownRequest_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPutFileChownRequestOwner0 returns the union data inside the PutFileChownRequest_Owner as a PutFileChownRequestOwner0
func (t PutFileChownRequest_Owner) AsPutFileChownRequestOwner0() (PutFileChownRequestOwner0, error) {
	var body PutFileChownRequestOwner0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownRequestOwner0 overwrites any union data inside the PutFileChownRequest_Owner as the provided PutFileChownRequestOwner0
func (t *PutFileChownRequest_Owner) FromPutFileChownRequestOwner0(v PutFileChownRequestOwner0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownRequestOwner0 performs a merge with any union data inside the PutFileChownRequest_Owner, using the provided PutFileChownRequestOwner0
func (t *PutFileChownRequest_Owner) MergePutFileChownRequestOwner0(v PutFileChownRequestOwner0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPutFileChownRequestOwner1 returns the union data inside the PutFileChownRequest_Owner as a PutFileChownRequestOwner1
func (t PutFileChownRequest_Owner) AsPutFileChownRequestOwner1() (PutFileChownRequestOwner1, error) {
	var body PutFileChownRequestOwner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownRequestOwner1 overwrites any union data inside the PutFileChownRequest_Owner as the provided PutFileChownRequestOwner1
func (t *PutFileChownRequest_Owner) FromPutFileChownRequestOwner1(v PutFileChownRequestOwner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownRequestOwner1 performs a merge with any union data inside the PutFileChownRequest_Owner, using the provided PutFileChownRequestOwner1
func (t *PutFileChownRequest_Owner) MergePutFileChownRequestOwner1(v PutFileChownRequestOwner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PutFileChownRequest_Owner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PutFileChownRequest_Owner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPutFileChownRequestSourcePath0 returns the union data inside the PutFileChownRequest_SourcePath as a PutFileChownRequestSourcePath0
func (t PutFileChownRequest_SourcePath) AsPutFileChownRequestSourcePath0() (PutFileChownRequestSourcePath0, error) {
	var body PutFileChownRequestSourcePath0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownRequestSourcePath0 overwrites any union data inside the PutFileChownRequest_SourcePath as the provided PutFileChownRequestSourcePath0
func (t *PutFileChownRequest_SourcePath) FromPutFileChownRequestSourcePath0(v PutFileChownRequestSourcePath0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownRequestSourcePath0 performs a merge with any union data inside the PutFileChownRequest_SourcePath, using the provided PutFileChownRequestSourcePath0
func (t *PutFileChownRequest_SourcePath) MergePutFileChownRequestSourcePath0(v PutFileChownRequestSourcePath0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPutFileChownRequestSourcePath1 returns the union data inside the PutFileChownRequest_SourcePath as a PutFileChownRequestSourcePath1
func (t PutFileChownRequest_SourcePath) AsPutFileChownRequestSourcePath1() (PutFileChownRequestSourcePath1, error) {
	var body PutFileChownRequestSourcePath1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownRequestSourcePath1 overwrites any union data inside the PutFileChownRequest_SourcePath as the provided PutFileChownRequestSourcePath1
func (t *PutFileChownRequest_SourcePath) FromPutFileChownRequestSourcePath1(v PutFileChownRequestSourcePath1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownRequestSourcePath1 performs a merge with any union data inside the PutFileChownRequest_SourcePath, using the provided PutFileChownRequestSourcePath1
func (t *PutFileChownRequest_SourcePath) MergePutFileChownRequestSourcePath1(v PutFileChownRequestSourcePath1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PutFileChownRequest_SourcePath) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PutFileChownRequest_SourcePath) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFile returns the union data inside the PutFileChownResponse_Output as a File
func (t PutFileChownResponse_Output) AsFile() (File, error) {
	var body File
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFile overwrites any union data inside the PutFileChownResponse_Output as the provided File
func (t *PutFileChownResponse_Output) FromFile(v File) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFile performs a merge with any union data inside the PutFileChownResponse_Output, using the provided File
func (t *PutFileChownResponse_Output) MergeFile(v File) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPutFileChownResponseOutput1 returns the union data inside the PutFileChownResponse_Output as a PutFileChownResponseOutput1
func (t PutFileChownResponse_Output) AsPutFileChownResponseOutput1() (PutFileChownResponseOutput1, error) {
	var body PutFileChownResponseOutput1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPutFileChownResponseOutput1 overwrites any union data inside the PutFileChownResponse_Output as the provided PutFileChownResponseOutput1
func (t *PutFileChownResponse_Output) FromPutFileChownResponseOutput1(v PutFileChownResponseOutput1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePutFileChownResponseOutput1 performs a merge with any union data inside the PutFileChownResponse_Output, using the provided PutFileChownResponseOutput1
func (t *PutFileChownResponse_Output) MergePutFileChownResponseOutput1(v PutFileChownResponseOutput1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PutFileChownResponse_Output) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PutFileChownResponse_Output) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReservationModelFeatures0 returns the union data inside the ReservationModel_Features as a ReservationModelFeatures0
func (t ReservationModel_Features) AsReservationModelFeatures0() (ReservationModelFeatures0, error) {
	var body ReservationModelFeatures0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReservationModelFeatures0 overwrites any union data inside the ReservationModel_Features as the provided ReservationModelFeatures0
func (t *ReservationModel_Features) FromReservationModelFeatures0(v ReservationModelFeatures0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReservationModelFeatures0 performs a merge with any union data inside the ReservationModel_Features, using the provided ReservationModelFeatures0
func (t *ReservationModel_Features) MergeReservationModelFeatures0(v ReservationModelFeatures0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReservationModelFeatures1 returns the union data inside the ReservationModel_Features as a ReservationModelFeatures1
func (t ReservationModel_Features) AsReservationModelFeatures1() (ReservationModelFeatures1, error) {
	var body ReservationModelFeatures1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReservationModelFeatures1 overwrites any union data inside the ReservationModel_Features as the provided ReservationModelFeatures1
func (t *ReservationModel_Features) FromReservationModelFeatures1(v ReservationModelFeatures1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReservationModelFeatures1 performs a merge with any union data inside the ReservationModel_Features, using the provided ReservationModelFeatures1
func (t *ReservationModel_Features) MergeReservationModelFeatures1(v ReservationModelFeatures1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReservationModel_Features) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReservationModel_Features) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProbing returns the union data inside the S3DataTransfer_Probing as a Probing
func (t S3DataTransfer_Probing) AsProbing() (Probing, error) {
	var body Probing
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProbing overwrites any union data inside the S3DataTransfer_Probing as the provided Probing
func (t *S3DataTransfer_Probing) FromProbing(v Probing) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProbing performs a merge with any union data inside the S3DataTransfer_Probing, using the provided Probing
func (t *S3DataTransfer_Probing) MergeProbing(v Probing) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3DataTransferProbing1 returns the union data inside the S3DataTransfer_Probing as a S3DataTransferProbing1
func (t S3DataTransfer_Probing) AsS3DataTransferProbing1() (S3DataTransferProbing1, error) {
	var body S3DataTransferProbing1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3DataTransferProbing1 overwrites any union data inside the S3DataTransfer_Probing as the provided S3DataTransferProbing1
func (t *S3DataTransfer_Probing) FromS3DataTransferProbing1(v S3DataTransferProbing1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3DataTransferProbing1 performs a merge with any union data inside the S3DataTransfer_Probing, using the provided S3DataTransferProbing1
func (t *S3DataTransfer_Probing) MergeS3DataTransferProbing1(v S3DataTransferProbing1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3DataTransfer_Probing) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3DataTransfer_Probing) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3ServiceHealth returns the union data inside the S3DataTransfer_ServicesHealth_0_Item as a S3ServiceHealth
func (t S3DataTransfer_ServicesHealth_0_Item) AsS3ServiceHealth() (S3ServiceHealth, error) {
	var body S3ServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealth overwrites any union data inside the S3DataTransfer_ServicesHealth_0_Item as the provided S3ServiceHealth
func (t *S3DataTransfer_ServicesHealth_0_Item) FromS3ServiceHealth(v S3ServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealth performs a merge with any union data inside the S3DataTransfer_ServicesHealth_0_Item, using the provided S3ServiceHealth
func (t *S3DataTransfer_ServicesHealth_0_Item) MergeS3ServiceHealth(v S3ServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckException returns the union data inside the S3DataTransfer_ServicesHealth_0_Item as a HealthCheckException
func (t S3DataTransfer_ServicesHealth_0_Item) AsHealthCheckException() (HealthCheckException, error) {
	var body HealthCheckException
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckException overwrites any union data inside the S3DataTransfer_ServicesHealth_0_Item as the provided HealthCheckException
func (t *S3DataTransfer_ServicesHealth_0_Item) FromHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckException performs a merge with any union data inside the S3DataTransfer_ServicesHealth_0_Item, using the provided HealthCheckException
func (t *S3DataTransfer_ServicesHealth_0_Item) MergeHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3DataTransfer_ServicesHealth_0_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3DataTransfer_ServicesHealth_0_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3DataTransferServicesHealth0 returns the union data inside the S3DataTransfer_ServicesHealth as a S3DataTransferServicesHealth0
func (t S3DataTransfer_ServicesHealth) AsS3DataTransferServicesHealth0() (S3DataTransferServicesHealth0, error) {
	var body S3DataTransferServicesHealth0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3DataTransferServicesHealth0 overwrites any union data inside the S3DataTransfer_ServicesHealth as the provided S3DataTransferServicesHealth0
func (t *S3DataTransfer_ServicesHealth) FromS3DataTransferServicesHealth0(v S3DataTransferServicesHealth0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3DataTransferServicesHealth0 performs a merge with any union data inside the S3DataTransfer_ServicesHealth, using the provided S3DataTransferServicesHealth0
func (t *S3DataTransfer_ServicesHealth) MergeS3DataTransferServicesHealth0(v S3DataTransferServicesHealth0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3DataTransferServicesHealth1 returns the union data inside the S3DataTransfer_ServicesHealth as a S3DataTransferServicesHealth1
func (t S3DataTransfer_ServicesHealth) AsS3DataTransferServicesHealth1() (S3DataTransferServicesHealth1, error) {
	var body S3DataTransferServicesHealth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3DataTransferServicesHealth1 overwrites any union data inside the S3DataTransfer_ServicesHealth as the provided S3DataTransferServicesHealth1
func (t *S3DataTransfer_ServicesHealth) FromS3DataTransferServicesHealth1(v S3DataTransferServicesHealth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3DataTransferServicesHealth1 performs a merge with any union data inside the S3DataTransfer_ServicesHealth, using the provided S3DataTransferServicesHealth1
func (t *S3DataTransfer_ServicesHealth) MergeS3DataTransferServicesHealth1(v S3DataTransferServicesHealth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3DataTransfer_ServicesHealth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3DataTransfer_ServicesHealth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3DataTransferTenant0 returns the union data inside the S3DataTransfer_Tenant as a S3DataTransferTenant0
func (t S3DataTransfer_Tenant) AsS3DataTransferTenant0() (S3DataTransferTenant0, error) {
	var body S3DataTransferTenant0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3DataTransferTenant0 overwrites any union data inside the S3DataTransfer_Tenant as the provided S3DataTransferTenant0
func (t *S3DataTransfer_Tenant) FromS3DataTransferTenant0(v S3DataTransferTenant0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3DataTransferTenant0 performs a merge with any union data inside the S3DataTransfer_Tenant, using the provided S3DataTransferTenant0
func (t *S3DataTransfer_Tenant) MergeS3DataTransferTenant0(v S3DataTransferTenant0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3DataTransferTenant1 returns the union data inside the S3DataTransfer_Tenant as a S3DataTransferTenant1
func (t S3DataTransfer_Tenant) AsS3DataTransferTenant1() (S3DataTransferTenant1, error) {
	var body S3DataTransferTenant1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3DataTransferTenant1 overwrites any union data inside the S3DataTransfer_Tenant as the provided S3DataTransferTenant1
func (t *S3DataTransfer_Tenant) FromS3DataTransferTenant1(v S3DataTransferTenant1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3DataTransferTenant1 performs a merge with any union data inside the S3DataTransfer_Tenant, using the provided S3DataTransferTenant1
func (t *S3DataTransfer_Tenant) MergeS3DataTransferTenant1(v S3DataTransferTenant1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3DataTransfer_Tenant) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3DataTransfer_Tenant) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3ServiceHealthHealthy0 returns the union data inside the S3ServiceHealth_Healthy as a S3ServiceHealthHealthy0
func (t S3ServiceHealth_Healthy) AsS3ServiceHealthHealthy0() (S3ServiceHealthHealthy0, error) {
	var body S3ServiceHealthHealthy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthHealthy0 overwrites any union data inside the S3ServiceHealth_Healthy as the provided S3ServiceHealthHealthy0
func (t *S3ServiceHealth_Healthy) FromS3ServiceHealthHealthy0(v S3ServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthHealthy0 performs a merge with any union data inside the S3ServiceHealth_Healthy, using the provided S3ServiceHealthHealthy0
func (t *S3ServiceHealth_Healthy) MergeS3ServiceHealthHealthy0(v S3ServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3ServiceHealthHealthy1 returns the union data inside the S3ServiceHealth_Healthy as a S3ServiceHealthHealthy1
func (t S3ServiceHealth_Healthy) AsS3ServiceHealthHealthy1() (S3ServiceHealthHealthy1, error) {
	var body S3ServiceHealthHealthy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthHealthy1 overwrites any union data inside the S3ServiceHealth_Healthy as the provided S3ServiceHealthHealthy1
func (t *S3ServiceHealth_Healthy) FromS3ServiceHealthHealthy1(v S3ServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthHealthy1 performs a merge with any union data inside the S3ServiceHealth_Healthy, using the provided S3ServiceHealthHealthy1
func (t *S3ServiceHealth_Healthy) MergeS3ServiceHealthHealthy1(v S3ServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3ServiceHealth_Healthy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3ServiceHealth_Healthy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3ServiceHealthLastChecked0 returns the union data inside the S3ServiceHealth_LastChecked as a S3ServiceHealthLastChecked0
func (t S3ServiceHealth_LastChecked) AsS3ServiceHealthLastChecked0() (S3ServiceHealthLastChecked0, error) {
	var body S3ServiceHealthLastChecked0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthLastChecked0 overwrites any union data inside the S3ServiceHealth_LastChecked as the provided S3ServiceHealthLastChecked0
func (t *S3ServiceHealth_LastChecked) FromS3ServiceHealthLastChecked0(v S3ServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthLastChecked0 performs a merge with any union data inside the S3ServiceHealth_LastChecked, using the provided S3ServiceHealthLastChecked0
func (t *S3ServiceHealth_LastChecked) MergeS3ServiceHealthLastChecked0(v S3ServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3ServiceHealthLastChecked1 returns the union data inside the S3ServiceHealth_LastChecked as a S3ServiceHealthLastChecked1
func (t S3ServiceHealth_LastChecked) AsS3ServiceHealthLastChecked1() (S3ServiceHealthLastChecked1, error) {
	var body S3ServiceHealthLastChecked1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthLastChecked1 overwrites any union data inside the S3ServiceHealth_LastChecked as the provided S3ServiceHealthLastChecked1
func (t *S3ServiceHealth_LastChecked) FromS3ServiceHealthLastChecked1(v S3ServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthLastChecked1 performs a merge with any union data inside the S3ServiceHealth_LastChecked, using the provided S3ServiceHealthLastChecked1
func (t *S3ServiceHealth_LastChecked) MergeS3ServiceHealthLastChecked1(v S3ServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3ServiceHealth_LastChecked) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3ServiceHealth_LastChecked) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3ServiceHealthLatency0 returns the union data inside the S3ServiceHealth_Latency as a S3ServiceHealthLatency0
func (t S3ServiceHealth_Latency) AsS3ServiceHealthLatency0() (S3ServiceHealthLatency0, error) {
	var body S3ServiceHealthLatency0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthLatency0 overwrites any union data inside the S3ServiceHealth_Latency as the provided S3ServiceHealthLatency0
func (t *S3ServiceHealth_Latency) FromS3ServiceHealthLatency0(v S3ServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthLatency0 performs a merge with any union data inside the S3ServiceHealth_Latency, using the provided S3ServiceHealthLatency0
func (t *S3ServiceHealth_Latency) MergeS3ServiceHealthLatency0(v S3ServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3ServiceHealthLatency1 returns the union data inside the S3ServiceHealth_Latency as a S3ServiceHealthLatency1
func (t S3ServiceHealth_Latency) AsS3ServiceHealthLatency1() (S3ServiceHealthLatency1, error) {
	var body S3ServiceHealthLatency1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthLatency1 overwrites any union data inside the S3ServiceHealth_Latency as the provided S3ServiceHealthLatency1
func (t *S3ServiceHealth_Latency) FromS3ServiceHealthLatency1(v S3ServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthLatency1 performs a merge with any union data inside the S3ServiceHealth_Latency, using the provided S3ServiceHealthLatency1
func (t *S3ServiceHealth_Latency) MergeS3ServiceHealthLatency1(v S3ServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3ServiceHealth_Latency) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3ServiceHealth_Latency) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3ServiceHealthMessage0 returns the union data inside the S3ServiceHealth_Message as a S3ServiceHealthMessage0
func (t S3ServiceHealth_Message) AsS3ServiceHealthMessage0() (S3ServiceHealthMessage0, error) {
	var body S3ServiceHealthMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthMessage0 overwrites any union data inside the S3ServiceHealth_Message as the provided S3ServiceHealthMessage0
func (t *S3ServiceHealth_Message) FromS3ServiceHealthMessage0(v S3ServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthMessage0 performs a merge with any union data inside the S3ServiceHealth_Message, using the provided S3ServiceHealthMessage0
func (t *S3ServiceHealth_Message) MergeS3ServiceHealthMessage0(v S3ServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3ServiceHealthMessage1 returns the union data inside the S3ServiceHealth_Message as a S3ServiceHealthMessage1
func (t S3ServiceHealth_Message) AsS3ServiceHealthMessage1() (S3ServiceHealthMessage1, error) {
	var body S3ServiceHealthMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealthMessage1 overwrites any union data inside the S3ServiceHealth_Message as the provided S3ServiceHealthMessage1
func (t *S3ServiceHealth_Message) FromS3ServiceHealthMessage1(v S3ServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealthMessage1 performs a merge with any union data inside the S3ServiceHealth_Message, using the provided S3ServiceHealthMessage1
func (t *S3ServiceHealth_Message) MergeS3ServiceHealthMessage1(v S3ServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3ServiceHealth_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3ServiceHealth_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSSHClientPoolProxyHost0 returns the union data inside the SSHClientPool_ProxyHost as a SSHClientPoolProxyHost0
func (t SSHClientPool_ProxyHost) AsSSHClientPoolProxyHost0() (SSHClientPoolProxyHost0, error) {
	var body SSHClientPoolProxyHost0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHClientPoolProxyHost0 overwrites any union data inside the SSHClientPool_ProxyHost as the provided SSHClientPoolProxyHost0
func (t *SSHClientPool_ProxyHost) FromSSHClientPoolProxyHost0(v SSHClientPoolProxyHost0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHClientPoolProxyHost0 performs a merge with any union data inside the SSHClientPool_ProxyHost, using the provided SSHClientPoolProxyHost0
func (t *SSHClientPool_ProxyHost) MergeSSHClientPoolProxyHost0(v SSHClientPoolProxyHost0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHClientPoolProxyHost1 returns the union data inside the SSHClientPool_ProxyHost as a SSHClientPoolProxyHost1
func (t SSHClientPool_ProxyHost) AsSSHClientPoolProxyHost1() (SSHClientPoolProxyHost1, error) {
	var body SSHClientPoolProxyHost1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHClientPoolProxyHost1 overwrites any union data inside the SSHClientPool_ProxyHost as the provided SSHClientPoolProxyHost1
func (t *SSHClientPool_ProxyHost) FromSSHClientPoolProxyHost1(v SSHClientPoolProxyHost1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHClientPoolProxyHost1 performs a merge with any union data inside the SSHClientPool_ProxyHost, using the provided SSHClientPoolProxyHost1
func (t *SSHClientPool_ProxyHost) MergeSSHClientPoolProxyHost1(v SSHClientPoolProxyHost1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SSHClientPool_ProxyHost) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SSHClientPool_ProxyHost) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSSHClientPoolProxyPort0 returns the union data inside the SSHClientPool_ProxyPort as a SSHClientPoolProxyPort0
func (t SSHClientPool_ProxyPort) AsSSHClientPoolProxyPort0() (SSHClientPoolProxyPort0, error) {
	var body SSHClientPoolProxyPort0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHClientPoolProxyPort0 overwrites any union data inside the SSHClientPool_ProxyPort as the provided SSHClientPoolProxyPort0
func (t *SSHClientPool_ProxyPort) FromSSHClientPoolProxyPort0(v SSHClientPoolProxyPort0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHClientPoolProxyPort0 performs a merge with any union data inside the SSHClientPool_ProxyPort, using the provided SSHClientPoolProxyPort0
func (t *SSHClientPool_ProxyPort) MergeSSHClientPoolProxyPort0(v SSHClientPoolProxyPort0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHClientPoolProxyPort1 returns the union data inside the SSHClientPool_ProxyPort as a SSHClientPoolProxyPort1
func (t SSHClientPool_ProxyPort) AsSSHClientPoolProxyPort1() (SSHClientPoolProxyPort1, error) {
	var body SSHClientPoolProxyPort1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHClientPoolProxyPort1 overwrites any union data inside the SSHClientPool_ProxyPort as the provided SSHClientPoolProxyPort1
func (t *SSHClientPool_ProxyPort) FromSSHClientPoolProxyPort1(v SSHClientPoolProxyPort1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHClientPoolProxyPort1 performs a merge with any union data inside the SSHClientPool_ProxyPort, using the provided SSHClientPoolProxyPort1
func (t *SSHClientPool_ProxyPort) MergeSSHClientPoolProxyPort1(v SSHClientPoolProxyPort1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SSHClientPool_ProxyPort) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SSHClientPool_ProxyPort) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSSHServiceHealthHealthy0 returns the union data inside the SSHServiceHealth_Healthy as a SSHServiceHealthHealthy0
func (t SSHServiceHealth_Healthy) AsSSHServiceHealthHealthy0() (SSHServiceHealthHealthy0, error) {
	var body SSHServiceHealthHealthy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthHealthy0 overwrites any union data inside the SSHServiceHealth_Healthy as the provided SSHServiceHealthHealthy0
func (t *SSHServiceHealth_Healthy) FromSSHServiceHealthHealthy0(v SSHServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthHealthy0 performs a merge with any union data inside the SSHServiceHealth_Healthy, using the provided SSHServiceHealthHealthy0
func (t *SSHServiceHealth_Healthy) MergeSSHServiceHealthHealthy0(v SSHServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHServiceHealthHealthy1 returns the union data inside the SSHServiceHealth_Healthy as a SSHServiceHealthHealthy1
func (t SSHServiceHealth_Healthy) AsSSHServiceHealthHealthy1() (SSHServiceHealthHealthy1, error) {
	var body SSHServiceHealthHealthy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthHealthy1 overwrites any union data inside the SSHServiceHealth_Healthy as the provided SSHServiceHealthHealthy1
func (t *SSHServiceHealth_Healthy) FromSSHServiceHealthHealthy1(v SSHServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthHealthy1 performs a merge with any union data inside the SSHServiceHealth_Healthy, using the provided SSHServiceHealthHealthy1
func (t *SSHServiceHealth_Healthy) MergeSSHServiceHealthHealthy1(v SSHServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SSHServiceHealth_Healthy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SSHServiceHealth_Healthy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSSHServiceHealthLastChecked0 returns the union data inside the SSHServiceHealth_LastChecked as a SSHServiceHealthLastChecked0
func (t SSHServiceHealth_LastChecked) AsSSHServiceHealthLastChecked0() (SSHServiceHealthLastChecked0, error) {
	var body SSHServiceHealthLastChecked0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthLastChecked0 overwrites any union data inside the SSHServiceHealth_LastChecked as the provided SSHServiceHealthLastChecked0
func (t *SSHServiceHealth_LastChecked) FromSSHServiceHealthLastChecked0(v SSHServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthLastChecked0 performs a merge with any union data inside the SSHServiceHealth_LastChecked, using the provided SSHServiceHealthLastChecked0
func (t *SSHServiceHealth_LastChecked) MergeSSHServiceHealthLastChecked0(v SSHServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHServiceHealthLastChecked1 returns the union data inside the SSHServiceHealth_LastChecked as a SSHServiceHealthLastChecked1
func (t SSHServiceHealth_LastChecked) AsSSHServiceHealthLastChecked1() (SSHServiceHealthLastChecked1, error) {
	var body SSHServiceHealthLastChecked1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthLastChecked1 overwrites any union data inside the SSHServiceHealth_LastChecked as the provided SSHServiceHealthLastChecked1
func (t *SSHServiceHealth_LastChecked) FromSSHServiceHealthLastChecked1(v SSHServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthLastChecked1 performs a merge with any union data inside the SSHServiceHealth_LastChecked, using the provided SSHServiceHealthLastChecked1
func (t *SSHServiceHealth_LastChecked) MergeSSHServiceHealthLastChecked1(v SSHServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SSHServiceHealth_LastChecked) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SSHServiceHealth_LastChecked) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSSHServiceHealthLatency0 returns the union data inside the SSHServiceHealth_Latency as a SSHServiceHealthLatency0
func (t SSHServiceHealth_Latency) AsSSHServiceHealthLatency0() (SSHServiceHealthLatency0, error) {
	var body SSHServiceHealthLatency0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthLatency0 overwrites any union data inside the SSHServiceHealth_Latency as the provided SSHServiceHealthLatency0
func (t *SSHServiceHealth_Latency) FromSSHServiceHealthLatency0(v SSHServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthLatency0 performs a merge with any union data inside the SSHServiceHealth_Latency, using the provided SSHServiceHealthLatency0
func (t *SSHServiceHealth_Latency) MergeSSHServiceHealthLatency0(v SSHServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHServiceHealthLatency1 returns the union data inside the SSHServiceHealth_Latency as a SSHServiceHealthLatency1
func (t SSHServiceHealth_Latency) AsSSHServiceHealthLatency1() (SSHServiceHealthLatency1, error) {
	var body SSHServiceHealthLatency1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthLatency1 overwrites any union data inside the SSHServiceHealth_Latency as the provided SSHServiceHealthLatency1
func (t *SSHServiceHealth_Latency) FromSSHServiceHealthLatency1(v SSHServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthLatency1 performs a merge with any union data inside the SSHServiceHealth_Latency, using the provided SSHServiceHealthLatency1
func (t *SSHServiceHealth_Latency) MergeSSHServiceHealthLatency1(v SSHServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SSHServiceHealth_Latency) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SSHServiceHealth_Latency) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSSHServiceHealthMessage0 returns the union data inside the SSHServiceHealth_Message as a SSHServiceHealthMessage0
func (t SSHServiceHealth_Message) AsSSHServiceHealthMessage0() (SSHServiceHealthMessage0, error) {
	var body SSHServiceHealthMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthMessage0 overwrites any union data inside the SSHServiceHealth_Message as the provided SSHServiceHealthMessage0
func (t *SSHServiceHealth_Message) FromSSHServiceHealthMessage0(v SSHServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthMessage0 performs a merge with any union data inside the SSHServiceHealth_Message, using the provided SSHServiceHealthMessage0
func (t *SSHServiceHealth_Message) MergeSSHServiceHealthMessage0(v SSHServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHServiceHealthMessage1 returns the union data inside the SSHServiceHealth_Message as a SSHServiceHealthMessage1
func (t SSHServiceHealth_Message) AsSSHServiceHealthMessage1() (SSHServiceHealthMessage1, error) {
	var body SSHServiceHealthMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealthMessage1 overwrites any union data inside the SSHServiceHealth_Message as the provided SSHServiceHealthMessage1
func (t *SSHServiceHealth_Message) FromSSHServiceHealthMessage1(v SSHServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealthMessage1 performs a merge with any union data inside the SSHServiceHealth_Message, using the provided SSHServiceHealthMessage1
func (t *SSHServiceHealth_Message) MergeSSHServiceHealthMessage1(v SSHServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SSHServiceHealth_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SSHServiceHealth_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerApiUrl0 returns the union data inside the Scheduler_ApiUrl as a SchedulerApiUrl0
func (t Scheduler_ApiUrl) AsSchedulerApiUrl0() (SchedulerApiUrl0, error) {
	var body SchedulerApiUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerApiUrl0 overwrites any union data inside the Scheduler_ApiUrl as the provided SchedulerApiUrl0
func (t *Scheduler_ApiUrl) FromSchedulerApiUrl0(v SchedulerApiUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerApiUrl0 performs a merge with any union data inside the Scheduler_ApiUrl, using the provided SchedulerApiUrl0
func (t *Scheduler_ApiUrl) MergeSchedulerApiUrl0(v SchedulerApiUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerApiUrl1 returns the union data inside the Scheduler_ApiUrl as a SchedulerApiUrl1
func (t Scheduler_ApiUrl) AsSchedulerApiUrl1() (SchedulerApiUrl1, error) {
	var body SchedulerApiUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerApiUrl1 overwrites any union data inside the Scheduler_ApiUrl as the provided SchedulerApiUrl1
func (t *Scheduler_ApiUrl) FromSchedulerApiUrl1(v SchedulerApiUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerApiUrl1 performs a merge with any union data inside the Scheduler_ApiUrl, using the provided SchedulerApiUrl1
func (t *Scheduler_ApiUrl) MergeSchedulerApiUrl1(v SchedulerApiUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Scheduler_ApiUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Scheduler_ApiUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerApiVersion0 returns the union data inside the Scheduler_ApiVersion as a SchedulerApiVersion0
func (t Scheduler_ApiVersion) AsSchedulerApiVersion0() (SchedulerApiVersion0, error) {
	var body SchedulerApiVersion0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerApiVersion0 overwrites any union data inside the Scheduler_ApiVersion as the provided SchedulerApiVersion0
func (t *Scheduler_ApiVersion) FromSchedulerApiVersion0(v SchedulerApiVersion0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerApiVersion0 performs a merge with any union data inside the Scheduler_ApiVersion, using the provided SchedulerApiVersion0
func (t *Scheduler_ApiVersion) MergeSchedulerApiVersion0(v SchedulerApiVersion0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerApiVersion1 returns the union data inside the Scheduler_ApiVersion as a SchedulerApiVersion1
func (t Scheduler_ApiVersion) AsSchedulerApiVersion1() (SchedulerApiVersion1, error) {
	var body SchedulerApiVersion1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerApiVersion1 overwrites any union data inside the Scheduler_ApiVersion as the provided SchedulerApiVersion1
func (t *Scheduler_ApiVersion) FromSchedulerApiVersion1(v SchedulerApiVersion1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerApiVersion1 performs a merge with any union data inside the Scheduler_ApiVersion, using the provided SchedulerApiVersion1
func (t *Scheduler_ApiVersion) MergeSchedulerApiVersion1(v SchedulerApiVersion1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Scheduler_ApiVersion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Scheduler_ApiVersion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerTimeout0 returns the union data inside the Scheduler_Timeout as a SchedulerTimeout0
func (t Scheduler_Timeout) AsSchedulerTimeout0() (SchedulerTimeout0, error) {
	var body SchedulerTimeout0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerTimeout0 overwrites any union data inside the Scheduler_Timeout as the provided SchedulerTimeout0
func (t *Scheduler_Timeout) FromSchedulerTimeout0(v SchedulerTimeout0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerTimeout0 performs a merge with any union data inside the Scheduler_Timeout, using the provided SchedulerTimeout0
func (t *Scheduler_Timeout) MergeSchedulerTimeout0(v SchedulerTimeout0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerTimeout1 returns the union data inside the Scheduler_Timeout as a SchedulerTimeout1
func (t Scheduler_Timeout) AsSchedulerTimeout1() (SchedulerTimeout1, error) {
	var body SchedulerTimeout1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerTimeout1 overwrites any union data inside the Scheduler_Timeout as the provided SchedulerTimeout1
func (t *Scheduler_Timeout) FromSchedulerTimeout1(v SchedulerTimeout1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerTimeout1 performs a merge with any union data inside the Scheduler_Timeout, using the provided SchedulerTimeout1
func (t *Scheduler_Timeout) MergeSchedulerTimeout1(v SchedulerTimeout1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Scheduler_Timeout) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Scheduler_Timeout) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerServiceHealthHealthy0 returns the union data inside the SchedulerServiceHealth_Healthy as a SchedulerServiceHealthHealthy0
func (t SchedulerServiceHealth_Healthy) AsSchedulerServiceHealthHealthy0() (SchedulerServiceHealthHealthy0, error) {
	var body SchedulerServiceHealthHealthy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthHealthy0 overwrites any union data inside the SchedulerServiceHealth_Healthy as the provided SchedulerServiceHealthHealthy0
func (t *SchedulerServiceHealth_Healthy) FromSchedulerServiceHealthHealthy0(v SchedulerServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthHealthy0 performs a merge with any union data inside the SchedulerServiceHealth_Healthy, using the provided SchedulerServiceHealthHealthy0
func (t *SchedulerServiceHealth_Healthy) MergeSchedulerServiceHealthHealthy0(v SchedulerServiceHealthHealthy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerServiceHealthHealthy1 returns the union data inside the SchedulerServiceHealth_Healthy as a SchedulerServiceHealthHealthy1
func (t SchedulerServiceHealth_Healthy) AsSchedulerServiceHealthHealthy1() (SchedulerServiceHealthHealthy1, error) {
	var body SchedulerServiceHealthHealthy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthHealthy1 overwrites any union data inside the SchedulerServiceHealth_Healthy as the provided SchedulerServiceHealthHealthy1
func (t *SchedulerServiceHealth_Healthy) FromSchedulerServiceHealthHealthy1(v SchedulerServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthHealthy1 performs a merge with any union data inside the SchedulerServiceHealth_Healthy, using the provided SchedulerServiceHealthHealthy1
func (t *SchedulerServiceHealth_Healthy) MergeSchedulerServiceHealthHealthy1(v SchedulerServiceHealthHealthy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SchedulerServiceHealth_Healthy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SchedulerServiceHealth_Healthy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerServiceHealthLastChecked0 returns the union data inside the SchedulerServiceHealth_LastChecked as a SchedulerServiceHealthLastChecked0
func (t SchedulerServiceHealth_LastChecked) AsSchedulerServiceHealthLastChecked0() (SchedulerServiceHealthLastChecked0, error) {
	var body SchedulerServiceHealthLastChecked0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthLastChecked0 overwrites any union data inside the SchedulerServiceHealth_LastChecked as the provided SchedulerServiceHealthLastChecked0
func (t *SchedulerServiceHealth_LastChecked) FromSchedulerServiceHealthLastChecked0(v SchedulerServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthLastChecked0 performs a merge with any union data inside the SchedulerServiceHealth_LastChecked, using the provided SchedulerServiceHealthLastChecked0
func (t *SchedulerServiceHealth_LastChecked) MergeSchedulerServiceHealthLastChecked0(v SchedulerServiceHealthLastChecked0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerServiceHealthLastChecked1 returns the union data inside the SchedulerServiceHealth_LastChecked as a SchedulerServiceHealthLastChecked1
func (t SchedulerServiceHealth_LastChecked) AsSchedulerServiceHealthLastChecked1() (SchedulerServiceHealthLastChecked1, error) {
	var body SchedulerServiceHealthLastChecked1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthLastChecked1 overwrites any union data inside the SchedulerServiceHealth_LastChecked as the provided SchedulerServiceHealthLastChecked1
func (t *SchedulerServiceHealth_LastChecked) FromSchedulerServiceHealthLastChecked1(v SchedulerServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthLastChecked1 performs a merge with any union data inside the SchedulerServiceHealth_LastChecked, using the provided SchedulerServiceHealthLastChecked1
func (t *SchedulerServiceHealth_LastChecked) MergeSchedulerServiceHealthLastChecked1(v SchedulerServiceHealthLastChecked1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SchedulerServiceHealth_LastChecked) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SchedulerServiceHealth_LastChecked) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerServiceHealthLatency0 returns the union data inside the SchedulerServiceHealth_Latency as a SchedulerServiceHealthLatency0
func (t SchedulerServiceHealth_Latency) AsSchedulerServiceHealthLatency0() (SchedulerServiceHealthLatency0, error) {
	var body SchedulerServiceHealthLatency0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthLatency0 overwrites any union data inside the SchedulerServiceHealth_Latency as the provided SchedulerServiceHealthLatency0
func (t *SchedulerServiceHealth_Latency) FromSchedulerServiceHealthLatency0(v SchedulerServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthLatency0 performs a merge with any union data inside the SchedulerServiceHealth_Latency, using the provided SchedulerServiceHealthLatency0
func (t *SchedulerServiceHealth_Latency) MergeSchedulerServiceHealthLatency0(v SchedulerServiceHealthLatency0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerServiceHealthLatency1 returns the union data inside the SchedulerServiceHealth_Latency as a SchedulerServiceHealthLatency1
func (t SchedulerServiceHealth_Latency) AsSchedulerServiceHealthLatency1() (SchedulerServiceHealthLatency1, error) {
	var body SchedulerServiceHealthLatency1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthLatency1 overwrites any union data inside the SchedulerServiceHealth_Latency as the provided SchedulerServiceHealthLatency1
func (t *SchedulerServiceHealth_Latency) FromSchedulerServiceHealthLatency1(v SchedulerServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthLatency1 performs a merge with any union data inside the SchedulerServiceHealth_Latency, using the provided SchedulerServiceHealthLatency1
func (t *SchedulerServiceHealth_Latency) MergeSchedulerServiceHealthLatency1(v SchedulerServiceHealthLatency1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SchedulerServiceHealth_Latency) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SchedulerServiceHealth_Latency) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSchedulerServiceHealthMessage0 returns the union data inside the SchedulerServiceHealth_Message as a SchedulerServiceHealthMessage0
func (t SchedulerServiceHealth_Message) AsSchedulerServiceHealthMessage0() (SchedulerServiceHealthMessage0, error) {
	var body SchedulerServiceHealthMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthMessage0 overwrites any union data inside the SchedulerServiceHealth_Message as the provided SchedulerServiceHealthMessage0
func (t *SchedulerServiceHealth_Message) FromSchedulerServiceHealthMessage0(v SchedulerServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthMessage0 performs a merge with any union data inside the SchedulerServiceHealth_Message, using the provided SchedulerServiceHealthMessage0
func (t *SchedulerServiceHealth_Message) MergeSchedulerServiceHealthMessage0(v SchedulerServiceHealthMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSchedulerServiceHealthMessage1 returns the union data inside the SchedulerServiceHealth_Message as a SchedulerServiceHealthMessage1
func (t SchedulerServiceHealth_Message) AsSchedulerServiceHealthMessage1() (SchedulerServiceHealthMessage1, error) {
	var body SchedulerServiceHealthMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealthMessage1 overwrites any union data inside the SchedulerServiceHealth_Message as the provided SchedulerServiceHealthMessage1
func (t *SchedulerServiceHealth_Message) FromSchedulerServiceHealthMessage1(v SchedulerServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealthMessage1 performs a merge with any union data inside the SchedulerServiceHealth_Message, using the provided SchedulerServiceHealthMessage1
func (t *SchedulerServiceHealth_Message) MergeSchedulerServiceHealthMessage1(v SchedulerServiceHealthMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SchedulerServiceHealth_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SchedulerServiceHealth_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUploadFileResponseCompleteUploadUrl0 returns the union data inside the UploadFileResponse_CompleteUploadUrl as a UploadFileResponseCompleteUploadUrl0
func (t UploadFileResponse_CompleteUploadUrl) AsUploadFileResponseCompleteUploadUrl0() (UploadFileResponseCompleteUploadUrl0, error) {
	var body UploadFileResponseCompleteUploadUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponseCompleteUploadUrl0 overwrites any union data inside the UploadFileResponse_CompleteUploadUrl as the provided UploadFileResponseCompleteUploadUrl0
func (t *UploadFileResponse_CompleteUploadUrl) FromUploadFileResponseCompleteUploadUrl0(v UploadFileResponseCompleteUploadUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponseCompleteUploadUrl0 performs a merge with any union data inside the UploadFileResponse_CompleteUploadUrl, using the provided UploadFileResponseCompleteUploadUrl0
func (t *UploadFileResponse_CompleteUploadUrl) MergeUploadFileResponseCompleteUploadUrl0(v UploadFileResponseCompleteUploadUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUploadFileResponseCompleteUploadUrl1 returns the union data inside the UploadFileResponse_CompleteUploadUrl as a UploadFileResponseCompleteUploadUrl1
func (t UploadFileResponse_CompleteUploadUrl) AsUploadFileResponseCompleteUploadUrl1() (UploadFileResponseCompleteUploadUrl1, error) {
	var body UploadFileResponseCompleteUploadUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponseCompleteUploadUrl1 overwrites any union data inside the UploadFileResponse_CompleteUploadUrl as the provided UploadFileResponseCompleteUploadUrl1
func (t *UploadFileResponse_CompleteUploadUrl) FromUploadFileResponseCompleteUploadUrl1(v UploadFileResponseCompleteUploadUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponseCompleteUploadUrl1 performs a merge with any union data inside the UploadFileResponse_CompleteUploadUrl, using the provided UploadFileResponseCompleteUploadUrl1
func (t *UploadFileResponse_CompleteUploadUrl) MergeUploadFileResponseCompleteUploadUrl1(v UploadFileResponseCompleteUploadUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UploadFileResponse_CompleteUploadUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadFileResponse_CompleteUploadUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUploadFileResponseDownloadUrl0 returns the union data inside the UploadFileResponse_DownloadUrl as a UploadFileResponseDownloadUrl0
func (t UploadFileResponse_DownloadUrl) AsUploadFileResponseDownloadUrl0() (UploadFileResponseDownloadUrl0, error) {
	var body UploadFileResponseDownloadUrl0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponseDownloadUrl0 overwrites any union data inside the UploadFileResponse_DownloadUrl as the provided UploadFileResponseDownloadUrl0
func (t *UploadFileResponse_DownloadUrl) FromUploadFileResponseDownloadUrl0(v UploadFileResponseDownloadUrl0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponseDownloadUrl0 performs a merge with any union data inside the UploadFileResponse_DownloadUrl, using the provided UploadFileResponseDownloadUrl0
func (t *UploadFileResponse_DownloadUrl) MergeUploadFileResponseDownloadUrl0(v UploadFileResponseDownloadUrl0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUploadFileResponseDownloadUrl1 returns the union data inside the UploadFileResponse_DownloadUrl as a UploadFileResponseDownloadUrl1
func (t UploadFileResponse_DownloadUrl) AsUploadFileResponseDownloadUrl1() (UploadFileResponseDownloadUrl1, error) {
	var body UploadFileResponseDownloadUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponseDownloadUrl1 overwrites any union data inside the UploadFileResponse_DownloadUrl as the provided UploadFileResponseDownloadUrl1
func (t *UploadFileResponse_DownloadUrl) FromUploadFileResponseDownloadUrl1(v UploadFileResponseDownloadUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponseDownloadUrl1 performs a merge with any union data inside the UploadFileResponse_DownloadUrl, using the provided UploadFileResponseDownloadUrl1
func (t *UploadFileResponse_DownloadUrl) MergeUploadFileResponseDownloadUrl1(v UploadFileResponseDownloadUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UploadFileResponse_DownloadUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadFileResponse_DownloadUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUploadFileResponseMaxPartSize0 returns the union data inside the UploadFileResponse_MaxPartSize as a UploadFileResponseMaxPartSize0
func (t UploadFileResponse_MaxPartSize) AsUploadFileResponseMaxPartSize0() (UploadFileResponseMaxPartSize0, error) {
	var body UploadFileResponseMaxPartSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponseMaxPartSize0 overwrites any union data inside the UploadFileResponse_MaxPartSize as the provided UploadFileResponseMaxPartSize0
func (t *UploadFileResponse_MaxPartSize) FromUploadFileResponseMaxPartSize0(v UploadFileResponseMaxPartSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponseMaxPartSize0 performs a merge with any union data inside the UploadFileResponse_MaxPartSize, using the provided UploadFileResponseMaxPartSize0
func (t *UploadFileResponse_MaxPartSize) MergeUploadFileResponseMaxPartSize0(v UploadFileResponseMaxPartSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUploadFileResponseMaxPartSize1 returns the union data inside the UploadFileResponse_MaxPartSize as a UploadFileResponseMaxPartSize1
func (t UploadFileResponse_MaxPartSize) AsUploadFileResponseMaxPartSize1() (UploadFileResponseMaxPartSize1, error) {
	var body UploadFileResponseMaxPartSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponseMaxPartSize1 overwrites any union data inside the UploadFileResponse_MaxPartSize as the provided UploadFileResponseMaxPartSize1
func (t *UploadFileResponse_MaxPartSize) FromUploadFileResponseMaxPartSize1(v UploadFileResponseMaxPartSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponseMaxPartSize1 performs a merge with any union data inside the UploadFileResponse_MaxPartSize, using the provided UploadFileResponseMaxPartSize1
func (t *UploadFileResponse_MaxPartSize) MergeUploadFileResponseMaxPartSize1(v UploadFileResponseMaxPartSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UploadFileResponse_MaxPartSize) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadFileResponse_MaxPartSize) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUploadFileResponsePartsUploadUrls0 returns the union data inside the UploadFileResponse_PartsUploadUrls as a UploadFileResponsePartsUploadUrls0
func (t UploadFileResponse_PartsUploadUrls) AsUploadFileResponsePartsUploadUrls0() (UploadFileResponsePartsUploadUrls0, error) {
	var body UploadFileResponsePartsUploadUrls0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponsePartsUploadUrls0 overwrites any union data inside the UploadFileResponse_PartsUploadUrls as the provided UploadFileResponsePartsUploadUrls0
func (t *UploadFileResponse_PartsUploadUrls) FromUploadFileResponsePartsUploadUrls0(v UploadFileResponsePartsUploadUrls0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponsePartsUploadUrls0 performs a merge with any union data inside the UploadFileResponse_PartsUploadUrls, using the provided UploadFileResponsePartsUploadUrls0
func (t *UploadFileResponse_PartsUploadUrls) MergeUploadFileResponsePartsUploadUrls0(v UploadFileResponsePartsUploadUrls0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUploadFileResponsePartsUploadUrls1 returns the union data inside the UploadFileResponse_PartsUploadUrls as a UploadFileResponsePartsUploadUrls1
func (t UploadFileResponse_PartsUploadUrls) AsUploadFileResponsePartsUploadUrls1() (UploadFileResponsePartsUploadUrls1, error) {
	var body UploadFileResponsePartsUploadUrls1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUploadFileResponsePartsUploadUrls1 overwrites any union data inside the UploadFileResponse_PartsUploadUrls as the provided UploadFileResponsePartsUploadUrls1
func (t *UploadFileResponse_PartsUploadUrls) FromUploadFileResponsePartsUploadUrls1(v UploadFileResponsePartsUploadUrls1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUploadFileResponsePartsUploadUrls1 performs a merge with any union data inside the UploadFileResponse_PartsUploadUrls, using the provided UploadFileResponsePartsUploadUrls1
func (t *UploadFileResponse_PartsUploadUrls) MergeUploadFileResponsePartsUploadUrls1(v UploadFileResponsePartsUploadUrls1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UploadFileResponse_PartsUploadUrls) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadFileResponse_PartsUploadUrls) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetJobsComputeSystemNameJobsGet request
	GetJobsComputeSystemNameJobsGet(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobSubmitComputeSystemNameJobsPostWithBody request with any body
	PostJobSubmitComputeSystemNameJobsPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobSubmitComputeSystemNameJobsPost(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobCancelComputeSystemNameJobsJobIdDelete request
	DeleteJobCancelComputeSystemNameJobsJobIdDelete(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobComputeSystemNameJobsJobIdGet request
	GetJobComputeSystemNameJobsJobIdGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachComputeSystemNameJobsJobIdAttachPutWithBody request with any body
	AttachComputeSystemNameJobsJobIdAttachPutWithBody(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AttachComputeSystemNameJobsJobIdAttachPut(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobMetadataComputeSystemNameJobsJobIdMetadataGet request
	GetJobMetadataComputeSystemNameJobsJobIdMetadataGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChecksumFilesystemSystemNameOpsChecksumGet request
	GetChecksumFilesystemSystemNameOpsChecksumGet(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChmodFilesystemSystemNameOpsChmodPutWithBody request with any body
	PutChmodFilesystemSystemNameOpsChmodPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChmodFilesystemSystemNameOpsChmodPut(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChownFilesystemSystemNameOpsChownPutWithBody request with any body
	PutChownFilesystemSystemNameOpsChownPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChownFilesystemSystemNameOpsChownPut(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCompressFilesystemSystemNameOpsCompressPostWithBody request with any body
	PostCompressFilesystemSystemNameOpsCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCompressFilesystemSystemNameOpsCompressPost(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDownloadFilesystemSystemNameOpsDownloadGet request
	GetDownloadFilesystemSystemNameOpsDownloadGet(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExtractFilesystemSystemNameOpsExtractPostWithBody request with any body
	PostExtractFilesystemSystemNameOpsExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExtractFilesystemSystemNameOpsExtractPost(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFileFilesystemSystemNameOpsFileGet request
	GetFileFilesystemSystemNameOpsFileGet(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeadFilesystemSystemNameOpsHeadGet request
	GetHeadFilesystemSystemNameOpsHeadGet(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLsFilesystemSystemNameOpsLsGet request
	GetLsFilesystemSystemNameOpsLsGet(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMkdirFilesystemSystemNameOpsMkdirPostWithBody request with any body
	PostMkdirFilesystemSystemNameOpsMkdirPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMkdirFilesystemSystemNameOpsMkdirPost(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRmFilesystemSystemNameOpsRmDelete request
	DeleteRmFilesystemSystemNameOpsRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatFilesystemSystemNameOpsStatGet request
	GetStatFilesystemSystemNameOpsStatGet(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody request with any body
	PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSymlinkFilesystemSystemNameOpsSymlinkPost(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTailFilesystemSystemNameOpsTailGet request
	GetTailFilesystemSystemNameOpsTailGet(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadFilesystemSystemNameOpsUploadPostWithBody request with any body
	PostUploadFilesystemSystemNameOpsUploadPostWithBody(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetViewFilesystemSystemNameOpsViewGet request
	GetViewFilesystemSystemNameOpsViewGet(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompressFilesystemSystemNameTransferCompressPostWithBody request with any body
	CompressFilesystemSystemNameTransferCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompressFilesystemSystemNameTransferCompressPost(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCpFilesystemSystemNameTransferCpPostWithBody request with any body
	PostCpFilesystemSystemNameTransferCpPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCpFilesystemSystemNameTransferCpPost(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDownloadFilesystemSystemNameTransferDownloadPostWithBody request with any body
	PostDownloadFilesystemSystemNameTransferDownloadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDownloadFilesystemSystemNameTransferDownloadPost(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtractFilesystemSystemNameTransferExtractPostWithBody request with any body
	ExtractFilesystemSystemNameTransferExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtractFilesystemSystemNameTransferExtractPost(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveMvFilesystemSystemNameTransferMvPostWithBody request with any body
	MoveMvFilesystemSystemNameTransferMvPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveMvFilesystemSystemNameTransferMvPost(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRmFilesystemSystemNameTransferRmDelete request
	DeleteRmFilesystemSystemNameTransferRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadFilesystemSystemNameTransferUploadPostWithBody request with any body
	PostUploadFilesystemSystemNameTransferUploadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUploadFilesystemSystemNameTransferUploadPost(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLivenessStatusLivenessGet request
	GetLivenessStatusLivenessGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemsStatusSystemsGet request
	GetSystemsStatusSystemsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNodesStatusSystemNameNodesGet request
	GetSystemNodesStatusSystemNameNodesGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemPartitionsStatusSystemNamePartitionsGet request
	GetSystemPartitionsStatusSystemNamePartitionsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemReservationsStatusSystemNameReservationsGet request
	GetSystemReservationsStatusSystemNameReservationsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserinfoStatusSystemNameUserinfoGet request
	GetUserinfoStatusSystemNameUserinfoGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetJobsComputeSystemNameJobsGet(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsComputeSystemNameJobsGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobSubmitComputeSystemNameJobsPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobSubmitComputeSystemNameJobsPost(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobSubmitComputeSystemNameJobsPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobCancelComputeSystemNameJobsJobIdDelete(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobCancelComputeSystemNameJobsJobIdDeleteRequest(c.Server, systemName, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobComputeSystemNameJobsJobIdGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobComputeSystemNameJobsJobIdGetRequest(c.Server, systemName, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachComputeSystemNameJobsJobIdAttachPutWithBody(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody(c.Server, systemName, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachComputeSystemNameJobsJobIdAttachPut(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachComputeSystemNameJobsJobIdAttachPutRequest(c.Server, systemName, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobMetadataComputeSystemNameJobsJobIdMetadataGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobMetadataComputeSystemNameJobsJobIdMetadataGetRequest(c.Server, systemName, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChecksumFilesystemSystemNameOpsChecksumGet(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChecksumFilesystemSystemNameOpsChecksumGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChmodFilesystemSystemNameOpsChmodPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChmodFilesystemSystemNameOpsChmodPut(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChmodFilesystemSystemNameOpsChmodPutRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChownFilesystemSystemNameOpsChownPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChownFilesystemSystemNameOpsChownPut(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChownFilesystemSystemNameOpsChownPutRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompressFilesystemSystemNameOpsCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompressFilesystemSystemNameOpsCompressPost(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompressFilesystemSystemNameOpsCompressPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadFilesystemSystemNameOpsDownloadGet(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadFilesystemSystemNameOpsDownloadGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExtractFilesystemSystemNameOpsExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExtractFilesystemSystemNameOpsExtractPost(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExtractFilesystemSystemNameOpsExtractPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileFilesystemSystemNameOpsFileGet(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileFilesystemSystemNameOpsFileGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeadFilesystemSystemNameOpsHeadGet(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadFilesystemSystemNameOpsHeadGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLsFilesystemSystemNameOpsLsGet(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLsFilesystemSystemNameOpsLsGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMkdirFilesystemSystemNameOpsMkdirPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMkdirFilesystemSystemNameOpsMkdirPost(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMkdirFilesystemSystemNameOpsMkdirPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRmFilesystemSystemNameOpsRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRmFilesystemSystemNameOpsRmDeleteRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatFilesystemSystemNameOpsStatGet(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatFilesystemSystemNameOpsStatGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSymlinkFilesystemSystemNameOpsSymlinkPost(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTailFilesystemSystemNameOpsTailGet(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTailFilesystemSystemNameOpsTailGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadFilesystemSystemNameOpsUploadPostWithBody(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadFilesystemSystemNameOpsUploadPostRequestWithBody(c.Server, systemName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewFilesystemSystemNameOpsViewGet(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewFilesystemSystemNameOpsViewGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressFilesystemSystemNameTransferCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressFilesystemSystemNameTransferCompressPost(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressFilesystemSystemNameTransferCompressPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCpFilesystemSystemNameTransferCpPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCpFilesystemSystemNameTransferCpPost(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCpFilesystemSystemNameTransferCpPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDownloadFilesystemSystemNameTransferDownloadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDownloadFilesystemSystemNameTransferDownloadPost(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDownloadFilesystemSystemNameTransferDownloadPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractFilesystemSystemNameTransferExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractFilesystemSystemNameTransferExtractPost(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractFilesystemSystemNameTransferExtractPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMvFilesystemSystemNameTransferMvPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMvFilesystemSystemNameTransferMvPost(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMvFilesystemSystemNameTransferMvPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRmFilesystemSystemNameTransferRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRmFilesystemSystemNameTransferRmDeleteRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadFilesystemSystemNameTransferUploadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadFilesystemSystemNameTransferUploadPost(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadFilesystemSystemNameTransferUploadPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLivenessStatusLivenessGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLivenessStatusLivenessGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemsStatusSystemsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemsStatusSystemsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNodesStatusSystemNameNodesGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNodesStatusSystemNameNodesGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemPartitionsStatusSystemNamePartitionsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemPartitionsStatusSystemNamePartitionsGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemReservationsStatusSystemNameReservationsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemReservationsStatusSystemNameReservationsGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserinfoStatusSystemNameUserinfoGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserinfoStatusSystemNameUserinfoGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetJobsComputeSystemNameJobsGetRequest generates requests for GetJobsComputeSystemNameJobsGet
func NewGetJobsComputeSystemNameJobsGetRequest(server string, systemName string, params *GetJobsComputeSystemNameJobsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Allusers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allusers", runtime.ParamLocationQuery, *params.Allusers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJobSubmitComputeSystemNameJobsPostRequest calls the generic PostJobSubmitComputeSystemNameJobsPost builder with application/json body
func NewPostJobSubmitComputeSystemNameJobsPostRequest(server string, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody generates requests for PostJobSubmitComputeSystemNameJobsPost with any type of body
func NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobCancelComputeSystemNameJobsJobIdDeleteRequest generates requests for DeleteJobCancelComputeSystemNameJobsJobIdDelete
func NewDeleteJobCancelComputeSystemNameJobsJobIdDeleteRequest(server string, systemName string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobComputeSystemNameJobsJobIdGetRequest generates requests for GetJobComputeSystemNameJobsJobIdGet
func NewGetJobComputeSystemNameJobsJobIdGetRequest(server string, systemName string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachComputeSystemNameJobsJobIdAttachPutRequest calls the generic AttachComputeSystemNameJobsJobIdAttachPut builder with application/json body
func NewAttachComputeSystemNameJobsJobIdAttachPutRequest(server string, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody(server, systemName, jobId, "application/json", bodyReader)
}

// NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody generates requests for AttachComputeSystemNameJobsJobIdAttachPut with any type of body
func NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody(server string, systemName string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s/attach", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobMetadataComputeSystemNameJobsJobIdMetadataGetRequest generates requests for GetJobMetadataComputeSystemNameJobsJobIdMetadataGet
func NewGetJobMetadataComputeSystemNameJobsJobIdMetadataGetRequest(server string, systemName string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s/metadata", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChecksumFilesystemSystemNameOpsChecksumGetRequest generates requests for GetChecksumFilesystemSystemNameOpsChecksumGet
func NewGetChecksumFilesystemSystemNameOpsChecksumGetRequest(server string, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/checksum", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChmodFilesystemSystemNameOpsChmodPutRequest calls the generic PutChmodFilesystemSystemNameOpsChmodPut builder with application/json body
func NewPutChmodFilesystemSystemNameOpsChmodPutRequest(server string, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody generates requests for PutChmodFilesystemSystemNameOpsChmodPut with any type of body
func NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/chmod", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutChownFilesystemSystemNameOpsChownPutRequest calls the generic PutChownFilesystemSystemNameOpsChownPut builder with application/json body
func NewPutChownFilesystemSystemNameOpsChownPutRequest(server string, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody generates requests for PutChownFilesystemSystemNameOpsChownPut with any type of body
func NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/chown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCompressFilesystemSystemNameOpsCompressPostRequest calls the generic PostCompressFilesystemSystemNameOpsCompressPost builder with application/json body
func NewPostCompressFilesystemSystemNameOpsCompressPostRequest(server string, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody generates requests for PostCompressFilesystemSystemNameOpsCompressPost with any type of body
func NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/compress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDownloadFilesystemSystemNameOpsDownloadGetRequest generates requests for GetDownloadFilesystemSystemNameOpsDownloadGet
func NewGetDownloadFilesystemSystemNameOpsDownloadGetRequest(server string, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExtractFilesystemSystemNameOpsExtractPostRequest calls the generic PostExtractFilesystemSystemNameOpsExtractPost builder with application/json body
func NewPostExtractFilesystemSystemNameOpsExtractPostRequest(server string, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody generates requests for PostExtractFilesystemSystemNameOpsExtractPost with any type of body
func NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFileFilesystemSystemNameOpsFileGetRequest generates requests for GetFileFilesystemSystemNameOpsFileGet
func NewGetFileFilesystemSystemNameOpsFileGetRequest(server string, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/file", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeadFilesystemSystemNameOpsHeadGetRequest generates requests for GetHeadFilesystemSystemNameOpsHeadGet
func NewGetHeadFilesystemSystemNameOpsHeadGetRequest(server string, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/head", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Bytes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bytes", runtime.ParamLocationQuery, *params.Bytes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipTrailing != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipTrailing", runtime.ParamLocationQuery, *params.SkipTrailing); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLsFilesystemSystemNameOpsLsGetRequest generates requests for GetLsFilesystemSystemNameOpsLsGet
func NewGetLsFilesystemSystemNameOpsLsGetRequest(server string, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/ls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ShowHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showHidden", runtime.ParamLocationQuery, *params.ShowHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumericUid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numericUid", runtime.ParamLocationQuery, *params.NumericUid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recursive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dereference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dereference", runtime.ParamLocationQuery, *params.Dereference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMkdirFilesystemSystemNameOpsMkdirPostRequest calls the generic PostMkdirFilesystemSystemNameOpsMkdirPost builder with application/json body
func NewPostMkdirFilesystemSystemNameOpsMkdirPostRequest(server string, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody generates requests for PostMkdirFilesystemSystemNameOpsMkdirPost with any type of body
func NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/mkdir", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRmFilesystemSystemNameOpsRmDeleteRequest generates requests for DeleteRmFilesystemSystemNameOpsRmDelete
func NewDeleteRmFilesystemSystemNameOpsRmDeleteRequest(server string, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/rm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatFilesystemSystemNameOpsStatGetRequest generates requests for GetStatFilesystemSystemNameOpsStatGet
func NewGetStatFilesystemSystemNameOpsStatGetRequest(server string, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/stat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Dereference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dereference", runtime.ParamLocationQuery, *params.Dereference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequest calls the generic PostSymlinkFilesystemSystemNameOpsSymlinkPost builder with application/json body
func NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequest(server string, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody generates requests for PostSymlinkFilesystemSystemNameOpsSymlinkPost with any type of body
func NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/symlink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTailFilesystemSystemNameOpsTailGetRequest generates requests for GetTailFilesystemSystemNameOpsTailGet
func NewGetTailFilesystemSystemNameOpsTailGetRequest(server string, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/tail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Bytes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bytes", runtime.ParamLocationQuery, *params.Bytes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipHeading != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipHeading", runtime.ParamLocationQuery, *params.SkipHeading); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUploadFilesystemSystemNameOpsUploadPostRequestWithBody generates requests for PostUploadFilesystemSystemNameOpsUploadPost with any type of body
func NewPostUploadFilesystemSystemNameOpsUploadPostRequestWithBody(server string, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetViewFilesystemSystemNameOpsViewGetRequest generates requests for GetViewFilesystemSystemNameOpsViewGet
func NewGetViewFilesystemSystemNameOpsViewGetRequest(server string, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/view", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompressFilesystemSystemNameTransferCompressPostRequest calls the generic CompressFilesystemSystemNameTransferCompressPost builder with application/json body
func NewCompressFilesystemSystemNameTransferCompressPostRequest(server string, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody generates requests for CompressFilesystemSystemNameTransferCompressPost with any type of body
func NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/compress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCpFilesystemSystemNameTransferCpPostRequest calls the generic PostCpFilesystemSystemNameTransferCpPost builder with application/json body
func NewPostCpFilesystemSystemNameTransferCpPostRequest(server string, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody generates requests for PostCpFilesystemSystemNameTransferCpPost with any type of body
func NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/cp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDownloadFilesystemSystemNameTransferDownloadPostRequest calls the generic PostDownloadFilesystemSystemNameTransferDownloadPost builder with application/json body
func NewPostDownloadFilesystemSystemNameTransferDownloadPostRequest(server string, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody generates requests for PostDownloadFilesystemSystemNameTransferDownloadPost with any type of body
func NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtractFilesystemSystemNameTransferExtractPostRequest calls the generic ExtractFilesystemSystemNameTransferExtractPost builder with application/json body
func NewExtractFilesystemSystemNameTransferExtractPostRequest(server string, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody generates requests for ExtractFilesystemSystemNameTransferExtractPost with any type of body
func NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveMvFilesystemSystemNameTransferMvPostRequest calls the generic MoveMvFilesystemSystemNameTransferMvPost builder with application/json body
func NewMoveMvFilesystemSystemNameTransferMvPostRequest(server string, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody generates requests for MoveMvFilesystemSystemNameTransferMvPost with any type of body
func NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/mv", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRmFilesystemSystemNameTransferRmDeleteRequest generates requests for DeleteRmFilesystemSystemNameTransferRmDelete
func NewDeleteRmFilesystemSystemNameTransferRmDeleteRequest(server string, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/rm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUploadFilesystemSystemNameTransferUploadPostRequest calls the generic PostUploadFilesystemSystemNameTransferUploadPost builder with application/json body
func NewPostUploadFilesystemSystemNameTransferUploadPostRequest(server string, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody generates requests for PostUploadFilesystemSystemNameTransferUploadPost with any type of body
func NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLivenessStatusLivenessGetRequest generates requests for GetLivenessStatusLivenessGet
func NewGetLivenessStatusLivenessGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/liveness/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemsStatusSystemsGetRequest generates requests for GetSystemsStatusSystemsGet
func NewGetSystemsStatusSystemsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemNodesStatusSystemNameNodesGetRequest generates requests for GetSystemNodesStatusSystemNameNodesGet
func NewGetSystemNodesStatusSystemNameNodesGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemPartitionsStatusSystemNamePartitionsGetRequest generates requests for GetSystemPartitionsStatusSystemNamePartitionsGet
func NewGetSystemPartitionsStatusSystemNamePartitionsGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/partitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemReservationsStatusSystemNameReservationsGetRequest generates requests for GetSystemReservationsStatusSystemNameReservationsGet
func NewGetSystemReservationsStatusSystemNameReservationsGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserinfoStatusSystemNameUserinfoGetRequest generates requests for GetUserinfoStatusSystemNameUserinfoGet
func NewGetUserinfoStatusSystemNameUserinfoGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/userinfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetJobsComputeSystemNameJobsGetWithResponse request
	GetJobsComputeSystemNameJobsGetWithResponse(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*GetJobsComputeSystemNameJobsGetResponse, error)

	// PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse request with any body
	PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error)

	PostJobSubmitComputeSystemNameJobsPostWithResponse(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error)

	// DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse request
	DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse, error)

	// GetJobComputeSystemNameJobsJobIdGetWithResponse request
	GetJobComputeSystemNameJobsJobIdGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobComputeSystemNameJobsJobIdGetResponse, error)

	// AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse request with any body
	AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error)

	AttachComputeSystemNameJobsJobIdAttachPutWithResponse(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error)

	// GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse request
	GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse, error)

	// GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse request
	GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*GetChecksumFilesystemSystemNameOpsChecksumGetResponse, error)

	// PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse request with any body
	PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error)

	PutChmodFilesystemSystemNameOpsChmodPutWithResponse(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error)

	// PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse request with any body
	PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error)

	PutChownFilesystemSystemNameOpsChownPutWithResponse(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error)

	// PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse request with any body
	PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error)

	PostCompressFilesystemSystemNameOpsCompressPostWithResponse(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error)

	// GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse request
	GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*GetDownloadFilesystemSystemNameOpsDownloadGetResponse, error)

	// PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse request with any body
	PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error)

	PostExtractFilesystemSystemNameOpsExtractPostWithResponse(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error)

	// GetFileFilesystemSystemNameOpsFileGetWithResponse request
	GetFileFilesystemSystemNameOpsFileGetWithResponse(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*GetFileFilesystemSystemNameOpsFileGetResponse, error)

	// GetHeadFilesystemSystemNameOpsHeadGetWithResponse request
	GetHeadFilesystemSystemNameOpsHeadGetWithResponse(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*GetHeadFilesystemSystemNameOpsHeadGetResponse, error)

	// GetLsFilesystemSystemNameOpsLsGetWithResponse request
	GetLsFilesystemSystemNameOpsLsGetWithResponse(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*GetLsFilesystemSystemNameOpsLsGetResponse, error)

	// PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse request with any body
	PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error)

	PostMkdirFilesystemSystemNameOpsMkdirPostWithResponse(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error)

	// DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse request
	DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameOpsRmDeleteResponse, error)

	// GetStatFilesystemSystemNameOpsStatGetWithResponse request
	GetStatFilesystemSystemNameOpsStatGetWithResponse(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*GetStatFilesystemSystemNameOpsStatGetResponse, error)

	// PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse request with any body
	PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error)

	PostSymlinkFilesystemSystemNameOpsSymlinkPostWithResponse(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error)

	// GetTailFilesystemSystemNameOpsTailGetWithResponse request
	GetTailFilesystemSystemNameOpsTailGetWithResponse(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*GetTailFilesystemSystemNameOpsTailGetResponse, error)

	// PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse request with any body
	PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameOpsUploadPostResponse, error)

	// GetViewFilesystemSystemNameOpsViewGetWithResponse request
	GetViewFilesystemSystemNameOpsViewGetWithResponse(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*GetViewFilesystemSystemNameOpsViewGetResponse, error)

	// CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse request with any body
	CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error)

	CompressFilesystemSystemNameTransferCompressPostWithResponse(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error)

	// PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse request with any body
	PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error)

	PostCpFilesystemSystemNameTransferCpPostWithResponse(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error)

	// PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse request with any body
	PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error)

	PostDownloadFilesystemSystemNameTransferDownloadPostWithResponse(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error)

	// ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse request with any body
	ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error)

	ExtractFilesystemSystemNameTransferExtractPostWithResponse(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error)

	// MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse request with any body
	MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error)

	MoveMvFilesystemSystemNameTransferMvPostWithResponse(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error)

	// DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse request
	DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameTransferRmDeleteResponse, error)

	// PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse request with any body
	PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error)

	PostUploadFilesystemSystemNameTransferUploadPostWithResponse(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error)

	// GetLivenessStatusLivenessGetWithResponse request
	GetLivenessStatusLivenessGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLivenessStatusLivenessGetResponse, error)

	// GetSystemsStatusSystemsGetWithResponse request
	GetSystemsStatusSystemsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemsStatusSystemsGetResponse, error)

	// GetSystemNodesStatusSystemNameNodesGetWithResponse request
	GetSystemNodesStatusSystemNameNodesGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemNodesStatusSystemNameNodesGetResponse, error)

	// GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse request
	GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemPartitionsStatusSystemNamePartitionsGetResponse, error)

	// GetSystemReservationsStatusSystemNameReservationsGetWithResponse request
	GetSystemReservationsStatusSystemNameReservationsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemReservationsStatusSystemNameReservationsGetResponse, error)

	// GetUserinfoStatusSystemNameUserinfoGetWithResponse request
	GetUserinfoStatusSystemNameUserinfoGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetUserinfoStatusSystemNameUserinfoGetResponse, error)
}

type GetJobsComputeSystemNameJobsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJobResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetJobsComputeSystemNameJobsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsComputeSystemNameJobsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobSubmitComputeSystemNameJobsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostJobSubmissionResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostJobSubmitComputeSystemNameJobsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobSubmitComputeSystemNameJobsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobComputeSystemNameJobsJobIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJobResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetJobComputeSystemNameJobsJobIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobComputeSystemNameJobsJobIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachComputeSystemNameJobsJobIdAttachPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r AttachComputeSystemNameJobsJobIdAttachPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachComputeSystemNameJobsJobIdAttachPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJobMetadataResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChecksumFilesystemSystemNameOpsChecksumGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileChecksumResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetChecksumFilesystemSystemNameOpsChecksumGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChecksumFilesystemSystemNameOpsChecksumGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChmodFilesystemSystemNameOpsChmodPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PutFileChmodResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PutChmodFilesystemSystemNameOpsChmodPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChmodFilesystemSystemNameOpsChmodPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChownFilesystemSystemNameOpsChownPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PutFileChownResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PutChownFilesystemSystemNameOpsChownPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChownFilesystemSystemNameOpsChownPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCompressFilesystemSystemNameOpsCompressPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostCompressFilesystemSystemNameOpsCompressPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCompressFilesystemSystemNameOpsCompressPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDownloadFilesystemSystemNameOpsDownloadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetDownloadFilesystemSystemNameOpsDownloadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDownloadFilesystemSystemNameOpsDownloadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExtractFilesystemSystemNameOpsExtractPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostExtractFilesystemSystemNameOpsExtractPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExtractFilesystemSystemNameOpsExtractPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileFilesystemSystemNameOpsFileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileTypeResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetFileFilesystemSystemNameOpsFileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileFilesystemSystemNameOpsFileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeadFilesystemSystemNameOpsHeadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileHeadResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetHeadFilesystemSystemNameOpsHeadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeadFilesystemSystemNameOpsHeadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLsFilesystemSystemNameOpsLsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDirectoryLsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetLsFilesystemSystemNameOpsLsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLsFilesystemSystemNameOpsLsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMkdirFilesystemSystemNameOpsMkdirPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostMkdirResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostMkdirFilesystemSystemNameOpsMkdirPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMkdirFilesystemSystemNameOpsMkdirPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRmFilesystemSystemNameOpsRmDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteRmFilesystemSystemNameOpsRmDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRmFilesystemSystemNameOpsRmDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatFilesystemSystemNameOpsStatGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileStatResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetStatFilesystemSystemNameOpsStatGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatFilesystemSystemNameOpsStatGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostFileSymlinkResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTailFilesystemSystemNameOpsTailGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileTailResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetTailFilesystemSystemNameOpsTailGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTailFilesystemSystemNameOpsTailGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadFilesystemSystemNameOpsUploadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostUploadFilesystemSystemNameOpsUploadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadFilesystemSystemNameOpsUploadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewFilesystemSystemNameOpsViewGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetViewFileResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetViewFilesystemSystemNameOpsViewGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewFilesystemSystemNameOpsViewGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompressFilesystemSystemNameTransferCompressPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompressResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r CompressFilesystemSystemNameTransferCompressPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompressFilesystemSystemNameTransferCompressPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCpFilesystemSystemNameTransferCpPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CopyResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostCpFilesystemSystemNameTransferCpPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCpFilesystemSystemNameTransferCpPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDownloadFilesystemSystemNameTransferDownloadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DownloadFileResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostDownloadFilesystemSystemNameTransferDownloadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDownloadFilesystemSystemNameTransferDownloadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtractFilesystemSystemNameTransferExtractPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExtractResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r ExtractFilesystemSystemNameTransferExtractPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtractFilesystemSystemNameTransferExtractPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveMvFilesystemSystemNameTransferMvPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MoveResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r MoveMvFilesystemSystemNameTransferMvPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveMvFilesystemSystemNameTransferMvPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRmFilesystemSystemNameTransferRmDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteRmFilesystemSystemNameTransferRmDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRmFilesystemSystemNameTransferRmDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadFilesystemSystemNameTransferUploadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UploadFileResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostUploadFilesystemSystemNameTransferUploadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadFilesystemSystemNameTransferUploadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLivenessStatusLivenessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetLiveness
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetLivenessStatusLivenessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLivenessStatusLivenessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemsStatusSystemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSystemsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemsStatusSystemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemsStatusSystemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNodesStatusSystemNameNodesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetNodesResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemNodesStatusSystemNameNodesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNodesStatusSystemNameNodesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemPartitionsStatusSystemNamePartitionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPartitionsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemPartitionsStatusSystemNamePartitionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemPartitionsStatusSystemNamePartitionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemReservationsStatusSystemNameReservationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetReservationsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemReservationsStatusSystemNameReservationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemReservationsStatusSystemNameReservationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserinfoStatusSystemNameUserinfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInfoResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetUserinfoStatusSystemNameUserinfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserinfoStatusSystemNameUserinfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetJobsComputeSystemNameJobsGetWithResponse request returning *GetJobsComputeSystemNameJobsGetResponse
func (c *ClientWithResponses) GetJobsComputeSystemNameJobsGetWithResponse(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*GetJobsComputeSystemNameJobsGetResponse, error) {
	rsp, err := c.GetJobsComputeSystemNameJobsGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsComputeSystemNameJobsGetResponse(rsp)
}

// PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse request with arbitrary body returning *PostJobSubmitComputeSystemNameJobsPostResponse
func (c *ClientWithResponses) PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error) {
	rsp, err := c.PostJobSubmitComputeSystemNameJobsPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobSubmitComputeSystemNameJobsPostResponse(rsp)
}

func (c *ClientWithResponses) PostJobSubmitComputeSystemNameJobsPostWithResponse(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error) {
	rsp, err := c.PostJobSubmitComputeSystemNameJobsPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobSubmitComputeSystemNameJobsPostResponse(rsp)
}

// DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse request returning *DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse
func (c *ClientWithResponses) DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse, error) {
	rsp, err := c.DeleteJobCancelComputeSystemNameJobsJobIdDelete(ctx, systemName, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse(rsp)
}

// GetJobComputeSystemNameJobsJobIdGetWithResponse request returning *GetJobComputeSystemNameJobsJobIdGetResponse
func (c *ClientWithResponses) GetJobComputeSystemNameJobsJobIdGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobComputeSystemNameJobsJobIdGetResponse, error) {
	rsp, err := c.GetJobComputeSystemNameJobsJobIdGet(ctx, systemName, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobComputeSystemNameJobsJobIdGetResponse(rsp)
}

// AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse request with arbitrary body returning *AttachComputeSystemNameJobsJobIdAttachPutResponse
func (c *ClientWithResponses) AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error) {
	rsp, err := c.AttachComputeSystemNameJobsJobIdAttachPutWithBody(ctx, systemName, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachComputeSystemNameJobsJobIdAttachPutResponse(rsp)
}

func (c *ClientWithResponses) AttachComputeSystemNameJobsJobIdAttachPutWithResponse(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error) {
	rsp, err := c.AttachComputeSystemNameJobsJobIdAttachPut(ctx, systemName, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachComputeSystemNameJobsJobIdAttachPutResponse(rsp)
}

// GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse request returning *GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse
func (c *ClientWithResponses) GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse, error) {
	rsp, err := c.GetJobMetadataComputeSystemNameJobsJobIdMetadataGet(ctx, systemName, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse(rsp)
}

// GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse request returning *GetChecksumFilesystemSystemNameOpsChecksumGetResponse
func (c *ClientWithResponses) GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*GetChecksumFilesystemSystemNameOpsChecksumGetResponse, error) {
	rsp, err := c.GetChecksumFilesystemSystemNameOpsChecksumGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChecksumFilesystemSystemNameOpsChecksumGetResponse(rsp)
}

// PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse request with arbitrary body returning *PutChmodFilesystemSystemNameOpsChmodPutResponse
func (c *ClientWithResponses) PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error) {
	rsp, err := c.PutChmodFilesystemSystemNameOpsChmodPutWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChmodFilesystemSystemNameOpsChmodPutResponse(rsp)
}

func (c *ClientWithResponses) PutChmodFilesystemSystemNameOpsChmodPutWithResponse(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error) {
	rsp, err := c.PutChmodFilesystemSystemNameOpsChmodPut(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChmodFilesystemSystemNameOpsChmodPutResponse(rsp)
}

// PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse request with arbitrary body returning *PutChownFilesystemSystemNameOpsChownPutResponse
func (c *ClientWithResponses) PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error) {
	rsp, err := c.PutChownFilesystemSystemNameOpsChownPutWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChownFilesystemSystemNameOpsChownPutResponse(rsp)
}

func (c *ClientWithResponses) PutChownFilesystemSystemNameOpsChownPutWithResponse(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error) {
	rsp, err := c.PutChownFilesystemSystemNameOpsChownPut(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChownFilesystemSystemNameOpsChownPutResponse(rsp)
}

// PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse request with arbitrary body returning *PostCompressFilesystemSystemNameOpsCompressPostResponse
func (c *ClientWithResponses) PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error) {
	rsp, err := c.PostCompressFilesystemSystemNameOpsCompressPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompressFilesystemSystemNameOpsCompressPostResponse(rsp)
}

func (c *ClientWithResponses) PostCompressFilesystemSystemNameOpsCompressPostWithResponse(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error) {
	rsp, err := c.PostCompressFilesystemSystemNameOpsCompressPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompressFilesystemSystemNameOpsCompressPostResponse(rsp)
}

// GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse request returning *GetDownloadFilesystemSystemNameOpsDownloadGetResponse
func (c *ClientWithResponses) GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*GetDownloadFilesystemSystemNameOpsDownloadGetResponse, error) {
	rsp, err := c.GetDownloadFilesystemSystemNameOpsDownloadGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadFilesystemSystemNameOpsDownloadGetResponse(rsp)
}

// PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse request with arbitrary body returning *PostExtractFilesystemSystemNameOpsExtractPostResponse
func (c *ClientWithResponses) PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error) {
	rsp, err := c.PostExtractFilesystemSystemNameOpsExtractPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExtractFilesystemSystemNameOpsExtractPostResponse(rsp)
}

func (c *ClientWithResponses) PostExtractFilesystemSystemNameOpsExtractPostWithResponse(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error) {
	rsp, err := c.PostExtractFilesystemSystemNameOpsExtractPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExtractFilesystemSystemNameOpsExtractPostResponse(rsp)
}

// GetFileFilesystemSystemNameOpsFileGetWithResponse request returning *GetFileFilesystemSystemNameOpsFileGetResponse
func (c *ClientWithResponses) GetFileFilesystemSystemNameOpsFileGetWithResponse(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*GetFileFilesystemSystemNameOpsFileGetResponse, error) {
	rsp, err := c.GetFileFilesystemSystemNameOpsFileGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileFilesystemSystemNameOpsFileGetResponse(rsp)
}

// GetHeadFilesystemSystemNameOpsHeadGetWithResponse request returning *GetHeadFilesystemSystemNameOpsHeadGetResponse
func (c *ClientWithResponses) GetHeadFilesystemSystemNameOpsHeadGetWithResponse(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*GetHeadFilesystemSystemNameOpsHeadGetResponse, error) {
	rsp, err := c.GetHeadFilesystemSystemNameOpsHeadGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadFilesystemSystemNameOpsHeadGetResponse(rsp)
}

// GetLsFilesystemSystemNameOpsLsGetWithResponse request returning *GetLsFilesystemSystemNameOpsLsGetResponse
func (c *ClientWithResponses) GetLsFilesystemSystemNameOpsLsGetWithResponse(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*GetLsFilesystemSystemNameOpsLsGetResponse, error) {
	rsp, err := c.GetLsFilesystemSystemNameOpsLsGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLsFilesystemSystemNameOpsLsGetResponse(rsp)
}

// PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse request with arbitrary body returning *PostMkdirFilesystemSystemNameOpsMkdirPostResponse
func (c *ClientWithResponses) PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error) {
	rsp, err := c.PostMkdirFilesystemSystemNameOpsMkdirPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse(rsp)
}

func (c *ClientWithResponses) PostMkdirFilesystemSystemNameOpsMkdirPostWithResponse(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error) {
	rsp, err := c.PostMkdirFilesystemSystemNameOpsMkdirPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse(rsp)
}

// DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse request returning *DeleteRmFilesystemSystemNameOpsRmDeleteResponse
func (c *ClientWithResponses) DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameOpsRmDeleteResponse, error) {
	rsp, err := c.DeleteRmFilesystemSystemNameOpsRmDelete(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRmFilesystemSystemNameOpsRmDeleteResponse(rsp)
}

// GetStatFilesystemSystemNameOpsStatGetWithResponse request returning *GetStatFilesystemSystemNameOpsStatGetResponse
func (c *ClientWithResponses) GetStatFilesystemSystemNameOpsStatGetWithResponse(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*GetStatFilesystemSystemNameOpsStatGetResponse, error) {
	rsp, err := c.GetStatFilesystemSystemNameOpsStatGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatFilesystemSystemNameOpsStatGetResponse(rsp)
}

// PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse request with arbitrary body returning *PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse
func (c *ClientWithResponses) PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error) {
	rsp, err := c.PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse(rsp)
}

func (c *ClientWithResponses) PostSymlinkFilesystemSystemNameOpsSymlinkPostWithResponse(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error) {
	rsp, err := c.PostSymlinkFilesystemSystemNameOpsSymlinkPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse(rsp)
}

// GetTailFilesystemSystemNameOpsTailGetWithResponse request returning *GetTailFilesystemSystemNameOpsTailGetResponse
func (c *ClientWithResponses) GetTailFilesystemSystemNameOpsTailGetWithResponse(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*GetTailFilesystemSystemNameOpsTailGetResponse, error) {
	rsp, err := c.GetTailFilesystemSystemNameOpsTailGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTailFilesystemSystemNameOpsTailGetResponse(rsp)
}

// PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse request with arbitrary body returning *PostUploadFilesystemSystemNameOpsUploadPostResponse
func (c *ClientWithResponses) PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameOpsUploadPostResponse, error) {
	rsp, err := c.PostUploadFilesystemSystemNameOpsUploadPostWithBody(ctx, systemName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadFilesystemSystemNameOpsUploadPostResponse(rsp)
}

// GetViewFilesystemSystemNameOpsViewGetWithResponse request returning *GetViewFilesystemSystemNameOpsViewGetResponse
func (c *ClientWithResponses) GetViewFilesystemSystemNameOpsViewGetWithResponse(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*GetViewFilesystemSystemNameOpsViewGetResponse, error) {
	rsp, err := c.GetViewFilesystemSystemNameOpsViewGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewFilesystemSystemNameOpsViewGetResponse(rsp)
}

// CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse request with arbitrary body returning *CompressFilesystemSystemNameTransferCompressPostResponse
func (c *ClientWithResponses) CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error) {
	rsp, err := c.CompressFilesystemSystemNameTransferCompressPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressFilesystemSystemNameTransferCompressPostResponse(rsp)
}

func (c *ClientWithResponses) CompressFilesystemSystemNameTransferCompressPostWithResponse(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error) {
	rsp, err := c.CompressFilesystemSystemNameTransferCompressPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressFilesystemSystemNameTransferCompressPostResponse(rsp)
}

// PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse request with arbitrary body returning *PostCpFilesystemSystemNameTransferCpPostResponse
func (c *ClientWithResponses) PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error) {
	rsp, err := c.PostCpFilesystemSystemNameTransferCpPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCpFilesystemSystemNameTransferCpPostResponse(rsp)
}

func (c *ClientWithResponses) PostCpFilesystemSystemNameTransferCpPostWithResponse(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error) {
	rsp, err := c.PostCpFilesystemSystemNameTransferCpPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCpFilesystemSystemNameTransferCpPostResponse(rsp)
}

// PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse request with arbitrary body returning *PostDownloadFilesystemSystemNameTransferDownloadPostResponse
func (c *ClientWithResponses) PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error) {
	rsp, err := c.PostDownloadFilesystemSystemNameTransferDownloadPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse(rsp)
}

func (c *ClientWithResponses) PostDownloadFilesystemSystemNameTransferDownloadPostWithResponse(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error) {
	rsp, err := c.PostDownloadFilesystemSystemNameTransferDownloadPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse(rsp)
}

// ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse request with arbitrary body returning *ExtractFilesystemSystemNameTransferExtractPostResponse
func (c *ClientWithResponses) ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error) {
	rsp, err := c.ExtractFilesystemSystemNameTransferExtractPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractFilesystemSystemNameTransferExtractPostResponse(rsp)
}

func (c *ClientWithResponses) ExtractFilesystemSystemNameTransferExtractPostWithResponse(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error) {
	rsp, err := c.ExtractFilesystemSystemNameTransferExtractPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractFilesystemSystemNameTransferExtractPostResponse(rsp)
}

// MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse request with arbitrary body returning *MoveMvFilesystemSystemNameTransferMvPostResponse
func (c *ClientWithResponses) MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error) {
	rsp, err := c.MoveMvFilesystemSystemNameTransferMvPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMvFilesystemSystemNameTransferMvPostResponse(rsp)
}

func (c *ClientWithResponses) MoveMvFilesystemSystemNameTransferMvPostWithResponse(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error) {
	rsp, err := c.MoveMvFilesystemSystemNameTransferMvPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMvFilesystemSystemNameTransferMvPostResponse(rsp)
}

// DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse request returning *DeleteRmFilesystemSystemNameTransferRmDeleteResponse
func (c *ClientWithResponses) DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameTransferRmDeleteResponse, error) {
	rsp, err := c.DeleteRmFilesystemSystemNameTransferRmDelete(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRmFilesystemSystemNameTransferRmDeleteResponse(rsp)
}

// PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse request with arbitrary body returning *PostUploadFilesystemSystemNameTransferUploadPostResponse
func (c *ClientWithResponses) PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error) {
	rsp, err := c.PostUploadFilesystemSystemNameTransferUploadPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadFilesystemSystemNameTransferUploadPostResponse(rsp)
}

func (c *ClientWithResponses) PostUploadFilesystemSystemNameTransferUploadPostWithResponse(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error) {
	rsp, err := c.PostUploadFilesystemSystemNameTransferUploadPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadFilesystemSystemNameTransferUploadPostResponse(rsp)
}

// GetLivenessStatusLivenessGetWithResponse request returning *GetLivenessStatusLivenessGetResponse
func (c *ClientWithResponses) GetLivenessStatusLivenessGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLivenessStatusLivenessGetResponse, error) {
	rsp, err := c.GetLivenessStatusLivenessGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLivenessStatusLivenessGetResponse(rsp)
}

// GetSystemsStatusSystemsGetWithResponse request returning *GetSystemsStatusSystemsGetResponse
func (c *ClientWithResponses) GetSystemsStatusSystemsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemsStatusSystemsGetResponse, error) {
	rsp, err := c.GetSystemsStatusSystemsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemsStatusSystemsGetResponse(rsp)
}

// GetSystemNodesStatusSystemNameNodesGetWithResponse request returning *GetSystemNodesStatusSystemNameNodesGetResponse
func (c *ClientWithResponses) GetSystemNodesStatusSystemNameNodesGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemNodesStatusSystemNameNodesGetResponse, error) {
	rsp, err := c.GetSystemNodesStatusSystemNameNodesGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNodesStatusSystemNameNodesGetResponse(rsp)
}

// GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse request returning *GetSystemPartitionsStatusSystemNamePartitionsGetResponse
func (c *ClientWithResponses) GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemPartitionsStatusSystemNamePartitionsGetResponse, error) {
	rsp, err := c.GetSystemPartitionsStatusSystemNamePartitionsGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemPartitionsStatusSystemNamePartitionsGetResponse(rsp)
}

// GetSystemReservationsStatusSystemNameReservationsGetWithResponse request returning *GetSystemReservationsStatusSystemNameReservationsGetResponse
func (c *ClientWithResponses) GetSystemReservationsStatusSystemNameReservationsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemReservationsStatusSystemNameReservationsGetResponse, error) {
	rsp, err := c.GetSystemReservationsStatusSystemNameReservationsGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemReservationsStatusSystemNameReservationsGetResponse(rsp)
}

// GetUserinfoStatusSystemNameUserinfoGetWithResponse request returning *GetUserinfoStatusSystemNameUserinfoGetResponse
func (c *ClientWithResponses) GetUserinfoStatusSystemNameUserinfoGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetUserinfoStatusSystemNameUserinfoGetResponse, error) {
	rsp, err := c.GetUserinfoStatusSystemNameUserinfoGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserinfoStatusSystemNameUserinfoGetResponse(rsp)
}

// ParseGetJobsComputeSystemNameJobsGetResponse parses an HTTP response from a GetJobsComputeSystemNameJobsGetWithResponse call
func ParseGetJobsComputeSystemNameJobsGetResponse(rsp *http.Response) (*GetJobsComputeSystemNameJobsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsComputeSystemNameJobsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostJobSubmitComputeSystemNameJobsPostResponse parses an HTTP response from a PostJobSubmitComputeSystemNameJobsPostWithResponse call
func ParsePostJobSubmitComputeSystemNameJobsPostResponse(rsp *http.Response) (*PostJobSubmitComputeSystemNameJobsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobSubmitComputeSystemNameJobsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostJobSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse parses an HTTP response from a DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse call
func ParseDeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse(rsp *http.Response) (*DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetJobComputeSystemNameJobsJobIdGetResponse parses an HTTP response from a GetJobComputeSystemNameJobsJobIdGetWithResponse call
func ParseGetJobComputeSystemNameJobsJobIdGetResponse(rsp *http.Response) (*GetJobComputeSystemNameJobsJobIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobComputeSystemNameJobsJobIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseAttachComputeSystemNameJobsJobIdAttachPutResponse parses an HTTP response from a AttachComputeSystemNameJobsJobIdAttachPutWithResponse call
func ParseAttachComputeSystemNameJobsJobIdAttachPutResponse(rsp *http.Response) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachComputeSystemNameJobsJobIdAttachPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse parses an HTTP response from a GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse call
func ParseGetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse(rsp *http.Response) (*GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJobMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetChecksumFilesystemSystemNameOpsChecksumGetResponse parses an HTTP response from a GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse call
func ParseGetChecksumFilesystemSystemNameOpsChecksumGetResponse(rsp *http.Response) (*GetChecksumFilesystemSystemNameOpsChecksumGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChecksumFilesystemSystemNameOpsChecksumGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileChecksumResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutChmodFilesystemSystemNameOpsChmodPutResponse parses an HTTP response from a PutChmodFilesystemSystemNameOpsChmodPutWithResponse call
func ParsePutChmodFilesystemSystemNameOpsChmodPutResponse(rsp *http.Response) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChmodFilesystemSystemNameOpsChmodPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutFileChmodResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutChownFilesystemSystemNameOpsChownPutResponse parses an HTTP response from a PutChownFilesystemSystemNameOpsChownPutWithResponse call
func ParsePutChownFilesystemSystemNameOpsChownPutResponse(rsp *http.Response) (*PutChownFilesystemSystemNameOpsChownPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChownFilesystemSystemNameOpsChownPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutFileChownResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostCompressFilesystemSystemNameOpsCompressPostResponse parses an HTTP response from a PostCompressFilesystemSystemNameOpsCompressPostWithResponse call
func ParsePostCompressFilesystemSystemNameOpsCompressPostResponse(rsp *http.Response) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCompressFilesystemSystemNameOpsCompressPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDownloadFilesystemSystemNameOpsDownloadGetResponse parses an HTTP response from a GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse call
func ParseGetDownloadFilesystemSystemNameOpsDownloadGetResponse(rsp *http.Response) (*GetDownloadFilesystemSystemNameOpsDownloadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDownloadFilesystemSystemNameOpsDownloadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostExtractFilesystemSystemNameOpsExtractPostResponse parses an HTTP response from a PostExtractFilesystemSystemNameOpsExtractPostWithResponse call
func ParsePostExtractFilesystemSystemNameOpsExtractPostResponse(rsp *http.Response) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExtractFilesystemSystemNameOpsExtractPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFileFilesystemSystemNameOpsFileGetResponse parses an HTTP response from a GetFileFilesystemSystemNameOpsFileGetWithResponse call
func ParseGetFileFilesystemSystemNameOpsFileGetResponse(rsp *http.Response) (*GetFileFilesystemSystemNameOpsFileGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFileFilesystemSystemNameOpsFileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetHeadFilesystemSystemNameOpsHeadGetResponse parses an HTTP response from a GetHeadFilesystemSystemNameOpsHeadGetWithResponse call
func ParseGetHeadFilesystemSystemNameOpsHeadGetResponse(rsp *http.Response) (*GetHeadFilesystemSystemNameOpsHeadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeadFilesystemSystemNameOpsHeadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileHeadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetLsFilesystemSystemNameOpsLsGetResponse parses an HTTP response from a GetLsFilesystemSystemNameOpsLsGetWithResponse call
func ParseGetLsFilesystemSystemNameOpsLsGetResponse(rsp *http.Response) (*GetLsFilesystemSystemNameOpsLsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLsFilesystemSystemNameOpsLsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDirectoryLsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse parses an HTTP response from a PostMkdirFilesystemSystemNameOpsMkdirPostWithResponse call
func ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse(rsp *http.Response) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMkdirFilesystemSystemNameOpsMkdirPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostMkdirResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteRmFilesystemSystemNameOpsRmDeleteResponse parses an HTTP response from a DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse call
func ParseDeleteRmFilesystemSystemNameOpsRmDeleteResponse(rsp *http.Response) (*DeleteRmFilesystemSystemNameOpsRmDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRmFilesystemSystemNameOpsRmDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetStatFilesystemSystemNameOpsStatGetResponse parses an HTTP response from a GetStatFilesystemSystemNameOpsStatGetWithResponse call
func ParseGetStatFilesystemSystemNameOpsStatGetResponse(rsp *http.Response) (*GetStatFilesystemSystemNameOpsStatGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatFilesystemSystemNameOpsStatGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileStatResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse parses an HTTP response from a PostSymlinkFilesystemSystemNameOpsSymlinkPostWithResponse call
func ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse(rsp *http.Response) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostFileSymlinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTailFilesystemSystemNameOpsTailGetResponse parses an HTTP response from a GetTailFilesystemSystemNameOpsTailGetWithResponse call
func ParseGetTailFilesystemSystemNameOpsTailGetResponse(rsp *http.Response) (*GetTailFilesystemSystemNameOpsTailGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTailFilesystemSystemNameOpsTailGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileTailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostUploadFilesystemSystemNameOpsUploadPostResponse parses an HTTP response from a PostUploadFilesystemSystemNameOpsUploadPostWithResponse call
func ParsePostUploadFilesystemSystemNameOpsUploadPostResponse(rsp *http.Response) (*PostUploadFilesystemSystemNameOpsUploadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadFilesystemSystemNameOpsUploadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetViewFilesystemSystemNameOpsViewGetResponse parses an HTTP response from a GetViewFilesystemSystemNameOpsViewGetWithResponse call
func ParseGetViewFilesystemSystemNameOpsViewGetResponse(rsp *http.Response) (*GetViewFilesystemSystemNameOpsViewGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetViewFilesystemSystemNameOpsViewGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetViewFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCompressFilesystemSystemNameTransferCompressPostResponse parses an HTTP response from a CompressFilesystemSystemNameTransferCompressPostWithResponse call
func ParseCompressFilesystemSystemNameTransferCompressPostResponse(rsp *http.Response) (*CompressFilesystemSystemNameTransferCompressPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompressFilesystemSystemNameTransferCompressPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostCpFilesystemSystemNameTransferCpPostResponse parses an HTTP response from a PostCpFilesystemSystemNameTransferCpPostWithResponse call
func ParsePostCpFilesystemSystemNameTransferCpPostResponse(rsp *http.Response) (*PostCpFilesystemSystemNameTransferCpPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCpFilesystemSystemNameTransferCpPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CopyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse parses an HTTP response from a PostDownloadFilesystemSystemNameTransferDownloadPostWithResponse call
func ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse(rsp *http.Response) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDownloadFilesystemSystemNameTransferDownloadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DownloadFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseExtractFilesystemSystemNameTransferExtractPostResponse parses an HTTP response from a ExtractFilesystemSystemNameTransferExtractPostWithResponse call
func ParseExtractFilesystemSystemNameTransferExtractPostResponse(rsp *http.Response) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtractFilesystemSystemNameTransferExtractPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExtractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseMoveMvFilesystemSystemNameTransferMvPostResponse parses an HTTP response from a MoveMvFilesystemSystemNameTransferMvPostWithResponse call
func ParseMoveMvFilesystemSystemNameTransferMvPostResponse(rsp *http.Response) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveMvFilesystemSystemNameTransferMvPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MoveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteRmFilesystemSystemNameTransferRmDeleteResponse parses an HTTP response from a DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse call
func ParseDeleteRmFilesystemSystemNameTransferRmDeleteResponse(rsp *http.Response) (*DeleteRmFilesystemSystemNameTransferRmDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRmFilesystemSystemNameTransferRmDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostUploadFilesystemSystemNameTransferUploadPostResponse parses an HTTP response from a PostUploadFilesystemSystemNameTransferUploadPostWithResponse call
func ParsePostUploadFilesystemSystemNameTransferUploadPostResponse(rsp *http.Response) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadFilesystemSystemNameTransferUploadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UploadFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetLivenessStatusLivenessGetResponse parses an HTTP response from a GetLivenessStatusLivenessGetWithResponse call
func ParseGetLivenessStatusLivenessGetResponse(rsp *http.Response) (*GetLivenessStatusLivenessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLivenessStatusLivenessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetLiveness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemsStatusSystemsGetResponse parses an HTTP response from a GetSystemsStatusSystemsGetWithResponse call
func ParseGetSystemsStatusSystemsGetResponse(rsp *http.Response) (*GetSystemsStatusSystemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemsStatusSystemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSystemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemNodesStatusSystemNameNodesGetResponse parses an HTTP response from a GetSystemNodesStatusSystemNameNodesGetWithResponse call
func ParseGetSystemNodesStatusSystemNameNodesGetResponse(rsp *http.Response) (*GetSystemNodesStatusSystemNameNodesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNodesStatusSystemNameNodesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemPartitionsStatusSystemNamePartitionsGetResponse parses an HTTP response from a GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse call
func ParseGetSystemPartitionsStatusSystemNamePartitionsGetResponse(rsp *http.Response) (*GetSystemPartitionsStatusSystemNamePartitionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemPartitionsStatusSystemNamePartitionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPartitionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemReservationsStatusSystemNameReservationsGetResponse parses an HTTP response from a GetSystemReservationsStatusSystemNameReservationsGetWithResponse call
func ParseGetSystemReservationsStatusSystemNameReservationsGetResponse(rsp *http.Response) (*GetSystemReservationsStatusSystemNameReservationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemReservationsStatusSystemNameReservationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetReservationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUserinfoStatusSystemNameUserinfoGetResponse parses an HTTP response from a GetUserinfoStatusSystemNameUserinfoGetWithResponse call
func ParseGetUserinfoStatusSystemNameUserinfoGetResponse(rsp *http.Response) (*GetUserinfoStatusSystemNameUserinfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserinfoStatusSystemNameUserinfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9bXPbOLLuX8Hl2arJnitbTjKzMzdV94PHTsbO2hOX5eyecye5NkRCEmIS4AKgbE3K",
	"//0U3kiABCnJpmwnq0+JRbx0N/oBGo1G42sU0yynBBHBozdfIx7PUAbVf/fzc8RzSjh6yxhlF4scyZ8R",
	"KbLozR8Rkj9Gg2gOU5xAgSmJPg8igUWKojfByoNIqDYiLhgm0+huEO3n2CsnO8gZzRETGCkqEiig/BeS",
	"xYdJ9OaPrxFMEiy7g+mZU1KwApUd0PEXFIvobvA1IkWawrGkKVjCIflQ9nQ30IxZbv/C0CR6E/3HsBLT",
	"0MhoGOLxbhBliHM4VbVt06fmp4AECo6Yz1+9yDo8fJSt3d0NIob+VWCGEjlSliBveGpyb4ou+pUmi8uc",
	"cnFZ5CmFyeUEp4gvuEDZ5aX5l8AMXV7SnNsysnxzEGVNNZiIxwznSlneRO9wioCgYIyAro0SADm4yopU",
	"4BwyMZxQlu1IDbiKBpH8A4roTTTGBLJFVHEjG2rKtiYFRYMjgvuzF5JVEV8jcYInKF7EKTqgZIKnBdOw",
	"aDDufQYTygAsBM2gwDHQbYLUNgUwAVxQBqcIjFUvfDcaNECy0P+iCSxSEb15uTeo9fl7kY0RA3QCZGEA",
	"JwIxcDPD8cx0ycENTlOAbnPMUEUQTNPFbuSiZMErCWAi0NSoXCnYLlkEZHdAs5whzs/RvwqktQfdwixP",
	"JW8S73FMCyIHfspokUeSM4YmiCESy5YkJqJBlEERzy5zKARikuH/3B3+Acefd//z06ddcStHLYdiFr2J",
	"hjOaoaHE3TDBSvMhmyJx2fwsNWJXQLY7/VOhzBd6SddDwVsbKJghOUxihoDpQuqA/FNOPEmRIuaMx76h",
	"4q4mlgBRY0pTBMnKVBldmsCUozqVxxPAkZDovZINXA0AFmBC05TecMAX2ZimOAYpJtccQJIAyOIZniPF",
	"hgKa/N8C5BQT1QomXCCYWMZ1RTFDGUfpHHFPAx0278y4n9lh73csztEU3QKjU5LMCU4lbgwHFMRGdx3y",
	"TiU9Vg3vBhGnBYvRmVKuh1JncBFUYtP9SHWndPnOqrbt3GfuQn2T3M2s2C07QOp5CVjTsi6vWl421zo8",
	"ezQ4028d9Z0Tg16pmuuKYJDwCWLv6XjZYn3hFK2T6zYTJNH0H6SRCETER4KFaxylmCCpFOOFQNxvsyof",
	"sAYOaL544DyoZX8ZnOz0jEYZnnZNe2VBgm62897D5r2Y5lhPdj1Pe9/WtJIvHmVKqcAThKr8/FRTidN3",
	"gDa59/hQCii4Cbq0Tfvj3UXo6LVs15J7L1TKBoDtGXDE5jiWA+radGoRvlVmstTxS47/RJ41+tOrH1/9",
	"8kvDJD2FtzgrMgUMICuBF5gANWX+FUAJKZQo6zjBTNrE2gZXsEroDZF/7IITqQp2RVYW7JQCMWO0mM70",
	"5CHgFJMpgAzBXW+dvgUfcg7ULmQkSe60av0RahlCK2q7e6whY5Ejri3wgFDlcmGXD/46qm1MvZYDC8ch",
	"SpFAT6Xetd5D0jEDJqXdTqWkRrb0UY30R5b2tzM+ME1rJSpYqlYOQ1WvPVlWTR8ZvD2DTIwMKBp9lMq2",
	"Vien8FbukBXU7uTWhgleSo37HWGBMq0Eda0xP0DG4GJNAiRPvBQmV61tVsdCGhTQtLe3gsFYrG5FLTeY",
	"zBaw22T6FiylZ2s0yF+lPSR50LM9ZQtwM0NMeYiQHlNvjyLXBuP32Yg1UdOjLk17mkm33n2AwnfG7+aT",
	"pRXfcU/+ZpDQmB9SyMUpTfAES0qqCieQi8z+HqqHybUejf6m1RNMrvVIyR4IzDwPq8REiJIcsQxzjinh",
	"bvEz5+dALWvBlIrsmQf1+bMq17Y6Wyev56ZdpqPEYckTqWlvUM5guceNN2iGl89tzlJfVw5mKL7m0gap",
	"6wxMp5RhMcs8wy4aHe3vvPrpb+5sUxYMyCF22i8XZvvbMnmUlWvMNBuoMaW33CFro/xQ254HadefVjkY",
	"cDf5d9KqS84ox9a0L/FLktz+3DQ9BxEXkIlQxZH80FG1LreSJ5eFevs+mXUR18XiS3gkYEC8UGAfo/vq",
	"hxCrcb3oQWvRBM3dgodoHiw2xd6E9RtOgsUwoW6xY0KDxTKa+Oc58u9gwTojp62MEIlobwpTPwQ1oXM6",
	"cgoWPtcfg1zXT4c0L1ixnihxEkNJoepPcTmNDMyg2hGzDNfURelDm66ok5WmBXCIJpggDiCI04JbJyvQ",
	"BzFqz4cFB7LJ0PGHgKvgsur/0Na4Kx0+/6Ts+hAzb34LuoBOIbsGYoY5gNqxY4qDG8qu5U6zNGB8940q",
	"JMsYI6nunDLnE3XBnCr7TrlT5F7YepKMZNwuzlaxfIx5VIqsPnR6eDoH79ARd8hboLa5ktbASCqXlt3m",
	"ymWMq5mIMqVc+pBA/i/P1YeYQRHP9IArQoLklgQFpu135aneSO+zjxBMQ3LWvwO1yugzOZBJ0Rs705G3",
	"r3wzVW+xcc/jBSsQwNrqt34YzIHp3tWDI0ORMeDU+qjtt4rA8jA1gQLt+JPUA7YmFzhDXMAsLz2akAtD",
	"oxatS6g0I2NDnSJWIBKHJUnU8eW9aDLjDpgxlIHpR52sopiShPtEaSr8k/w+928fch2+ALiAouDAdOM5",
	"p0zPzqzQJwVnjnM2owRL/CWd04pchbQcV5lotQYqxdOzbH375TRVQ3QIq4HZ6DckDu00e9JxQkQLkRei",
	"xR+ybK14oIvkg+67zrwhySnYwkyYbdfkXY/vZeyWhvQqbK7EVZDWdraOEEx6ZskYrr1y5JHZzo20gvrl",
	"RtlVvbLi0djOygXE6TcwMB6ZHdwscrQeNw/zj5X2YHS/uaFBc5i193R8igSUll07d1/omN9jNnTalnuf",
	"9IEz43tJhXu60kJ+K6MbYXBzjC1h6ATPEUGcN7nRlpOykc4L7cIKhz+uaNHVbETVMCtcJ1hFmDTdPuay",
	"tbrrr9C/dp6XuWyFuf6dJqhj5Sbys/zPSuMnG6sG0O6oVRP1Aa272VQhH3E+aWHyzyATaiA6eMjLMisz",
	"Ujbb4KbqcBlLTrc+XwGaw8ydI2miwSXsMafUygw6TTdYdLtdxqTXuc9mkPowo3oD2cFjUj+ZX22N84+L",
	"V1rlBpHZIq8syqOzgwO9xXaFaFhaJj/bmS+6ujzCUvsHRjfdJ7l9raL3WS8b1AWYcEQXdkUpmMg9EiTg",
	"6OzA+jIGAJM4LRJMpmA0OgIwjhHnA3vwhsl0ACBJPpEqmhikcEELsQtOKUMAkwkFmHwif6iNvBb3D3Ij",
	"Kjv8/GJ3dwhZPBuaL8Ph+dv9w9O3u1ny17Djyzkd4noXgefmqx90XHBBs+qEEExSOOUgh+ooTdBaVIJc",
	"R8ELtDvdBVc7+e0EsSvjFUlQgmMoUALKeUaR1nHM7AQy2A5k+0lFbmPVVfHaowoQPjMnmAs5OAEPDQdU",
	"n4WWI8aLeAYgB8abBCgDM5pVB41YB1qtvC00PrK70MY1xIk9q/JZ+EjwvwoE5MfSsWdIdnffrQdbjI7l",
	"f5ctJ6aYnF3Ks+EldUZlwWrXzyu3WcCyWjEcybbr7+7lRLBM5CGvwLJ6o9HRehUcr8Xb2xjpgVIT8z0s",
	"whaXj3GFyVlAmms2/j/BExXbJ8poIHuiH1AJwxWfWbYizmdLB3V0dJBiRMQZpWnbWaNsx1WUSs2cGdaZ",
	"OkMTa0iIDeX/DRHEcOx5BoG6eAPyFMZoRtNEM711tm6drY/nbN28jzOIj24cLYkmLGcMMYMCxJCAMTJa",
	"sGMG3D10cdFdGSkV+F/LsiVlYcrbDlve0/FhRaQ275vnwpuJijqYQTZF0m6Ryqfie9QVDZ6jWMVC2Fip",
	"cGhUTAkXDGJzD7JPyt7TMXCb924DlL+qQIH5Klcd2wP5nHuPvQb9lZPl1+jdzxeXc8S4Zm3+andvd0+f",
	"onomNFbmLGQLqaGIzDGjJJPr2xwyLDvTY4PKyLUvWkgC3boD9JbMXQuq9yg6a3h9oeO6zaUsJlm8Cb2R",
	"+n9LZf0xGFWkviwPgJOikFLRgfQlPv0OwmFuKqqDJJAl5XXaPmU2Mo2bpVpZ3TZMqQpOUUX09WCHoGPS",
	"y4awhSAsW+8kSJVwCfrQ0xa1hSK9Ne0kyexe7waRCR24rFzFDQ2Rs0gjwsBp9J/m26H7rTMUoNmp78ls",
	"TOWBZarhGA45ZI+9qJT3dNwSjVPhrR+ngYFi/6h4LGV/NB1u08yaxuix9LXEH/4WFdmwJRBYz2Ga0lht",
	"sH63juQqRNF+Ir6D2I1Iq5xD5WJd3/RUk24ZUdsPGzoe926wDnaucZqaWOWPvaYU+DtOU6YbVmGnawTf",
	"krrkaw55x5thPUlekG75Y9D/gSnDYtHjnYoz26QGmChWOTUa6YIqvp1f3/Po6QLy6weePF2o3pVPKkOr",
	"dIm1jbOJ/BPlenboLme1hSpZeZ3SKBiUTgotccNpE+kVeK0GuvpVBk83SKxNax3T2ahUDn8+Q7dYHJhQ",
	"0Z508u0tFrFsUgWrCsRYkYsRnhKY9tjLsW2Z65YNAFAt6ligFotToHMEOSW9LkQCMd1oY2etKPGHa1Qq",
	"RWC8FLwao+XHyh4HLzKsOtPdZ7pYB6c1CeBWOPhSUYy3yMR0X9PgFOa87r56mAKbFnUcfJ8NE+3HwhkW",
	"PTZ7otqz4fc9Nqyi9lXDBc8RSXqV8qhs0z2Dt8Mc0IBTOkd9XpH73nIKfEvX6zM6R49wvd5VmVaNepqr",
	"cF7fIdpsRil9RXaVjExlEip77XyMZnCOaeBQIoO3l7Jk8+L7q5c//vzjL6//9uMvbXff69fe/a69I1m+",
	"C8wlAoA5eAV++7V+nV0azKD1ckgOGUxTlF4yE0lUkvm6PVmUulgMBLVSwATYdqy7qu2C/Zktd+4FGDkU",
	"iSy/nKiTHv9Wmch0dhNP71GWUwbZAugaoOAmOwAXVKo04HmKhSE4KdRPmmiXqIssB+90l+F7epeqmeW3",
	"QN4SCXqgzu64+q+qKGS3qfJE65QEmAhqiLqZIWJIkqXKmxxL5PiRIzBSRDUvjTiTfV3HAzCogqSaW/Ek",
	"YSYCraetuGnQbsUP8oL3uOCpPXycF1UHpygzG40+u8h0q+qAgKE+OThQ7cmG8+LETEoPO4krW84LpQG6",
	"bW8DrkYhBMUJgqJoY9BRgI3kEnhnO5eEMIR6H8p3DKFqJGeUi35OFMqjMdui3KUlKepZ2Y+TFFldX/ni",
	"sxd6+AjJIExnynZSaQr7NG9Ni+6+tA8trW84VYkZQzDpk/oL0+LdILpBeDrrc1fxT91g486vxrmzRfS2",
	"htVCEFglahGozWvT/Sr3wX0VewNKUHkcZSkqYFo6j/vSBdmo9kq1xOBU/IUIax81yvHtcYKIKLM1bMrd",
	"0eqMcAmukROmWCzL/fk8Mn1uE2tuE2veM5nNY2WrCYGpBXNLEiRtIA/SNu3QegO5PPWQLPUOp8gmxVrd",
	"ldc+vFu3XKcmtQ9lbfRC49IxhKNFJiflthGU3wJAI+jGJOlYFYSy+HIUEHQjVxmbisTJvdQacPQch2RQ",
	"sRsYnZrIVxmcPu++9nTptY3GDna0a2j1yUKl89RGYTSUMh+mNIbp0MyATrbP6OfXP+7tvX71zc8wks7f",
	"gxc23DaVGErvXVF63Jz7IKRl/6LutZSOYi90DP9ZduA3DayDuNYHb/P1PlNQlsJ1xBDQaF9NW/T5PR3v",
	"CwHjWZs6xzTLIEmiNxGKZxT8oEujBNxgMQO8UDe3fgCfir291wj85ejD6dshVGV2aSECulo22Dw9UB/k",
	"eOkGnEhOL9pX1w9ZCa4IGpy1S2BUjE3mt84b0cd9njXqGKQA0QFillDeaoR+0cdE1YyULWwGoDJM+uTw",
	"8uT41/P98/++PNu/OCqnKEGHKR4z/URI/csYk2qjG73VfWqNwCTFRM4PJn7XRiNG//G/ZLXhGPLZJ7Kz",
	"U27Q/6/8397LT2RCGcASo19f7u6+3Nu7+0QS+okotfsL/kR4ilAOXspfifHHqCi7Sx03+CZSXF4Kevly",
	"b28XMeaW0TF/b6JhguZDOUruR7v8+C1I9Q3GlEZfv0oIK3vi7k6O4dOIWosWGJNC/1UaOWV9tc1XGw99",
	"M+HZSK0xM3xZfqoZiqcNBDrVp8MGUloQdQqv0SFm7Zs6pjIdWhdKeI0m6CZsO9rqj+z7ADFDUCAOYJqq",
	"9G+aDvfiprmktQAJBYQKAFOGYLIA6BZz4R9Gom9nC1EbzbYxv05kmWdqmvrUhViobrDWllOTNs5kplJn",
	"okIwPC4ECjx+pMLi5joerqZP5otz+QyMkbhBiJS56XRWUdcNZmuFj6xxhmgRuBNiD/RlAbc/m8c+t315",
	"p9GmtaVJGrFDk6njBa5qSYaEXJgkTBlttft1dsvo559/7rTeW6wimxuznrUwUWKgsYApqBLUAnMXctCS",
	"S/PZ7ysVu67sAwJeOg7PEbIhArsYoTekTaFMOHyULXbsTpLeECTXbBN8u7aW9RRhX8WYNAJMVNC9vo5v",
	"9mAE3QDVL1DUu1uzKBCsb1jcIIkfOWINCqX0Ogn8oOj6Fla+gGot1cDnDCWXwAAjjUw4zXBcklzUEgq/",
	"JUlrSuFVgzjuF5mxzq2PE8xF/eJHirloiZ1mos6mipZtYTR8blp2OyjF5rb9OZhlqPU4tfZ0TmN9+6Cf",
	"abQvM3oP4rg5YmKG1CEoTPkAIJKoczmucsQsDyzUyWX+jhbHAafDvvoIrtECHB+qQLjR6x2p2FBgFY6m",
	"Sdt1X87MIec3lCW+6wtxfo0WuOmYGEQ3DAv0gaQLrSp3g2i85KXLLox1vgx5N4jKwMdlDdVj3VqTrCif",
	"HbbH0Ky8susIZ3miFTyHApknYmqec/1tqMwzAtNyhMHH85NQZ10jYRorWLrSQDgJYFab4apUMPe4XN+I",
	"jzXdlwiAc4hTOMYpFotdJbdinOI4LDb1aYhujdRahFXNp7J4SC5qJpgGM4ycq9/tkui/oOo2rssF5yUU",
	"MyT2LQYD/lpVwKSAUkC04aiSAfDftFDZGKZ4bk8X04U5S1TJL4GbzlsFdBdcivTqB9218n28Kf0h8q8f",
	"rpZpkSYKWlSvpEprZL1ovEXVc4qg1/8uKXsEIrD/c4+SaN18fepTE+yO+caRKHJv53uhaZLUiQBs5Tq6",
	"I+hOKhX6RbXH1VHrU0QQU2nBPp6f+M2KdPkq7upgGbjmzL3uhDLwVsYmUstZQTPiRvn5y3pw4V8tT7xJ",
	"J0Mn7cvuNnXRNnXR95S6qA6NEHq8LGPNFXN0JBc/opMdgpzS1Ded1UzCUEYFAugWxYX8MYAl88p8s3WT",
	"NMWGeHvqTsP7jwzeaprrT6i3PlhJyusxMSVxwdQqoHjT7dTu5Zhfw5dyKGvhRH7xrCBZMtgEo7eLIyOR",
	"jeif6kHJVJtpBSEoxWTqkSfLqHGxJJ3RXu5PdtLUEJL8VcnU99UuyYxn/LDNmNyZ1hnVoosET83DOFh7",
	"GRkd2fl6u3hsF4/vbvGoIyKMmhKJDcD8AzJMC25woi7aBQ6DTIzGW7t2+O8QhzSJFgK88CxZs/CQKTCt",
	"cUDniMmed5vhHOUyFc4jU65296FEpSGGKfDXTZ+Isv3g+2ZJii7cIyvT/99CaxuQpfUBVkXGGE0ok/tX",
	"bgnw5/3jJEWi9RhrEF0jlO/LHUM3/+VRnS8Ajohyo8lWdqDaeBhF9uD0d4Ry9TVIQkqn+F7il2JXlYew",
	"EDMPv6rJzgT4rjKHdN3Nxhs+//xCx066Zs9OCvgKc9zLK8Y1L8rb0QXYPzuuHFtqVCxRrkj2c2xePIY5",
	"/ofNENhzcrVSGpImk4awRoRNTugbAA82QkqrsE11nDNfT0ZqEikI1ilqdPyLXLT2z45DR8HOq6Ir5VK2",
	"Tph5JfE2mQXkZcdpWeC6eYTUduLlWHPCKVuVfJ231xjiReplV/QVbmsZbS2j78oyCoOkC07hjMCjIpcb",
	"FZTUVg71IKOXAjgtWCaRNOZBQtrS+174STzunecxpVO+RhaQE1m8fB7DOyWsvVZZkbqRBGRlKtZG64Yn",
	"96KnI6vAUNbZax79MkbZCZ16Z7/yt5ROQwzrY+haBZ0eMlgjeIp9okqWXYfZUfQGWNJncd3PgsiBTpEw",
	"Ed69GCyOOa6a1qeqxhRJzD2cXnuyl3tMHxm8PYNM2Jj+nqKsT+GtyhoiWzW3nnkptce6089LYeqUZRtN",
	"4hPQn5CWccSOyYS261gZKtR5GFq7n2yTeK7xUFOzBS8kKPQSiE22uFa7NenV3n43VNdyMHoSakhRH24W",
	"DIuFnPMzLbf9s+P9QswOkcokZiyBSUpvNHKVv+ugCmdQFztjmqvK6rr8NSIKZ9FMiPzNcHiNFnFK4fWb",
	"X/Z+2VNbqCFDMM348DpW/xnmjAoa03RIc0RwsmO2mEPVlt5NGcpl7VcqL/7FxdmvCDItSCU0Zerpn8oK",
	"koTo7k5lTZx4b3y/k5O23Nc49uyb6NXu692Xah7NEYE5jt5Er3df7u6ZWDXFrRqtQqDhV70QqJtRd0P7",
	"4twUidBDF8Lx8cE0VQ/rRKofvZWTi6Z5Jo4f6A70svY7zJD88Tekr7QzmCGBmA6xkxta+5azibB3iIpc",
	"ldFA1+rVXDxB2x3/r8uCsxkSBSO8ZArMMVdHYGNzym0c41JhB4CKGWI3mCNASdosoCLYEiscxd2/CqRW",
	"VsMeTNPyveiSlzXjyTdIspM1yJLZSNb0WQ6LBqXSmFd7e3pR1G9hql18npqd4vCLSahZcds1bdQeGlSq",
	"30ggzq0uakGgxF6DmhRpqmaoH//rv3ojaT/Hlh6ddztAlHajg7c2gfZPj9y/tLkRs/07E6NCWWBK/OOz",
	"hIY7C/3xWQ4sL7IMqtsiEvLvjVJAadr9EZmJI/qsTnyCZ1fqkgeAKqRTXxvzZwjvMkhwnjgzZxWPPFF8",
	"1k0gLn6lyaK3wQtefrnzF0MTvlLD1MuN0ODfawvDC3BFrdyBxZTpgJ8tqHoBlRwKiSqgFSKIrbtB1xI9",
	"/PqFji9xcqfBJ7cKAdcrJDFKAQxC8FBVek/HulQQhO/lVlEXbGKxqTBqgxyAqCa1E50tjVVpcf7/H3Dn",
	"z/2d/7e3838+/++/RN4FTnCchNf8x5kuPLz+GOYmVkJOt2vUJuCkNVQBSitzy2K1ik2rvE3jBbiyALtq",
	"MW/bARM0cbdo2VqM/1YW40MWNZO5QHlDQtcTdUIBAEHOaGxeRlsFubpeO3L197Nii98nMI79LBErGcc/",
	"hi4xUBXADm1+DI3wLcD7A7geqAfhOzPPLHV6mmyh9dZl+4JTO8ptie06/WTrtB2Cpet1qQPbFXvjKzaw",
	"o9IK7eqF1Rq6ac6HOvdAkbViWp/fac+jKauhra4MvdDXhUZH+zuvfvobgOmUCixm2V9DOD8w9Z3XtEuc",
	"f8i5/fxMnM0XtbcvQw5hQ9Cqc8lFy3OaZ+HEjRtGtL4grGXeBWlbZovmDaPZCtpBsvc6svPHSsjOaNJq",
	"jB/MIJnqlL1OZoyMJqhC94sr1cZVE8xnhVBZGlqRnNEkaJB/s9ZuIMXGSsbu3oZIaIfrO3WVsxxTDmI1",
	"1FvUbsIlXEjUSpz1BFl6Q1aBrMq1wWc412Cd4jkiZkG+Uo20YZbekFbM0hvyfWLWyeXxVJh103C0YbYa",
	"1C1iN4xYCbN+EGtzxEvQBk9VbUZ0k1ceksTLHWeu2wvIruxVj+C5q22mDb3m8/d3AFvPKH9fF5OCGCTJ",
	"UN2brwbASaq+hdtmzkwPnIcUHg45G0/ZumO1sZEAAp7B1ORIfpHBW/DTqx9f/fLLHvhVvXQX2qPayi04",
	"s5+fyR51v0zSXEqll41qsN3N7lbbVkVLwBafm9p2HjpD/HB4mgcr2hdE87KEWfOupn/i/Mo+IcODa5+p",
	"0QJJ8/X7W/lqT3A8aOEzo7IF0cYWOTNa/YBIpU9cwSMrtdHxxjqmzSK0uElVaEGR/Pl5LWqU2WdWTe/9",
	"rWuNpp/eEXuxyFHXDlF+3zpgN7wSvjNZSx8O4BnqMFAdAE8w4/rBYAlj2eSQgxdXsvpV0D49Qq22qfz0",
	"TCD8zqaT6we2bnNLoNo8xpkhoG+WgRucpmCMHMH//vFUP2oipY9gPFNDsNtCtX3+pCKz17wy96TUCkTt",
	"ae4lgRSTFSWgSj6hBMKUOk9ErSWBmxlNderDgboTTw0o1Y3lUuDDQKfqK5/RIk1kYzxHsbopZdPvydUC",
	"xQLPEYBsWmRyshQzRovpDFypVq/kInSlmr5qkza/xvkFgzjVSRNXvXLyDXBbTivXOBcVh499W0XOK3LW",
	"7Fp4j9TLlXYaBhNMMJ9tl+BNLcFS3P0swWn7jbgTzIWbBZXbXAX6IKV6hvHFVcrD6/BJmyf25LlclpPT",
	"QG6e1TN5r/sIYWi2uu6KPJrRGzDDSWLOrNpu2/EZvTlSxdaY/EKNlwKc0ZuZbbAx1wyCWkKKDDEc69t2",
	"kCQmG//xYRvVpsJHFTO2KtXLuypTROtChZvWoIOHcwlKjucoXajhck4h9A6ojQ1mK67BxUqdVUmPqw6W",
	"86GGtZ7+tnqkzrwqDMrHg3nbmuq+o7ymVq3bfehN48df48oEESe8a5kri6mR265vm1rfTno6BcmuE8w6",
	"Th3Vq1XOSlZZMC+uVN1QhIB9MqllaVPfvj8/a+2lqye44Om/U9WJTv0c2Raem3LjqqHoB6Is67rmaa6/",
	"Nfy2HlJZFoCprnneFkZ7nrXd/XxaGzSxVPVshZbtru3EbTss8YZDN78F3OZugJ73FPDKBRSr+FyvZMGr",
	"6tgktL0bCdh23ig/bU9KVt3svaNpStV77mOa4ljZybxX27yth+dhfqvX0QUUXau7/L4929mw4S2F3NM8",
	"ox+7X2p8m3Legp6SFrvbvKDfNufor9+f7a3goZl7Qvvbo6IDp2ZAtzb4Zm1wI+d+0CogTlexCtQxiD2I",
	"tbfbrmTtsAP4AuK0Ba3y0/YgdsVDOP/46Rmfwy4h9L7HsGWzz/0UdgmhfR/C1o69n/YU9gjBZKOHsE/C",
	"rXsKOys5fAoLWc6YXSuvnoe3x7CPZi3LAeln/dXpe9uNZZ1yd/1YfWkpVOl6A6uw/vhEJnPzAEvBdaG9",
	"VjczxIzrrwK0FhRKdvtZqtfrcBXfWdsOoHwydzihLNuxGUJW03HZ3qXUjEtNzmWlTJeXzphcXtKc2zJK",
	"kx4UD215384fG7LhzavIvUwhc4xuWk34f2B0ozXbPmn7osiBoMCdQ8at931k9ZYJRH7amvHNN7DSAg2k",
	"0aGEOiifN8Z/qlB0lfdFUDnBMCQYRnOUgAmjWXle3mpo4T9Rv1atfWpJa8FgI5yUI6qy5LfIq+zE9kEn",
	"E64fgQ5JQn/diCzCUuigr3zHQdO0cXPQArLLHFSY3xqDj2UMSnE/fCa3Ty6scmdaO1Bj9+p0+yGpgOzq",
	"r+DFhDITcJRCNkUMiBkky6zIrmvV9v2I7/Nu9b3uVb/cQPcdiYdWGf+tM3Zj2O/v3naF/XwF1OeLJYiP",
	"83sDXqUUyDvhnn9vQM8XTwZy2XUXwJcM9RbcG87MkPeIbTcxQyfCIV+QeMYooQUv7/e7AL83sruyN1h8",
	"2zLf52Gq5e6JEO8OQGdAY3PUt1jfLNb7S/NQIn5prgcDeFPOTPU9me4dWSEs1L/L1BD3SQvxsv/e27H9",
	"1hvt7cL+yGDvLRFFCfNsvhThGZ0vi2XO5veG+imdo9N5F9JP598XyCXHT4Rw3XU7vE+XDfUW2xvDtpL9",
	"6bxHbHdfUjDoZmgFfLPs3vjuutFgEb691tB6QBN8qjKOaUGWnCHc6+nhfdPyZk8CjEp0zEPny5VyOxN9",
	"C3c3yrloWahIyH2g6/TiPGiPJrFz0JOGlGzYcaB5eyKbI/DudkCNP+Zbl8FzDuLQz7QNUzxHBHE+7Hwn",
	"yJZynvFzn8VuJtww5UequP1Lx2ds8jza9hSS+0mNh+0dnlaF9C/BW5lWmqUl6CuSVq7uh8117gWuovZN",
	"eZVwYoZgKmZmYII3/HRhrU7mj81rk+mo+5aJWgUUU1uF2vClMKNh3XromyuEJmh1nVSl9ZWSK6+dq3al",
	"/F3WcRVTWgTqx6cJR9twxI/irAsRqsAWEI8HCKAkvhYqcsgElrStDo2qypr4OCsr1kFSffkukVKx1wWX",
	"qtQWM4+ImUrsawGHIY7YHK4HHbfSmuA5d6rW4eN++y4B5DLY7Vty5LsF0eOByBX8WjAqOGKYTGgnhOKC",
	"MSk8lWHPTedGyWoQ+mh6qQPH/v79gUZydkwmtNMvUxfnFiybBYtVtyBC7u7+JwAA///+BvqpUSMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
