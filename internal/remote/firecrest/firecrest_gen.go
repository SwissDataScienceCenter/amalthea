// Package firecrest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package firecrest

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APIAuthDependencyScopes = "APIAuthDependency.Scopes"
	HTTPBearerScopes        = "HTTPBearer.Scopes"
)

// Defines values for ApResponseErrorType.
const (
	Error      ApResponseErrorType = "error"
	Validation ApResponseErrorType = "validation"
)

// Defines values for ContentUnit.
const (
	Bytes ContentUnit = "bytes"
	Lines ContentUnit = "lines"
)

// Defines values for DataTransferType.
const (
	DataTransferTypeS3 DataTransferType = "s3"
)

// Defines values for FileSystemDataType.
const (
	Apps    FileSystemDataType = "apps"
	Archive FileSystemDataType = "archive"
	Project FileSystemDataType = "project"
	Scratch FileSystemDataType = "scratch"
	Store   FileSystemDataType = "store"
	Users   FileSystemDataType = "users"
)

// Defines values for HealthCheckType.
const (
	HealthCheckTypeException  HealthCheckType = "exception"
	HealthCheckTypeFilesystem HealthCheckType = "filesystem"
	HealthCheckTypeS3         HealthCheckType = "s3"
	HealthCheckTypeScheduler  HealthCheckType = "scheduler"
	HealthCheckTypeSsh        HealthCheckType = "ssh"
)

// Defines values for SchedulerType.
const (
	Pbs   SchedulerType = "pbs"
	Slurm SchedulerType = "slurm"
)

// ApResponseErrorType defines model for ApResponseErrorType.
type ApResponseErrorType string

// ApiResponseError defines model for ApiResponseError.
type ApiResponseError struct {
	Data      *map[string]interface{} `json:"data"`
	ErrorType *ApResponseErrorType    `json:"errorType,omitempty"`
	Message   string                  `json:"message"`
	User      *string                 `json:"user"`
}

// BodyPostUploadFilesystemSystemNameOpsUploadPost defines model for Body_post_upload_filesystem__system_name__ops_upload_post.
type BodyPostUploadFilesystemSystemNameOpsUploadPost struct {
	// File File to be uploaded as `multipart/form-data`
	File openapi_types.File `json:"file"`
}

// BucketLifecycleConfiguration Configuration for automatic object lifecycle in storage buckets.
type BucketLifecycleConfiguration struct {
	// Days Number of days after which objects will expire automatically.
	Days *int `json:"days,omitempty"`
}

// CompressRequest defines model for CompressRequest.
type CompressRequest struct {
	// Account Name of the account in the scheduler
	Account *string `json:"account"`

	// Dereference If set to `true`, it follows symbolic links and archive the files they point to instead of the links themselves.
	Dereference *bool `json:"dereference"`

	// MatchPattern Regex pattern to filter files to compress
	MatchPattern *string `json:"matchPattern"`
	SourcePath   *string `json:"sourcePath"`

	// TargetPath Target path of the compress operation
	TargetPath string `json:"targetPath"`
}

// CompressResponse defines model for CompressResponse.
type CompressResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// ContentUnit defines model for ContentUnit.
type ContentUnit string

// CopyRequest defines model for CopyRequest.
type CopyRequest struct {
	// Account Name of the account in the scheduler
	Account *string `json:"account"`

	// Dereference If set to `true`, it follows symbolic links and copies the files they point to instead of the links themselves.
	Dereference *bool   `json:"dereference"`
	SourcePath  *string `json:"sourcePath"`

	// TargetPath Target path of the copy operation
	TargetPath string `json:"targetPath"`
}

// CopyResponse defines model for CopyResponse.
type CopyResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// DataOperation defines model for DataOperation.
type DataOperation struct {
	// DataTransfer Object storage configuration, including credentials, endpoints, and upload behavior.
	DataTransfer *S3DataTransfer `json:"data_transfer,omitempty"`

	// MaxOpsFileSize Maximum file size (in bytes) allowed for direct upload and download. Larger files will go through the staging area.
	MaxOpsFileSize *int `json:"max_ops_file_size,omitempty"`
}

// DataTransferType Types of data transfer services
type DataTransferType string

// DeleteResponse defines model for DeleteResponse.
type DeleteResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// DownloadFileResponse defines model for DownloadFileResponse.
type DownloadFileResponse struct {
	CompleteUploadUrl *string     `json:"completeUploadUrl"`
	DownloadUrl       *string     `json:"downloadUrl"`
	MaxPartSize       *int        `json:"maxPartSize"`
	PartsUploadUrls   *[]string   `json:"partsUploadUrls"`
	TransferJob       TransferJob `json:"transferJob"`
}

// ExtractRequest defines model for ExtractRequest.
type ExtractRequest struct {
	// Account Name of the account in the scheduler
	Account    *string `json:"account"`
	SourcePath *string `json:"sourcePath"`

	// TargetPath Path to the directory where to extract the compressed file
	TargetPath string `json:"targetPath"`
}

// ExtractResponse defines model for ExtractResponse.
type ExtractResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// File defines model for File.
type File struct {
	Group        string  `json:"group"`
	LastModified string  `json:"lastModified"`
	LinkTarget   *string `json:"linkTarget"`
	Name         string  `json:"name"`
	Permissions  string  `json:"permissions"`
	Size         string  `json:"size"`
	Type         string  `json:"type"`
	User         string  `json:"user"`
}

// FileChecksum defines model for FileChecksum.
type FileChecksum struct {
	Algorithm *string `json:"algorithm,omitempty"`
	Checksum  string  `json:"checksum"`
}

// FileContent defines model for FileContent.
type FileContent struct {
	Content       string      `json:"content"`
	ContentType   ContentUnit `json:"contentType"`
	EndPosition   int         `json:"endPosition"`
	StartPosition int         `json:"startPosition"`
}

// FileStat defines model for FileStat.
type FileStat struct {
	Atime int `json:"atime"`
	Ctime int `json:"ctime"`
	Dev   int `json:"dev"`
	Gid   int `json:"gid"`
	Ino   int `json:"ino"`
	Mode  int `json:"mode"`
	Mtime int `json:"mtime"`
	Nlink int `json:"nlink"`
	Size  int `json:"size"`
	Uid   int `json:"uid"`
}

// FileSystem Defines a cluster file system and its type.
type FileSystem struct {
	// DataType Data types for cluster file systems.
	DataType FileSystemDataType `json:"dataType"`

	// DefaultWorkDir Mark this as the default working directory.
	DefaultWorkDir *bool `json:"defaultWorkDir,omitempty"`

	// Path Mount path for the file system.
	Path string `json:"path"`
}

// FileSystemDataType Data types for cluster file systems.
type FileSystemDataType string

// FilesystemServiceHealth Health check for a mounted file system.
type FilesystemServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *bool `json:"healthy"`

	// LastChecked Timestamp of the last health check.
	LastChecked *time.Time `json:"lastChecked"`

	// Latency Service response latency in seconds.
	Latency *float32 `json:"latency"`

	// Message Optional status message.
	Message *string `json:"message"`

	// Path Path of the monitored file system.
	Path *string `json:"path"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// GetDirectoryLsResponse defines model for GetDirectoryLsResponse.
type GetDirectoryLsResponse struct {
	Output *[]File `json:"output"`
}

// GetFileChecksumResponse defines model for GetFileChecksumResponse.
type GetFileChecksumResponse struct {
	Output FileChecksum `json:"output"`
}

// GetFileHeadResponse defines model for GetFileHeadResponse.
type GetFileHeadResponse struct {
	Output FileContent `json:"output"`
}

// GetFileStatResponse defines model for GetFileStatResponse.
type GetFileStatResponse struct {
	Output FileStat `json:"output"`
}

// GetFileTailResponse defines model for GetFileTailResponse.
type GetFileTailResponse struct {
	Output FileContent `json:"output"`
}

// GetFileTypeResponse defines model for GetFileTypeResponse.
type GetFileTypeResponse struct {
	Output *string `json:"output"`
}

// GetJobMetadataResponse defines model for GetJobMetadataResponse.
type GetJobMetadataResponse struct {
	Jobs *[]JobMetadataModel `json:"jobs"`
}

// GetJobResponse defines model for GetJobResponse.
type GetJobResponse struct {
	Jobs *[]JobModel `json:"jobs"`
}

// GetLiveness defines model for GetLiveness.
type GetLiveness struct {
	HealthcheckRuns *map[string]time.Time `json:"healthcheckRuns,omitempty"`
	LastUpdate      *int                  `json:"lastUpdate,omitempty"`
}

// GetNodesResponse defines model for GetNodesResponse.
type GetNodesResponse struct {
	Nodes []NodeModel `json:"nodes"`
}

// GetPartitionsResponse defines model for GetPartitionsResponse.
type GetPartitionsResponse struct {
	Partitions []PartitionModel `json:"partitions"`
}

// GetReservationsResponse defines model for GetReservationsResponse.
type GetReservationsResponse struct {
	Reservations []ReservationModel `json:"reservations"`
}

// GetSystemsResponse defines model for GetSystemsResponse.
type GetSystemsResponse struct {
	DataOperation *DataOperation `json:"dataOperation,omitempty"`
	Systems       []HPCCluster   `json:"systems"`
}

// GetViewFileResponse defines model for GetViewFileResponse.
type GetViewFileResponse struct {
	Output *string `json:"output"`
}

// HPCCluster Definition of an HPC cluster, including SSH access, scheduling, and
// filesystem layout. More info in
// [the systems' section](../arch/systems//README.md).
type HPCCluster struct {
	// DatatransferJobsDirectives Custom scheduler flags passed to data transfer jobs (e.g. `-pxfer` for a dedicated partition).
	DatatransferJobsDirectives *[]string `json:"datatransferJobsDirectives,omitempty"`

	// FileSystems List of mounted file systems on the cluster, such as scratch or home directories.
	FileSystems *[]FileSystem `json:"fileSystems,omitempty"`

	// Name Unique name for the cluster.
	Name string `json:"name"`

	// Probing Cluster monitoring attributes.
	Probing Probing `json:"probing"`

	// Scheduler Cluster job scheduler configuration.
	Scheduler Scheduler `json:"scheduler"`

	// ServicesHealth Optional health information for different services in the cluster.
	ServicesHealth *[]HPCCluster_ServicesHealth_Item `json:"servicesHealth"`

	// Ssh SSH connection pool configuration for remote execution.
	Ssh SSHClientPool `json:"ssh"`
}

// HPCCluster_ServicesHealth_Item defines model for HPCCluster.servicesHealth.Item.
type HPCCluster_ServicesHealth_Item struct {
	union json.RawMessage
}

// HealthCheckException Generic health check error placeholder.
type HealthCheckException struct {
	// Healthy True if the service is healthy.
	Healthy *bool `json:"healthy"`

	// LastChecked Timestamp of the last health check.
	LastChecked *time.Time `json:"lastChecked"`

	// Latency Service response latency in seconds.
	Latency *float32 `json:"latency"`

	// Message Optional status message.
	Message *string `json:"message"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// HealthCheckType Types of services that can be health-checked.
type HealthCheckType string

// JobDescriptionModel defines model for JobDescriptionModel.
type JobDescriptionModel struct {
	// Account Charge job resources to specified account
	Account *string `json:"account"`

	// Constraints Job constraints
	Constraints *string `json:"constraints"`

	// Env Dictionary of environment variables to set in the job context
	Env *JobDescriptionModel_Env `json:"env,omitempty"`

	// Name Name for the job
	Name *string `json:"name"`

	// Script Script for the job
	Script *string `json:"script,omitempty"`

	// ScriptPath Path to the job in target system
	ScriptPath *string `json:"scriptPath,omitempty"`

	// StandardError Standard error file name
	StandardError *string `json:"standardError"`

	// StandardInput Standard input file name
	StandardInput *string `json:"standardInput"`

	// StandardOutput Standard output file name
	StandardOutput *string `json:"standardOutput"`

	// WorkingDirectory Job working directory
	WorkingDirectory string `json:"working_directory"`
}

// JobDescriptionModelEnv0 defines model for .
type JobDescriptionModelEnv0 map[string]string

// JobDescriptionModelEnv1 defines model for .
type JobDescriptionModelEnv1 = []string

// JobDescriptionModel_Env Dictionary of environment variables to set in the job context
type JobDescriptionModel_Env struct {
	union json.RawMessage
}

// JobMetadataModel defines model for JobMetadataModel.
type JobMetadataModel struct {
	JobId          int     `json:"jobId"`
	Script         *string `json:"script"`
	StandardError  *string `json:"standardError"`
	StandardInput  *string `json:"standardInput"`
	StandardOutput *string `json:"standardOutput"`
}

// JobModel defines model for JobModel.
type JobModel struct {
	Account          *string    `json:"account"`
	AllocationNodes  int        `json:"allocationNodes"`
	Cluster          string     `json:"cluster"`
	Group            *string    `json:"group"`
	JobId            int        `json:"jobId"`
	KillRequestUser  *string    `json:"killRequestUser"`
	Name             string     `json:"name"`
	Nodes            string     `json:"nodes"`
	Partition        string     `json:"partition"`
	Priority         *int       `json:"priority"`
	Status           JobStatus  `json:"status"`
	Tasks            *[]JobTask `json:"tasks"`
	Time             JobTime    `json:"time"`
	User             *string    `json:"user"`
	WorkingDirectory string     `json:"workingDirectory"`
}

// JobStatus defines model for JobStatus.
type JobStatus struct {
	ExitCode        *int    `json:"exitCode"`
	InterruptSignal *int    `json:"interruptSignal"`
	State           string  `json:"state"`
	StateReason     *string `json:"stateReason"`
}

// JobTask defines model for JobTask.
type JobTask struct {
	Id     string    `json:"id"`
	Name   string    `json:"name"`
	Status JobStatus `json:"status"`
	Time   JobTime   `json:"time"`
}

// JobTime defines model for JobTime.
type JobTime struct {
	Elapsed   *int `json:"elapsed"`
	End       *int `json:"end"`
	Limit     *int `json:"limit"`
	Start     *int `json:"start"`
	Suspended *int `json:"suspended"`
}

// MoveRequest defines model for MoveRequest.
type MoveRequest struct {
	// Account Name of the account in the scheduler
	Account    *string `json:"account"`
	SourcePath *string `json:"sourcePath"`

	// TargetPath Target path of the move operation
	TargetPath string `json:"targetPath"`
}

// MoveResponse defines model for MoveResponse.
type MoveResponse struct {
	TransferJob TransferJob `json:"transferJob"`
}

// MultipartUpload Configuration for multipart upload behavior.
type MultipartUpload struct {
	// MaxPartSize Maximum size (in bytes) for multipart data transfers. Default is 2 GB.
	MaxPartSize *int `json:"max_part_size,omitempty"`

	// ParallelRuns Number of parts to upload in parallel to the staging area.
	ParallelRuns *int `json:"parallel_runs,omitempty"`

	// TmpFolder Temporary folder used for storing split parts during upload.
	TmpFolder *string `json:"tmp_folder,omitempty"`

	// UseSplit Enable or disable splitting large files into parts when uploading the file to the staging area.
	UseSplit *bool `json:"use_split,omitempty"`
}

// NodeModel defines model for NodeModel.
type NodeModel struct {
	Address     *string             `json:"address"`
	AllocCpus   *int                `json:"allocCpus"`
	AllocMemory *int                `json:"allocMemory"`
	Cores       *int                `json:"cores"`
	CpuLoad     *float32            `json:"cpuLoad"`
	Cpus        int                 `json:"cpus"`
	Features    *NodeModel_Features `json:"features,omitempty"`
	FreeMemory  *int                `json:"freeMemory"`
	Hostname    *string             `json:"hostname"`
	IdleCpus    *int                `json:"idleCpus"`
	Name        string              `json:"name"`
	Partitions  *[]string           `json:"partitions"`
	Sockets     *int                `json:"sockets"`
	State       NodeModel_State     `json:"state"`
	Threads     *int                `json:"threads"`
	Weight      *int                `json:"weight"`
}

// NodeModelFeatures0 defines model for .
type NodeModelFeatures0 = string

// NodeModelFeatures1 defines model for .
type NodeModelFeatures1 = []string

// NodeModel_Features defines model for NodeModel.Features.
type NodeModel_Features struct {
	union json.RawMessage
}

// NodeModelState0 defines model for .
type NodeModelState0 = string

// NodeModelState1 defines model for .
type NodeModelState1 = []string

// NodeModel_State defines model for NodeModel.State.
type NodeModel_State struct {
	union json.RawMessage
}

// PartitionModel defines model for PartitionModel.
type PartitionModel struct {
	Cpus       *int                     `json:"cpus"`
	Name       string                   `json:"name"`
	Partition  PartitionModel_Partition `json:"partition"`
	TotalNodes *int                     `json:"totalNodes"`
}

// PartitionModelPartition0 defines model for .
type PartitionModelPartition0 = string

// PartitionModelPartition1 defines model for .
type PartitionModelPartition1 = []string

// PartitionModel_Partition defines model for PartitionModel.Partition.
type PartitionModel_Partition struct {
	union json.RawMessage
}

// PosixIdentified defines model for PosixIdentified.
type PosixIdentified struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PostCompressRequest defines model for PostCompressRequest.
type PostCompressRequest struct {
	// Dereference If set to `true`, it follows symbolic links and archive the files they point to instead of the links themselves.
	Dereference *bool `json:"dereference"`

	// MatchPattern Regex pattern to filter files to compress
	MatchPattern *string `json:"matchPattern"`
	SourcePath   *string `json:"sourcePath"`

	// TargetPath Path to the compressed file
	TargetPath string `json:"targetPath"`
}

// PostExtractRequest defines model for PostExtractRequest.
type PostExtractRequest struct {
	SourcePath *string `json:"sourcePath"`

	// TargetPath Path to the directory where to extract the compressed file
	TargetPath string `json:"targetPath"`
}

// PostFileDownloadRequest defines model for PostFileDownloadRequest.
type PostFileDownloadRequest struct {
	// Account Name of the account in the scheduler
	Account    *string `json:"account"`
	SourcePath *string `json:"sourcePath"`
}

// PostFileSymlinkRequest defines model for PostFileSymlinkRequest.
type PostFileSymlinkRequest struct {
	// LinkPath Path to the new symlink
	LinkPath   string  `json:"linkPath"`
	SourcePath *string `json:"sourcePath"`
}

// PostFileSymlinkResponse defines model for PostFileSymlinkResponse.
type PostFileSymlinkResponse struct {
	Output File `json:"output"`
}

// PostFileUploadRequest defines model for PostFileUploadRequest.
type PostFileUploadRequest struct {
	// Account Name of the account in the scheduler
	Account *string `json:"account"`

	// FileName Name of the local file to upload
	FileName string `json:"fileName"`

	// FileSize Size of the file to upload in bytes
	FileSize   int     `json:"fileSize"`
	SourcePath *string `json:"sourcePath"`
}

// PostJobAttachRequest defines model for PostJobAttachRequest.
type PostJobAttachRequest struct {
	// Command Command to attach to the job
	Command *string `json:"command,omitempty"`
}

// PostJobSubmissionResponse defines model for PostJobSubmissionResponse.
type PostJobSubmissionResponse struct {
	JobId *int `json:"jobId"`
}

// PostJobSubmitRequest defines model for PostJobSubmitRequest.
type PostJobSubmitRequest struct {
	Job JobDescriptionModel `json:"job"`
}

// PostMakeDirRequest defines model for PostMakeDirRequest.
type PostMakeDirRequest struct {
	// Parent If set to `true` creates all its parent directories if they do not already exist
	Parent     *bool   `json:"parent"`
	SourcePath *string `json:"sourcePath"`
}

// PostMkdirResponse defines model for PostMkdirResponse.
type PostMkdirResponse struct {
	Output File `json:"output"`
}

// Probing Cluster monitoring attributes.
type Probing struct {
	// Interval Interval in seconds between cluster checks.
	Interval int `json:"interval"`

	// Timeout Maximum time in seconds allowed per check.
	Timeout int `json:"timeout"`
}

// PutFileChmodRequest defines model for PutFileChmodRequest.
type PutFileChmodRequest struct {
	// Mode Mode in octal permission format
	Mode       string  `json:"mode"`
	SourcePath *string `json:"sourcePath"`
}

// PutFileChmodResponse defines model for PutFileChmodResponse.
type PutFileChmodResponse struct {
	Output File `json:"output"`
}

// PutFileChownRequest defines model for PutFileChownRequest.
type PutFileChownRequest struct {
	// Group Group name of the new group owner of the file
	Group *string `json:"group"`

	// Owner User name of the new user owner of the file
	Owner      *string `json:"owner"`
	SourcePath *string `json:"sourcePath"`
}

// PutFileChownResponse defines model for PutFileChownResponse.
type PutFileChownResponse struct {
	Output File `json:"output"`
}

// ReservationModel defines model for ReservationModel.
type ReservationModel struct {
	EndTime   int     `json:"endTime"`
	Features  *string `json:"features"`
	Name      string  `json:"name"`
	NodeList  string  `json:"nodeList"`
	StartTime int     `json:"startTime"`
}

// S3DataTransfer Object storage configuration, including credentials, endpoints, and upload behavior.
type S3DataTransfer struct {
	// AccessKeyId Access key ID for S3-compatible storage.
	AccessKeyId *string `json:"accessKeyId,omitempty"`

	// BucketLifecycleConfiguration Configuration for automatic object lifecycle in storage buckets.
	BucketLifecycleConfiguration *BucketLifecycleConfiguration `json:"bucketLifecycleConfiguration,omitempty"`

	// Multipart Configuration for multipart upload behavior.
	Multipart *MultipartUpload `json:"multipart,omitempty"`

	// Name Name identifier for the storage.
	Name string `json:"name"`

	// PrivateUrl Private/internal endpoint URL for the storage.
	PrivateUrl *string `json:"privateUrl,omitempty"`

	// Probing Cluster monitoring attributes.
	Probing *Probing `json:"probing,omitempty"`

	// PublicUrl Public/external URL for the storage.
	PublicUrl string `json:"publicUrl"`

	// Region Region of the storage bucket.
	Region string `json:"region"`

	// SecretAccessKey Secret access key for storage. You can give directly the content or the file path using `'secret_file:/path/to/file'`.
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`

	// ServiceType Types of data transfer services
	ServiceType DataTransferType `json:"serviceType"`

	// ServicesHealth Optional health information for different services in the cluster.
	ServicesHealth *[]S3DataTransfer_ServicesHealth_Item `json:"servicesHealth"`

	// Tenant Optional tenant identifier for multi-tenant setups.
	Tenant *string `json:"tenant"`

	// Ttl Time-to-live (in seconds) for generated URLs.
	Ttl int `json:"ttl"`
}

// S3DataTransfer_ServicesHealth_Item defines model for S3DataTransfer.servicesHealth.Item.
type S3DataTransfer_ServicesHealth_Item struct {
	union json.RawMessage
}

// S3ServiceHealth Health status of S3-compatible storage.
type S3ServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *bool `json:"healthy"`

	// LastChecked Timestamp of the last health check.
	LastChecked *time.Time `json:"lastChecked"`

	// Latency Service response latency in seconds.
	Latency *float32 `json:"latency"`

	// Message Optional status message.
	Message *string `json:"message"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// SSHClientPool SSH connection pool configuration for remote execution.
type SSHClientPool struct {
	// Host SSH target hostname.
	Host string `json:"host"`

	// MaxClients Maximum number of concurrent SSH clients.
	MaxClients *int `json:"maxClients,omitempty"`

	// Port SSH port.
	Port int `json:"port"`

	// ProxyHost Optional proxy host for tunneling.
	ProxyHost *string `json:"proxyHost"`

	// ProxyPort Optional proxy port.
	ProxyPort *int `json:"proxyPort"`

	// Timeout Various SSH settings.
	Timeout *SSHTimeouts `json:"timeout,omitempty"`
}

// SSHServiceHealth Health status of SSH service.
type SSHServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *bool `json:"healthy"`

	// LastChecked Timestamp of the last health check.
	LastChecked *time.Time `json:"lastChecked"`

	// Latency Service response latency in seconds.
	Latency *float32 `json:"latency"`

	// Message Optional status message.
	Message *string `json:"message"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// SSHTimeouts Various SSH settings.
type SSHTimeouts struct {
	// CommandExecution Timeout (seconds) for executing commands over SSH.
	CommandExecution *int `json:"commandExecution,omitempty"`

	// Connection Timeout (seconds) for initial SSH connection.
	Connection *int `json:"connection,omitempty"`

	// IdleTimeout Max idle time (seconds) before disconnecting.
	IdleTimeout *int `json:"idleTimeout,omitempty"`

	// KeepAlive Interval (seconds) for sending keep-alive messages.
	KeepAlive *int `json:"keepAlive,omitempty"`

	// Login Timeout (seconds) for SSH login/auth.
	Login *int `json:"login,omitempty"`
}

// Scheduler Cluster job scheduler configuration.
type Scheduler struct {
	// ApiUrl REST API endpoint for scheduler.
	ApiUrl *string `json:"apiUrl"`

	// ApiVersion Scheduler API version.
	ApiVersion *string `json:"apiVersion"`

	// Timeout Timeout in seconds for scheduler communication with the API.
	Timeout *int `json:"timeout"`

	// Type Supported job scheduler types.
	Type SchedulerType `json:"type"`

	// Version Scheduler version.
	Version string `json:"version"`
}

// SchedulerServiceHealth Health check result for the job scheduler.
type SchedulerServiceHealth struct {
	// Healthy True if the service is healthy.
	Healthy *bool `json:"healthy"`

	// LastChecked Timestamp of the last health check.
	LastChecked *time.Time `json:"lastChecked"`

	// Latency Service response latency in seconds.
	Latency *float32 `json:"latency"`

	// Message Optional status message.
	Message *string `json:"message"`

	// ServiceType Types of services that can be health-checked.
	ServiceType HealthCheckType `json:"serviceType"`
}

// SchedulerType Supported job scheduler types.
type SchedulerType string

// TransferJob defines model for TransferJob.
type TransferJob struct {
	JobId            int             `json:"jobId"`
	Logs             TransferJobLogs `json:"logs"`
	System           string          `json:"system"`
	WorkingDirectory string          `json:"workingDirectory"`
}

// TransferJobLogs defines model for TransferJobLogs.
type TransferJobLogs struct {
	ErrorLog  string `json:"errorLog"`
	OutputLog string `json:"outputLog"`
}

// UploadFileResponse defines model for UploadFileResponse.
type UploadFileResponse struct {
	CompleteUploadUrl *string     `json:"completeUploadUrl"`
	DownloadUrl       *string     `json:"downloadUrl"`
	MaxPartSize       *int        `json:"maxPartSize"`
	PartsUploadUrls   *[]string   `json:"partsUploadUrls"`
	TransferJob       TransferJob `json:"transferJob"`
}

// UserInfoResponse defines model for UserInfoResponse.
type UserInfoResponse struct {
	Group  PosixIdentified   `json:"group"`
	Groups []PosixIdentified `json:"groups"`
	User   PosixIdentified   `json:"user"`
}

// GetJobsComputeSystemNameJobsGetParams defines parameters for GetJobsComputeSystemNameJobsGet.
type GetJobsComputeSystemNameJobsGetParams struct {
	// Allusers If set to `true` returns all jobs visible by the current user, otherwise only the current user owned jobs
	Allusers *bool `form:"allusers,omitempty" json:"allusers,omitempty"`
}

// GetChecksumFilesystemSystemNameOpsChecksumGetParams defines parameters for GetChecksumFilesystemSystemNameOpsChecksumGet.
type GetChecksumFilesystemSystemNameOpsChecksumGetParams struct {
	// Path Target system
	Path string `form:"path" json:"path"`
}

// GetDownloadFilesystemSystemNameOpsDownloadGetParams defines parameters for GetDownloadFilesystemSystemNameOpsDownloadGet.
type GetDownloadFilesystemSystemNameOpsDownloadGetParams struct {
	// Path A file to download
	Path string `form:"path" json:"path"`
}

// GetFileFilesystemSystemNameOpsFileGetParams defines parameters for GetFileFilesystemSystemNameOpsFileGet.
type GetFileFilesystemSystemNameOpsFileGetParams struct {
	// Path A file or folder path
	Path string `form:"path" json:"path"`
}

// GetHeadFilesystemSystemNameOpsHeadGetParams defines parameters for GetHeadFilesystemSystemNameOpsHeadGet.
type GetHeadFilesystemSystemNameOpsHeadGetParams struct {
	// Path File path
	Path string `form:"path" json:"path"`

	// Bytes The output will be the first NUM bytes of each file.
	Bytes *int `form:"bytes,omitempty" json:"bytes,omitempty"`

	// Lines The output will be the first NUM lines of each file.
	Lines *int `form:"lines,omitempty" json:"lines,omitempty"`

	// SkipTrailing The output will be the whole file, without the last NUM bytes/lines of each file. NUM should be specified in the respective argument through `bytes` or `lines`.
	SkipTrailing *bool `form:"skipTrailing,omitempty" json:"skipTrailing,omitempty"`
}

// GetLsFilesystemSystemNameOpsLsGetParams defines parameters for GetLsFilesystemSystemNameOpsLsGet.
type GetLsFilesystemSystemNameOpsLsGetParams struct {
	// Path The path to list
	Path string `form:"path" json:"path"`

	// ShowHidden Show hidden files
	ShowHidden *bool `form:"showHidden,omitempty" json:"showHidden,omitempty"`

	// NumericUid List numeric user and group IDs
	NumericUid *bool `form:"numericUid,omitempty" json:"numericUid,omitempty"`

	// Recursive Recursively list files and folders
	Recursive *bool `form:"recursive,omitempty" json:"recursive,omitempty"`

	// Dereference Show information for the file the link references.
	Dereference *bool `form:"dereference,omitempty" json:"dereference,omitempty"`
}

// DeleteRmFilesystemSystemNameOpsRmDeleteParams defines parameters for DeleteRmFilesystemSystemNameOpsRmDelete.
type DeleteRmFilesystemSystemNameOpsRmDeleteParams struct {
	// Path The path to delete
	Path string `form:"path" json:"path"`
}

// GetStatFilesystemSystemNameOpsStatGetParams defines parameters for GetStatFilesystemSystemNameOpsStatGet.
type GetStatFilesystemSystemNameOpsStatGetParams struct {
	// Path A file or folder path
	Path string `form:"path" json:"path"`

	// Dereference Follow symbolic links
	Dereference *bool `form:"dereference,omitempty" json:"dereference,omitempty"`
}

// GetTailFilesystemSystemNameOpsTailGetParams defines parameters for GetTailFilesystemSystemNameOpsTailGet.
type GetTailFilesystemSystemNameOpsTailGetParams struct {
	// Path File path
	Path string `form:"path" json:"path"`

	// Bytes The output will be the last NUM bytes of each file.
	Bytes *int `form:"bytes,omitempty" json:"bytes,omitempty"`

	// Lines The output will be the last NUM lines of each file.
	Lines *int `form:"lines,omitempty" json:"lines,omitempty"`

	// SkipHeading The output will be the whole file, without the first NUM bytes/lines of each file. NUM should be specified in the respective argument through `bytes` or `lines`.
	SkipHeading *bool `form:"skipHeading,omitempty" json:"skipHeading,omitempty"`
}

// PostUploadFilesystemSystemNameOpsUploadPostParams defines parameters for PostUploadFilesystemSystemNameOpsUploadPost.
type PostUploadFilesystemSystemNameOpsUploadPostParams struct {
	// Path Specify path where file should be uploaded.
	Path string `form:"path" json:"path"`
}

// GetViewFilesystemSystemNameOpsViewGetParams defines parameters for GetViewFilesystemSystemNameOpsViewGet.
type GetViewFilesystemSystemNameOpsViewGetParams struct {
	// Path File path
	Path string `form:"path" json:"path"`

	// Size Value, in bytes, of the size of data to be retrieved from the file.
	Size *int `form:"size,omitempty" json:"size,omitempty"`

	// Offset Value in bytes of the offset.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// DeleteRmFilesystemSystemNameTransferRmDeleteParams defines parameters for DeleteRmFilesystemSystemNameTransferRmDelete.
type DeleteRmFilesystemSystemNameTransferRmDeleteParams struct {
	// Path The path to delete
	Path    string  `form:"path" json:"path"`
	Account *string `form:"account,omitempty" json:"account,omitempty"`
}

// PostJobSubmitComputeSystemNameJobsPostJSONRequestBody defines body for PostJobSubmitComputeSystemNameJobsPost for application/json ContentType.
type PostJobSubmitComputeSystemNameJobsPostJSONRequestBody = PostJobSubmitRequest

// AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody defines body for AttachComputeSystemNameJobsJobIdAttachPut for application/json ContentType.
type AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody = PostJobAttachRequest

// PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody defines body for PutChmodFilesystemSystemNameOpsChmodPut for application/json ContentType.
type PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody = PutFileChmodRequest

// PutChownFilesystemSystemNameOpsChownPutJSONRequestBody defines body for PutChownFilesystemSystemNameOpsChownPut for application/json ContentType.
type PutChownFilesystemSystemNameOpsChownPutJSONRequestBody = PutFileChownRequest

// PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody defines body for PostCompressFilesystemSystemNameOpsCompressPost for application/json ContentType.
type PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody = PostCompressRequest

// PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody defines body for PostExtractFilesystemSystemNameOpsExtractPost for application/json ContentType.
type PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody = PostExtractRequest

// PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody defines body for PostMkdirFilesystemSystemNameOpsMkdirPost for application/json ContentType.
type PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody = PostMakeDirRequest

// PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody defines body for PostSymlinkFilesystemSystemNameOpsSymlinkPost for application/json ContentType.
type PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody = PostFileSymlinkRequest

// PostUploadFilesystemSystemNameOpsUploadPostMultipartRequestBody defines body for PostUploadFilesystemSystemNameOpsUploadPost for multipart/form-data ContentType.
type PostUploadFilesystemSystemNameOpsUploadPostMultipartRequestBody = BodyPostUploadFilesystemSystemNameOpsUploadPost

// CompressFilesystemSystemNameTransferCompressPostJSONRequestBody defines body for CompressFilesystemSystemNameTransferCompressPost for application/json ContentType.
type CompressFilesystemSystemNameTransferCompressPostJSONRequestBody = CompressRequest

// PostCpFilesystemSystemNameTransferCpPostJSONRequestBody defines body for PostCpFilesystemSystemNameTransferCpPost for application/json ContentType.
type PostCpFilesystemSystemNameTransferCpPostJSONRequestBody = CopyRequest

// PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody defines body for PostDownloadFilesystemSystemNameTransferDownloadPost for application/json ContentType.
type PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody = PostFileDownloadRequest

// ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody defines body for ExtractFilesystemSystemNameTransferExtractPost for application/json ContentType.
type ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody = ExtractRequest

// MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody defines body for MoveMvFilesystemSystemNameTransferMvPost for application/json ContentType.
type MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody = MoveRequest

// PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody defines body for PostUploadFilesystemSystemNameTransferUploadPost for application/json ContentType.
type PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody = PostFileUploadRequest

// AsSchedulerServiceHealth returns the union data inside the HPCCluster_ServicesHealth_Item as a SchedulerServiceHealth
func (t HPCCluster_ServicesHealth_Item) AsSchedulerServiceHealth() (SchedulerServiceHealth, error) {
	var body SchedulerServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSchedulerServiceHealth overwrites any union data inside the HPCCluster_ServicesHealth_Item as the provided SchedulerServiceHealth
func (t *HPCCluster_ServicesHealth_Item) FromSchedulerServiceHealth(v SchedulerServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSchedulerServiceHealth performs a merge with any union data inside the HPCCluster_ServicesHealth_Item, using the provided SchedulerServiceHealth
func (t *HPCCluster_ServicesHealth_Item) MergeSchedulerServiceHealth(v SchedulerServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilesystemServiceHealth returns the union data inside the HPCCluster_ServicesHealth_Item as a FilesystemServiceHealth
func (t HPCCluster_ServicesHealth_Item) AsFilesystemServiceHealth() (FilesystemServiceHealth, error) {
	var body FilesystemServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilesystemServiceHealth overwrites any union data inside the HPCCluster_ServicesHealth_Item as the provided FilesystemServiceHealth
func (t *HPCCluster_ServicesHealth_Item) FromFilesystemServiceHealth(v FilesystemServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilesystemServiceHealth performs a merge with any union data inside the HPCCluster_ServicesHealth_Item, using the provided FilesystemServiceHealth
func (t *HPCCluster_ServicesHealth_Item) MergeFilesystemServiceHealth(v FilesystemServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSSHServiceHealth returns the union data inside the HPCCluster_ServicesHealth_Item as a SSHServiceHealth
func (t HPCCluster_ServicesHealth_Item) AsSSHServiceHealth() (SSHServiceHealth, error) {
	var body SSHServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSSHServiceHealth overwrites any union data inside the HPCCluster_ServicesHealth_Item as the provided SSHServiceHealth
func (t *HPCCluster_ServicesHealth_Item) FromSSHServiceHealth(v SSHServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSSHServiceHealth performs a merge with any union data inside the HPCCluster_ServicesHealth_Item, using the provided SSHServiceHealth
func (t *HPCCluster_ServicesHealth_Item) MergeSSHServiceHealth(v SSHServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckException returns the union data inside the HPCCluster_ServicesHealth_Item as a HealthCheckException
func (t HPCCluster_ServicesHealth_Item) AsHealthCheckException() (HealthCheckException, error) {
	var body HealthCheckException
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckException overwrites any union data inside the HPCCluster_ServicesHealth_Item as the provided HealthCheckException
func (t *HPCCluster_ServicesHealth_Item) FromHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckException performs a merge with any union data inside the HPCCluster_ServicesHealth_Item, using the provided HealthCheckException
func (t *HPCCluster_ServicesHealth_Item) MergeHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HPCCluster_ServicesHealth_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HPCCluster_ServicesHealth_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobDescriptionModelEnv0 returns the union data inside the JobDescriptionModel_Env as a JobDescriptionModelEnv0
func (t JobDescriptionModel_Env) AsJobDescriptionModelEnv0() (JobDescriptionModelEnv0, error) {
	var body JobDescriptionModelEnv0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelEnv0 overwrites any union data inside the JobDescriptionModel_Env as the provided JobDescriptionModelEnv0
func (t *JobDescriptionModel_Env) FromJobDescriptionModelEnv0(v JobDescriptionModelEnv0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelEnv0 performs a merge with any union data inside the JobDescriptionModel_Env, using the provided JobDescriptionModelEnv0
func (t *JobDescriptionModel_Env) MergeJobDescriptionModelEnv0(v JobDescriptionModelEnv0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobDescriptionModelEnv1 returns the union data inside the JobDescriptionModel_Env as a JobDescriptionModelEnv1
func (t JobDescriptionModel_Env) AsJobDescriptionModelEnv1() (JobDescriptionModelEnv1, error) {
	var body JobDescriptionModelEnv1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobDescriptionModelEnv1 overwrites any union data inside the JobDescriptionModel_Env as the provided JobDescriptionModelEnv1
func (t *JobDescriptionModel_Env) FromJobDescriptionModelEnv1(v JobDescriptionModelEnv1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobDescriptionModelEnv1 performs a merge with any union data inside the JobDescriptionModel_Env, using the provided JobDescriptionModelEnv1
func (t *JobDescriptionModel_Env) MergeJobDescriptionModelEnv1(v JobDescriptionModelEnv1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobDescriptionModel_Env) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobDescriptionModel_Env) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelFeatures0 returns the union data inside the NodeModel_Features as a NodeModelFeatures0
func (t NodeModel_Features) AsNodeModelFeatures0() (NodeModelFeatures0, error) {
	var body NodeModelFeatures0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFeatures0 overwrites any union data inside the NodeModel_Features as the provided NodeModelFeatures0
func (t *NodeModel_Features) FromNodeModelFeatures0(v NodeModelFeatures0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFeatures0 performs a merge with any union data inside the NodeModel_Features, using the provided NodeModelFeatures0
func (t *NodeModel_Features) MergeNodeModelFeatures0(v NodeModelFeatures0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelFeatures1 returns the union data inside the NodeModel_Features as a NodeModelFeatures1
func (t NodeModel_Features) AsNodeModelFeatures1() (NodeModelFeatures1, error) {
	var body NodeModelFeatures1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelFeatures1 overwrites any union data inside the NodeModel_Features as the provided NodeModelFeatures1
func (t *NodeModel_Features) FromNodeModelFeatures1(v NodeModelFeatures1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelFeatures1 performs a merge with any union data inside the NodeModel_Features, using the provided NodeModelFeatures1
func (t *NodeModel_Features) MergeNodeModelFeatures1(v NodeModelFeatures1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_Features) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_Features) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNodeModelState0 returns the union data inside the NodeModel_State as a NodeModelState0
func (t NodeModel_State) AsNodeModelState0() (NodeModelState0, error) {
	var body NodeModelState0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelState0 overwrites any union data inside the NodeModel_State as the provided NodeModelState0
func (t *NodeModel_State) FromNodeModelState0(v NodeModelState0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelState0 performs a merge with any union data inside the NodeModel_State, using the provided NodeModelState0
func (t *NodeModel_State) MergeNodeModelState0(v NodeModelState0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNodeModelState1 returns the union data inside the NodeModel_State as a NodeModelState1
func (t NodeModel_State) AsNodeModelState1() (NodeModelState1, error) {
	var body NodeModelState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNodeModelState1 overwrites any union data inside the NodeModel_State as the provided NodeModelState1
func (t *NodeModel_State) FromNodeModelState1(v NodeModelState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNodeModelState1 performs a merge with any union data inside the NodeModel_State, using the provided NodeModelState1
func (t *NodeModel_State) MergeNodeModelState1(v NodeModelState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NodeModel_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NodeModel_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPartitionModelPartition0 returns the union data inside the PartitionModel_Partition as a PartitionModelPartition0
func (t PartitionModel_Partition) AsPartitionModelPartition0() (PartitionModelPartition0, error) {
	var body PartitionModelPartition0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelPartition0 overwrites any union data inside the PartitionModel_Partition as the provided PartitionModelPartition0
func (t *PartitionModel_Partition) FromPartitionModelPartition0(v PartitionModelPartition0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelPartition0 performs a merge with any union data inside the PartitionModel_Partition, using the provided PartitionModelPartition0
func (t *PartitionModel_Partition) MergePartitionModelPartition0(v PartitionModelPartition0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartitionModelPartition1 returns the union data inside the PartitionModel_Partition as a PartitionModelPartition1
func (t PartitionModel_Partition) AsPartitionModelPartition1() (PartitionModelPartition1, error) {
	var body PartitionModelPartition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartitionModelPartition1 overwrites any union data inside the PartitionModel_Partition as the provided PartitionModelPartition1
func (t *PartitionModel_Partition) FromPartitionModelPartition1(v PartitionModelPartition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartitionModelPartition1 performs a merge with any union data inside the PartitionModel_Partition, using the provided PartitionModelPartition1
func (t *PartitionModel_Partition) MergePartitionModelPartition1(v PartitionModelPartition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartitionModel_Partition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PartitionModel_Partition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsS3ServiceHealth returns the union data inside the S3DataTransfer_ServicesHealth_Item as a S3ServiceHealth
func (t S3DataTransfer_ServicesHealth_Item) AsS3ServiceHealth() (S3ServiceHealth, error) {
	var body S3ServiceHealth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3ServiceHealth overwrites any union data inside the S3DataTransfer_ServicesHealth_Item as the provided S3ServiceHealth
func (t *S3DataTransfer_ServicesHealth_Item) FromS3ServiceHealth(v S3ServiceHealth) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3ServiceHealth performs a merge with any union data inside the S3DataTransfer_ServicesHealth_Item, using the provided S3ServiceHealth
func (t *S3DataTransfer_ServicesHealth_Item) MergeS3ServiceHealth(v S3ServiceHealth) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHealthCheckException returns the union data inside the S3DataTransfer_ServicesHealth_Item as a HealthCheckException
func (t S3DataTransfer_ServicesHealth_Item) AsHealthCheckException() (HealthCheckException, error) {
	var body HealthCheckException
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHealthCheckException overwrites any union data inside the S3DataTransfer_ServicesHealth_Item as the provided HealthCheckException
func (t *S3DataTransfer_ServicesHealth_Item) FromHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHealthCheckException performs a merge with any union data inside the S3DataTransfer_ServicesHealth_Item, using the provided HealthCheckException
func (t *S3DataTransfer_ServicesHealth_Item) MergeHealthCheckException(v HealthCheckException) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t S3DataTransfer_ServicesHealth_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *S3DataTransfer_ServicesHealth_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetJobsComputeSystemNameJobsGet request
	GetJobsComputeSystemNameJobsGet(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobSubmitComputeSystemNameJobsPostWithBody request with any body
	PostJobSubmitComputeSystemNameJobsPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobSubmitComputeSystemNameJobsPost(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobCancelComputeSystemNameJobsJobIdDelete request
	DeleteJobCancelComputeSystemNameJobsJobIdDelete(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobComputeSystemNameJobsJobIdGet request
	GetJobComputeSystemNameJobsJobIdGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachComputeSystemNameJobsJobIdAttachPutWithBody request with any body
	AttachComputeSystemNameJobsJobIdAttachPutWithBody(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AttachComputeSystemNameJobsJobIdAttachPut(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobMetadataComputeSystemNameJobsJobIdMetadataGet request
	GetJobMetadataComputeSystemNameJobsJobIdMetadataGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChecksumFilesystemSystemNameOpsChecksumGet request
	GetChecksumFilesystemSystemNameOpsChecksumGet(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChmodFilesystemSystemNameOpsChmodPutWithBody request with any body
	PutChmodFilesystemSystemNameOpsChmodPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChmodFilesystemSystemNameOpsChmodPut(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChownFilesystemSystemNameOpsChownPutWithBody request with any body
	PutChownFilesystemSystemNameOpsChownPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChownFilesystemSystemNameOpsChownPut(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCompressFilesystemSystemNameOpsCompressPostWithBody request with any body
	PostCompressFilesystemSystemNameOpsCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCompressFilesystemSystemNameOpsCompressPost(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDownloadFilesystemSystemNameOpsDownloadGet request
	GetDownloadFilesystemSystemNameOpsDownloadGet(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExtractFilesystemSystemNameOpsExtractPostWithBody request with any body
	PostExtractFilesystemSystemNameOpsExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExtractFilesystemSystemNameOpsExtractPost(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFileFilesystemSystemNameOpsFileGet request
	GetFileFilesystemSystemNameOpsFileGet(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeadFilesystemSystemNameOpsHeadGet request
	GetHeadFilesystemSystemNameOpsHeadGet(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLsFilesystemSystemNameOpsLsGet request
	GetLsFilesystemSystemNameOpsLsGet(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMkdirFilesystemSystemNameOpsMkdirPostWithBody request with any body
	PostMkdirFilesystemSystemNameOpsMkdirPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMkdirFilesystemSystemNameOpsMkdirPost(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRmFilesystemSystemNameOpsRmDelete request
	DeleteRmFilesystemSystemNameOpsRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatFilesystemSystemNameOpsStatGet request
	GetStatFilesystemSystemNameOpsStatGet(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody request with any body
	PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSymlinkFilesystemSystemNameOpsSymlinkPost(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTailFilesystemSystemNameOpsTailGet request
	GetTailFilesystemSystemNameOpsTailGet(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadFilesystemSystemNameOpsUploadPostWithBody request with any body
	PostUploadFilesystemSystemNameOpsUploadPostWithBody(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetViewFilesystemSystemNameOpsViewGet request
	GetViewFilesystemSystemNameOpsViewGet(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompressFilesystemSystemNameTransferCompressPostWithBody request with any body
	CompressFilesystemSystemNameTransferCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompressFilesystemSystemNameTransferCompressPost(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCpFilesystemSystemNameTransferCpPostWithBody request with any body
	PostCpFilesystemSystemNameTransferCpPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCpFilesystemSystemNameTransferCpPost(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDownloadFilesystemSystemNameTransferDownloadPostWithBody request with any body
	PostDownloadFilesystemSystemNameTransferDownloadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDownloadFilesystemSystemNameTransferDownloadPost(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExtractFilesystemSystemNameTransferExtractPostWithBody request with any body
	ExtractFilesystemSystemNameTransferExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExtractFilesystemSystemNameTransferExtractPost(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveMvFilesystemSystemNameTransferMvPostWithBody request with any body
	MoveMvFilesystemSystemNameTransferMvPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MoveMvFilesystemSystemNameTransferMvPost(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRmFilesystemSystemNameTransferRmDelete request
	DeleteRmFilesystemSystemNameTransferRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUploadFilesystemSystemNameTransferUploadPostWithBody request with any body
	PostUploadFilesystemSystemNameTransferUploadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUploadFilesystemSystemNameTransferUploadPost(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLivenessStatusLivenessGet request
	GetLivenessStatusLivenessGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemsStatusSystemsGet request
	GetSystemsStatusSystemsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemNodesStatusSystemNameNodesGet request
	GetSystemNodesStatusSystemNameNodesGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemPartitionsStatusSystemNamePartitionsGet request
	GetSystemPartitionsStatusSystemNamePartitionsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemReservationsStatusSystemNameReservationsGet request
	GetSystemReservationsStatusSystemNameReservationsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserinfoStatusSystemNameUserinfoGet request
	GetUserinfoStatusSystemNameUserinfoGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetJobsComputeSystemNameJobsGet(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsComputeSystemNameJobsGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobSubmitComputeSystemNameJobsPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobSubmitComputeSystemNameJobsPost(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobSubmitComputeSystemNameJobsPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobCancelComputeSystemNameJobsJobIdDelete(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobCancelComputeSystemNameJobsJobIdDeleteRequest(c.Server, systemName, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobComputeSystemNameJobsJobIdGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobComputeSystemNameJobsJobIdGetRequest(c.Server, systemName, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachComputeSystemNameJobsJobIdAttachPutWithBody(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody(c.Server, systemName, jobId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachComputeSystemNameJobsJobIdAttachPut(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachComputeSystemNameJobsJobIdAttachPutRequest(c.Server, systemName, jobId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobMetadataComputeSystemNameJobsJobIdMetadataGet(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobMetadataComputeSystemNameJobsJobIdMetadataGetRequest(c.Server, systemName, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChecksumFilesystemSystemNameOpsChecksumGet(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChecksumFilesystemSystemNameOpsChecksumGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChmodFilesystemSystemNameOpsChmodPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChmodFilesystemSystemNameOpsChmodPut(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChmodFilesystemSystemNameOpsChmodPutRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChownFilesystemSystemNameOpsChownPutWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChownFilesystemSystemNameOpsChownPut(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChownFilesystemSystemNameOpsChownPutRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompressFilesystemSystemNameOpsCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCompressFilesystemSystemNameOpsCompressPost(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCompressFilesystemSystemNameOpsCompressPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDownloadFilesystemSystemNameOpsDownloadGet(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDownloadFilesystemSystemNameOpsDownloadGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExtractFilesystemSystemNameOpsExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExtractFilesystemSystemNameOpsExtractPost(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExtractFilesystemSystemNameOpsExtractPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileFilesystemSystemNameOpsFileGet(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFileFilesystemSystemNameOpsFileGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeadFilesystemSystemNameOpsHeadGet(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeadFilesystemSystemNameOpsHeadGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLsFilesystemSystemNameOpsLsGet(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLsFilesystemSystemNameOpsLsGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMkdirFilesystemSystemNameOpsMkdirPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMkdirFilesystemSystemNameOpsMkdirPost(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMkdirFilesystemSystemNameOpsMkdirPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRmFilesystemSystemNameOpsRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRmFilesystemSystemNameOpsRmDeleteRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatFilesystemSystemNameOpsStatGet(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatFilesystemSystemNameOpsStatGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSymlinkFilesystemSystemNameOpsSymlinkPost(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTailFilesystemSystemNameOpsTailGet(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTailFilesystemSystemNameOpsTailGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadFilesystemSystemNameOpsUploadPostWithBody(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadFilesystemSystemNameOpsUploadPostRequestWithBody(c.Server, systemName, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewFilesystemSystemNameOpsViewGet(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewFilesystemSystemNameOpsViewGetRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressFilesystemSystemNameTransferCompressPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompressFilesystemSystemNameTransferCompressPost(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompressFilesystemSystemNameTransferCompressPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCpFilesystemSystemNameTransferCpPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCpFilesystemSystemNameTransferCpPost(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCpFilesystemSystemNameTransferCpPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDownloadFilesystemSystemNameTransferDownloadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDownloadFilesystemSystemNameTransferDownloadPost(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDownloadFilesystemSystemNameTransferDownloadPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractFilesystemSystemNameTransferExtractPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExtractFilesystemSystemNameTransferExtractPost(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExtractFilesystemSystemNameTransferExtractPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMvFilesystemSystemNameTransferMvPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveMvFilesystemSystemNameTransferMvPost(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveMvFilesystemSystemNameTransferMvPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRmFilesystemSystemNameTransferRmDelete(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRmFilesystemSystemNameTransferRmDeleteRequest(c.Server, systemName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadFilesystemSystemNameTransferUploadPostWithBody(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody(c.Server, systemName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUploadFilesystemSystemNameTransferUploadPost(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUploadFilesystemSystemNameTransferUploadPostRequest(c.Server, systemName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLivenessStatusLivenessGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLivenessStatusLivenessGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemsStatusSystemsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemsStatusSystemsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemNodesStatusSystemNameNodesGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemNodesStatusSystemNameNodesGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemPartitionsStatusSystemNamePartitionsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemPartitionsStatusSystemNamePartitionsGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemReservationsStatusSystemNameReservationsGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemReservationsStatusSystemNameReservationsGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserinfoStatusSystemNameUserinfoGet(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserinfoStatusSystemNameUserinfoGetRequest(c.Server, systemName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetJobsComputeSystemNameJobsGetRequest generates requests for GetJobsComputeSystemNameJobsGet
func NewGetJobsComputeSystemNameJobsGetRequest(server string, systemName string, params *GetJobsComputeSystemNameJobsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Allusers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allusers", runtime.ParamLocationQuery, *params.Allusers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJobSubmitComputeSystemNameJobsPostRequest calls the generic PostJobSubmitComputeSystemNameJobsPost builder with application/json body
func NewPostJobSubmitComputeSystemNameJobsPostRequest(server string, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody generates requests for PostJobSubmitComputeSystemNameJobsPost with any type of body
func NewPostJobSubmitComputeSystemNameJobsPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobCancelComputeSystemNameJobsJobIdDeleteRequest generates requests for DeleteJobCancelComputeSystemNameJobsJobIdDelete
func NewDeleteJobCancelComputeSystemNameJobsJobIdDeleteRequest(server string, systemName string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobComputeSystemNameJobsJobIdGetRequest generates requests for GetJobComputeSystemNameJobsJobIdGet
func NewGetJobComputeSystemNameJobsJobIdGetRequest(server string, systemName string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachComputeSystemNameJobsJobIdAttachPutRequest calls the generic AttachComputeSystemNameJobsJobIdAttachPut builder with application/json body
func NewAttachComputeSystemNameJobsJobIdAttachPutRequest(server string, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody(server, systemName, jobId, "application/json", bodyReader)
}

// NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody generates requests for AttachComputeSystemNameJobsJobIdAttachPut with any type of body
func NewAttachComputeSystemNameJobsJobIdAttachPutRequestWithBody(server string, systemName string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s/attach", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobMetadataComputeSystemNameJobsJobIdMetadataGetRequest generates requests for GetJobMetadataComputeSystemNameJobsJobIdMetadataGet
func NewGetJobMetadataComputeSystemNameJobsJobIdMetadataGetRequest(server string, systemName string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/%s/jobs/%s/metadata", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChecksumFilesystemSystemNameOpsChecksumGetRequest generates requests for GetChecksumFilesystemSystemNameOpsChecksumGet
func NewGetChecksumFilesystemSystemNameOpsChecksumGetRequest(server string, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/checksum", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChmodFilesystemSystemNameOpsChmodPutRequest calls the generic PutChmodFilesystemSystemNameOpsChmodPut builder with application/json body
func NewPutChmodFilesystemSystemNameOpsChmodPutRequest(server string, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody generates requests for PutChmodFilesystemSystemNameOpsChmodPut with any type of body
func NewPutChmodFilesystemSystemNameOpsChmodPutRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/chmod", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutChownFilesystemSystemNameOpsChownPutRequest calls the generic PutChownFilesystemSystemNameOpsChownPut builder with application/json body
func NewPutChownFilesystemSystemNameOpsChownPutRequest(server string, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody generates requests for PutChownFilesystemSystemNameOpsChownPut with any type of body
func NewPutChownFilesystemSystemNameOpsChownPutRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/chown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCompressFilesystemSystemNameOpsCompressPostRequest calls the generic PostCompressFilesystemSystemNameOpsCompressPost builder with application/json body
func NewPostCompressFilesystemSystemNameOpsCompressPostRequest(server string, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody generates requests for PostCompressFilesystemSystemNameOpsCompressPost with any type of body
func NewPostCompressFilesystemSystemNameOpsCompressPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/compress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDownloadFilesystemSystemNameOpsDownloadGetRequest generates requests for GetDownloadFilesystemSystemNameOpsDownloadGet
func NewGetDownloadFilesystemSystemNameOpsDownloadGetRequest(server string, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExtractFilesystemSystemNameOpsExtractPostRequest calls the generic PostExtractFilesystemSystemNameOpsExtractPost builder with application/json body
func NewPostExtractFilesystemSystemNameOpsExtractPostRequest(server string, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody generates requests for PostExtractFilesystemSystemNameOpsExtractPost with any type of body
func NewPostExtractFilesystemSystemNameOpsExtractPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFileFilesystemSystemNameOpsFileGetRequest generates requests for GetFileFilesystemSystemNameOpsFileGet
func NewGetFileFilesystemSystemNameOpsFileGetRequest(server string, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/file", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeadFilesystemSystemNameOpsHeadGetRequest generates requests for GetHeadFilesystemSystemNameOpsHeadGet
func NewGetHeadFilesystemSystemNameOpsHeadGetRequest(server string, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/head", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Bytes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bytes", runtime.ParamLocationQuery, *params.Bytes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipTrailing != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipTrailing", runtime.ParamLocationQuery, *params.SkipTrailing); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLsFilesystemSystemNameOpsLsGetRequest generates requests for GetLsFilesystemSystemNameOpsLsGet
func NewGetLsFilesystemSystemNameOpsLsGetRequest(server string, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/ls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ShowHidden != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showHidden", runtime.ParamLocationQuery, *params.ShowHidden); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NumericUid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numericUid", runtime.ParamLocationQuery, *params.NumericUid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recursive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dereference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dereference", runtime.ParamLocationQuery, *params.Dereference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMkdirFilesystemSystemNameOpsMkdirPostRequest calls the generic PostMkdirFilesystemSystemNameOpsMkdirPost builder with application/json body
func NewPostMkdirFilesystemSystemNameOpsMkdirPostRequest(server string, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody generates requests for PostMkdirFilesystemSystemNameOpsMkdirPost with any type of body
func NewPostMkdirFilesystemSystemNameOpsMkdirPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/mkdir", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRmFilesystemSystemNameOpsRmDeleteRequest generates requests for DeleteRmFilesystemSystemNameOpsRmDelete
func NewDeleteRmFilesystemSystemNameOpsRmDeleteRequest(server string, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/rm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatFilesystemSystemNameOpsStatGetRequest generates requests for GetStatFilesystemSystemNameOpsStatGet
func NewGetStatFilesystemSystemNameOpsStatGetRequest(server string, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/stat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Dereference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dereference", runtime.ParamLocationQuery, *params.Dereference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequest calls the generic PostSymlinkFilesystemSystemNameOpsSymlinkPost builder with application/json body
func NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequest(server string, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody generates requests for PostSymlinkFilesystemSystemNameOpsSymlinkPost with any type of body
func NewPostSymlinkFilesystemSystemNameOpsSymlinkPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/symlink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTailFilesystemSystemNameOpsTailGetRequest generates requests for GetTailFilesystemSystemNameOpsTailGet
func NewGetTailFilesystemSystemNameOpsTailGetRequest(server string, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/tail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Bytes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bytes", runtime.ParamLocationQuery, *params.Bytes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lines != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lines", runtime.ParamLocationQuery, *params.Lines); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipHeading != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skipHeading", runtime.ParamLocationQuery, *params.SkipHeading); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUploadFilesystemSystemNameOpsUploadPostRequestWithBody generates requests for PostUploadFilesystemSystemNameOpsUploadPost with any type of body
func NewPostUploadFilesystemSystemNameOpsUploadPostRequestWithBody(server string, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetViewFilesystemSystemNameOpsViewGetRequest generates requests for GetViewFilesystemSystemNameOpsViewGet
func NewGetViewFilesystemSystemNameOpsViewGetRequest(server string, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/ops/view", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCompressFilesystemSystemNameTransferCompressPostRequest calls the generic CompressFilesystemSystemNameTransferCompressPost builder with application/json body
func NewCompressFilesystemSystemNameTransferCompressPostRequest(server string, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody generates requests for CompressFilesystemSystemNameTransferCompressPost with any type of body
func NewCompressFilesystemSystemNameTransferCompressPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/compress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCpFilesystemSystemNameTransferCpPostRequest calls the generic PostCpFilesystemSystemNameTransferCpPost builder with application/json body
func NewPostCpFilesystemSystemNameTransferCpPostRequest(server string, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody generates requests for PostCpFilesystemSystemNameTransferCpPost with any type of body
func NewPostCpFilesystemSystemNameTransferCpPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/cp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDownloadFilesystemSystemNameTransferDownloadPostRequest calls the generic PostDownloadFilesystemSystemNameTransferDownloadPost builder with application/json body
func NewPostDownloadFilesystemSystemNameTransferDownloadPostRequest(server string, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody generates requests for PostDownloadFilesystemSystemNameTransferDownloadPost with any type of body
func NewPostDownloadFilesystemSystemNameTransferDownloadPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExtractFilesystemSystemNameTransferExtractPostRequest calls the generic ExtractFilesystemSystemNameTransferExtractPost builder with application/json body
func NewExtractFilesystemSystemNameTransferExtractPostRequest(server string, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody generates requests for ExtractFilesystemSystemNameTransferExtractPost with any type of body
func NewExtractFilesystemSystemNameTransferExtractPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/extract", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveMvFilesystemSystemNameTransferMvPostRequest calls the generic MoveMvFilesystemSystemNameTransferMvPost builder with application/json body
func NewMoveMvFilesystemSystemNameTransferMvPostRequest(server string, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody generates requests for MoveMvFilesystemSystemNameTransferMvPost with any type of body
func NewMoveMvFilesystemSystemNameTransferMvPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/mv", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRmFilesystemSystemNameTransferRmDeleteRequest generates requests for DeleteRmFilesystemSystemNameTransferRmDelete
func NewDeleteRmFilesystemSystemNameTransferRmDeleteRequest(server string, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/rm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Account != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account", runtime.ParamLocationQuery, *params.Account); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUploadFilesystemSystemNameTransferUploadPostRequest calls the generic PostUploadFilesystemSystemNameTransferUploadPost builder with application/json body
func NewPostUploadFilesystemSystemNameTransferUploadPostRequest(server string, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody(server, systemName, "application/json", bodyReader)
}

// NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody generates requests for PostUploadFilesystemSystemNameTransferUploadPost with any type of body
func NewPostUploadFilesystemSystemNameTransferUploadPostRequestWithBody(server string, systemName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filesystem/%s/transfer/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLivenessStatusLivenessGetRequest generates requests for GetLivenessStatusLivenessGet
func NewGetLivenessStatusLivenessGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/liveness/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemsStatusSystemsGetRequest generates requests for GetSystemsStatusSystemsGet
func NewGetSystemsStatusSystemsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemNodesStatusSystemNameNodesGetRequest generates requests for GetSystemNodesStatusSystemNameNodesGet
func NewGetSystemNodesStatusSystemNameNodesGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemPartitionsStatusSystemNamePartitionsGetRequest generates requests for GetSystemPartitionsStatusSystemNamePartitionsGet
func NewGetSystemPartitionsStatusSystemNamePartitionsGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/partitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemReservationsStatusSystemNameReservationsGetRequest generates requests for GetSystemReservationsStatusSystemNameReservationsGet
func NewGetSystemReservationsStatusSystemNameReservationsGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserinfoStatusSystemNameUserinfoGetRequest generates requests for GetUserinfoStatusSystemNameUserinfoGet
func NewGetUserinfoStatusSystemNameUserinfoGetRequest(server string, systemName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "system_name", runtime.ParamLocationPath, systemName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s/userinfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetJobsComputeSystemNameJobsGetWithResponse request
	GetJobsComputeSystemNameJobsGetWithResponse(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*GetJobsComputeSystemNameJobsGetResponse, error)

	// PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse request with any body
	PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error)

	PostJobSubmitComputeSystemNameJobsPostWithResponse(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error)

	// DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse request
	DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse, error)

	// GetJobComputeSystemNameJobsJobIdGetWithResponse request
	GetJobComputeSystemNameJobsJobIdGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobComputeSystemNameJobsJobIdGetResponse, error)

	// AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse request with any body
	AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error)

	AttachComputeSystemNameJobsJobIdAttachPutWithResponse(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error)

	// GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse request
	GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse, error)

	// GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse request
	GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*GetChecksumFilesystemSystemNameOpsChecksumGetResponse, error)

	// PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse request with any body
	PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error)

	PutChmodFilesystemSystemNameOpsChmodPutWithResponse(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error)

	// PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse request with any body
	PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error)

	PutChownFilesystemSystemNameOpsChownPutWithResponse(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error)

	// PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse request with any body
	PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error)

	PostCompressFilesystemSystemNameOpsCompressPostWithResponse(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error)

	// GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse request
	GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*GetDownloadFilesystemSystemNameOpsDownloadGetResponse, error)

	// PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse request with any body
	PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error)

	PostExtractFilesystemSystemNameOpsExtractPostWithResponse(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error)

	// GetFileFilesystemSystemNameOpsFileGetWithResponse request
	GetFileFilesystemSystemNameOpsFileGetWithResponse(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*GetFileFilesystemSystemNameOpsFileGetResponse, error)

	// GetHeadFilesystemSystemNameOpsHeadGetWithResponse request
	GetHeadFilesystemSystemNameOpsHeadGetWithResponse(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*GetHeadFilesystemSystemNameOpsHeadGetResponse, error)

	// GetLsFilesystemSystemNameOpsLsGetWithResponse request
	GetLsFilesystemSystemNameOpsLsGetWithResponse(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*GetLsFilesystemSystemNameOpsLsGetResponse, error)

	// PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse request with any body
	PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error)

	PostMkdirFilesystemSystemNameOpsMkdirPostWithResponse(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error)

	// DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse request
	DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameOpsRmDeleteResponse, error)

	// GetStatFilesystemSystemNameOpsStatGetWithResponse request
	GetStatFilesystemSystemNameOpsStatGetWithResponse(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*GetStatFilesystemSystemNameOpsStatGetResponse, error)

	// PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse request with any body
	PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error)

	PostSymlinkFilesystemSystemNameOpsSymlinkPostWithResponse(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error)

	// GetTailFilesystemSystemNameOpsTailGetWithResponse request
	GetTailFilesystemSystemNameOpsTailGetWithResponse(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*GetTailFilesystemSystemNameOpsTailGetResponse, error)

	// PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse request with any body
	PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameOpsUploadPostResponse, error)

	// GetViewFilesystemSystemNameOpsViewGetWithResponse request
	GetViewFilesystemSystemNameOpsViewGetWithResponse(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*GetViewFilesystemSystemNameOpsViewGetResponse, error)

	// CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse request with any body
	CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error)

	CompressFilesystemSystemNameTransferCompressPostWithResponse(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error)

	// PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse request with any body
	PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error)

	PostCpFilesystemSystemNameTransferCpPostWithResponse(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error)

	// PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse request with any body
	PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error)

	PostDownloadFilesystemSystemNameTransferDownloadPostWithResponse(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error)

	// ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse request with any body
	ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error)

	ExtractFilesystemSystemNameTransferExtractPostWithResponse(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error)

	// MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse request with any body
	MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error)

	MoveMvFilesystemSystemNameTransferMvPostWithResponse(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error)

	// DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse request
	DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameTransferRmDeleteResponse, error)

	// PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse request with any body
	PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error)

	PostUploadFilesystemSystemNameTransferUploadPostWithResponse(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error)

	// GetLivenessStatusLivenessGetWithResponse request
	GetLivenessStatusLivenessGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLivenessStatusLivenessGetResponse, error)

	// GetSystemsStatusSystemsGetWithResponse request
	GetSystemsStatusSystemsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemsStatusSystemsGetResponse, error)

	// GetSystemNodesStatusSystemNameNodesGetWithResponse request
	GetSystemNodesStatusSystemNameNodesGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemNodesStatusSystemNameNodesGetResponse, error)

	// GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse request
	GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemPartitionsStatusSystemNamePartitionsGetResponse, error)

	// GetSystemReservationsStatusSystemNameReservationsGetWithResponse request
	GetSystemReservationsStatusSystemNameReservationsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemReservationsStatusSystemNameReservationsGetResponse, error)

	// GetUserinfoStatusSystemNameUserinfoGetWithResponse request
	GetUserinfoStatusSystemNameUserinfoGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetUserinfoStatusSystemNameUserinfoGetResponse, error)
}

type GetJobsComputeSystemNameJobsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJobResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetJobsComputeSystemNameJobsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsComputeSystemNameJobsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobSubmitComputeSystemNameJobsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostJobSubmissionResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostJobSubmitComputeSystemNameJobsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobSubmitComputeSystemNameJobsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobComputeSystemNameJobsJobIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJobResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetJobComputeSystemNameJobsJobIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobComputeSystemNameJobsJobIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachComputeSystemNameJobsJobIdAttachPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r AttachComputeSystemNameJobsJobIdAttachPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachComputeSystemNameJobsJobIdAttachPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetJobMetadataResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChecksumFilesystemSystemNameOpsChecksumGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileChecksumResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetChecksumFilesystemSystemNameOpsChecksumGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChecksumFilesystemSystemNameOpsChecksumGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChmodFilesystemSystemNameOpsChmodPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PutFileChmodResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PutChmodFilesystemSystemNameOpsChmodPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChmodFilesystemSystemNameOpsChmodPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChownFilesystemSystemNameOpsChownPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PutFileChownResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PutChownFilesystemSystemNameOpsChownPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChownFilesystemSystemNameOpsChownPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCompressFilesystemSystemNameOpsCompressPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostCompressFilesystemSystemNameOpsCompressPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCompressFilesystemSystemNameOpsCompressPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDownloadFilesystemSystemNameOpsDownloadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetDownloadFilesystemSystemNameOpsDownloadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDownloadFilesystemSystemNameOpsDownloadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExtractFilesystemSystemNameOpsExtractPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostExtractFilesystemSystemNameOpsExtractPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExtractFilesystemSystemNameOpsExtractPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileFilesystemSystemNameOpsFileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileTypeResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetFileFilesystemSystemNameOpsFileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileFilesystemSystemNameOpsFileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeadFilesystemSystemNameOpsHeadGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileHeadResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetHeadFilesystemSystemNameOpsHeadGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeadFilesystemSystemNameOpsHeadGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLsFilesystemSystemNameOpsLsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDirectoryLsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetLsFilesystemSystemNameOpsLsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLsFilesystemSystemNameOpsLsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMkdirFilesystemSystemNameOpsMkdirPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostMkdirResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostMkdirFilesystemSystemNameOpsMkdirPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMkdirFilesystemSystemNameOpsMkdirPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRmFilesystemSystemNameOpsRmDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteRmFilesystemSystemNameOpsRmDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRmFilesystemSystemNameOpsRmDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatFilesystemSystemNameOpsStatGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileStatResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetStatFilesystemSystemNameOpsStatGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatFilesystemSystemNameOpsStatGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PostFileSymlinkResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTailFilesystemSystemNameOpsTailGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetFileTailResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetTailFilesystemSystemNameOpsTailGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTailFilesystemSystemNameOpsTailGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadFilesystemSystemNameOpsUploadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostUploadFilesystemSystemNameOpsUploadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadFilesystemSystemNameOpsUploadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewFilesystemSystemNameOpsViewGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetViewFileResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetViewFilesystemSystemNameOpsViewGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewFilesystemSystemNameOpsViewGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompressFilesystemSystemNameTransferCompressPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompressResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r CompressFilesystemSystemNameTransferCompressPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompressFilesystemSystemNameTransferCompressPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCpFilesystemSystemNameTransferCpPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CopyResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostCpFilesystemSystemNameTransferCpPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCpFilesystemSystemNameTransferCpPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDownloadFilesystemSystemNameTransferDownloadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DownloadFileResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostDownloadFilesystemSystemNameTransferDownloadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDownloadFilesystemSystemNameTransferDownloadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExtractFilesystemSystemNameTransferExtractPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExtractResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r ExtractFilesystemSystemNameTransferExtractPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExtractFilesystemSystemNameTransferExtractPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveMvFilesystemSystemNameTransferMvPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MoveResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r MoveMvFilesystemSystemNameTransferMvPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveMvFilesystemSystemNameTransferMvPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRmFilesystemSystemNameTransferRmDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r DeleteRmFilesystemSystemNameTransferRmDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRmFilesystemSystemNameTransferRmDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUploadFilesystemSystemNameTransferUploadPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UploadFileResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r PostUploadFilesystemSystemNameTransferUploadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUploadFilesystemSystemNameTransferUploadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLivenessStatusLivenessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetLiveness
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetLivenessStatusLivenessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLivenessStatusLivenessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemsStatusSystemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSystemsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemsStatusSystemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemsStatusSystemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemNodesStatusSystemNameNodesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetNodesResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemNodesStatusSystemNameNodesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemNodesStatusSystemNameNodesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemPartitionsStatusSystemNamePartitionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPartitionsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemPartitionsStatusSystemNamePartitionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemPartitionsStatusSystemNamePartitionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemReservationsStatusSystemNameReservationsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetReservationsResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetSystemReservationsStatusSystemNameReservationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemReservationsStatusSystemNameReservationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserinfoStatusSystemNameUserinfoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInfoResponse
	JSON4XX      *ApiResponseError
	JSON5XX      *ApiResponseError
}

// Status returns HTTPResponse.Status
func (r GetUserinfoStatusSystemNameUserinfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserinfoStatusSystemNameUserinfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetJobsComputeSystemNameJobsGetWithResponse request returning *GetJobsComputeSystemNameJobsGetResponse
func (c *ClientWithResponses) GetJobsComputeSystemNameJobsGetWithResponse(ctx context.Context, systemName string, params *GetJobsComputeSystemNameJobsGetParams, reqEditors ...RequestEditorFn) (*GetJobsComputeSystemNameJobsGetResponse, error) {
	rsp, err := c.GetJobsComputeSystemNameJobsGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsComputeSystemNameJobsGetResponse(rsp)
}

// PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse request with arbitrary body returning *PostJobSubmitComputeSystemNameJobsPostResponse
func (c *ClientWithResponses) PostJobSubmitComputeSystemNameJobsPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error) {
	rsp, err := c.PostJobSubmitComputeSystemNameJobsPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobSubmitComputeSystemNameJobsPostResponse(rsp)
}

func (c *ClientWithResponses) PostJobSubmitComputeSystemNameJobsPostWithResponse(ctx context.Context, systemName string, body PostJobSubmitComputeSystemNameJobsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobSubmitComputeSystemNameJobsPostResponse, error) {
	rsp, err := c.PostJobSubmitComputeSystemNameJobsPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobSubmitComputeSystemNameJobsPostResponse(rsp)
}

// DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse request returning *DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse
func (c *ClientWithResponses) DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse, error) {
	rsp, err := c.DeleteJobCancelComputeSystemNameJobsJobIdDelete(ctx, systemName, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse(rsp)
}

// GetJobComputeSystemNameJobsJobIdGetWithResponse request returning *GetJobComputeSystemNameJobsJobIdGetResponse
func (c *ClientWithResponses) GetJobComputeSystemNameJobsJobIdGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobComputeSystemNameJobsJobIdGetResponse, error) {
	rsp, err := c.GetJobComputeSystemNameJobsJobIdGet(ctx, systemName, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobComputeSystemNameJobsJobIdGetResponse(rsp)
}

// AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse request with arbitrary body returning *AttachComputeSystemNameJobsJobIdAttachPutResponse
func (c *ClientWithResponses) AttachComputeSystemNameJobsJobIdAttachPutWithBodyWithResponse(ctx context.Context, systemName string, jobId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error) {
	rsp, err := c.AttachComputeSystemNameJobsJobIdAttachPutWithBody(ctx, systemName, jobId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachComputeSystemNameJobsJobIdAttachPutResponse(rsp)
}

func (c *ClientWithResponses) AttachComputeSystemNameJobsJobIdAttachPutWithResponse(ctx context.Context, systemName string, jobId string, body AttachComputeSystemNameJobsJobIdAttachPutJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error) {
	rsp, err := c.AttachComputeSystemNameJobsJobIdAttachPut(ctx, systemName, jobId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachComputeSystemNameJobsJobIdAttachPutResponse(rsp)
}

// GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse request returning *GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse
func (c *ClientWithResponses) GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse(ctx context.Context, systemName string, jobId string, reqEditors ...RequestEditorFn) (*GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse, error) {
	rsp, err := c.GetJobMetadataComputeSystemNameJobsJobIdMetadataGet(ctx, systemName, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse(rsp)
}

// GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse request returning *GetChecksumFilesystemSystemNameOpsChecksumGetResponse
func (c *ClientWithResponses) GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse(ctx context.Context, systemName string, params *GetChecksumFilesystemSystemNameOpsChecksumGetParams, reqEditors ...RequestEditorFn) (*GetChecksumFilesystemSystemNameOpsChecksumGetResponse, error) {
	rsp, err := c.GetChecksumFilesystemSystemNameOpsChecksumGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChecksumFilesystemSystemNameOpsChecksumGetResponse(rsp)
}

// PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse request with arbitrary body returning *PutChmodFilesystemSystemNameOpsChmodPutResponse
func (c *ClientWithResponses) PutChmodFilesystemSystemNameOpsChmodPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error) {
	rsp, err := c.PutChmodFilesystemSystemNameOpsChmodPutWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChmodFilesystemSystemNameOpsChmodPutResponse(rsp)
}

func (c *ClientWithResponses) PutChmodFilesystemSystemNameOpsChmodPutWithResponse(ctx context.Context, systemName string, body PutChmodFilesystemSystemNameOpsChmodPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error) {
	rsp, err := c.PutChmodFilesystemSystemNameOpsChmodPut(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChmodFilesystemSystemNameOpsChmodPutResponse(rsp)
}

// PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse request with arbitrary body returning *PutChownFilesystemSystemNameOpsChownPutResponse
func (c *ClientWithResponses) PutChownFilesystemSystemNameOpsChownPutWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error) {
	rsp, err := c.PutChownFilesystemSystemNameOpsChownPutWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChownFilesystemSystemNameOpsChownPutResponse(rsp)
}

func (c *ClientWithResponses) PutChownFilesystemSystemNameOpsChownPutWithResponse(ctx context.Context, systemName string, body PutChownFilesystemSystemNameOpsChownPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChownFilesystemSystemNameOpsChownPutResponse, error) {
	rsp, err := c.PutChownFilesystemSystemNameOpsChownPut(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChownFilesystemSystemNameOpsChownPutResponse(rsp)
}

// PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse request with arbitrary body returning *PostCompressFilesystemSystemNameOpsCompressPostResponse
func (c *ClientWithResponses) PostCompressFilesystemSystemNameOpsCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error) {
	rsp, err := c.PostCompressFilesystemSystemNameOpsCompressPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompressFilesystemSystemNameOpsCompressPostResponse(rsp)
}

func (c *ClientWithResponses) PostCompressFilesystemSystemNameOpsCompressPostWithResponse(ctx context.Context, systemName string, body PostCompressFilesystemSystemNameOpsCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error) {
	rsp, err := c.PostCompressFilesystemSystemNameOpsCompressPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCompressFilesystemSystemNameOpsCompressPostResponse(rsp)
}

// GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse request returning *GetDownloadFilesystemSystemNameOpsDownloadGetResponse
func (c *ClientWithResponses) GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse(ctx context.Context, systemName string, params *GetDownloadFilesystemSystemNameOpsDownloadGetParams, reqEditors ...RequestEditorFn) (*GetDownloadFilesystemSystemNameOpsDownloadGetResponse, error) {
	rsp, err := c.GetDownloadFilesystemSystemNameOpsDownloadGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDownloadFilesystemSystemNameOpsDownloadGetResponse(rsp)
}

// PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse request with arbitrary body returning *PostExtractFilesystemSystemNameOpsExtractPostResponse
func (c *ClientWithResponses) PostExtractFilesystemSystemNameOpsExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error) {
	rsp, err := c.PostExtractFilesystemSystemNameOpsExtractPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExtractFilesystemSystemNameOpsExtractPostResponse(rsp)
}

func (c *ClientWithResponses) PostExtractFilesystemSystemNameOpsExtractPostWithResponse(ctx context.Context, systemName string, body PostExtractFilesystemSystemNameOpsExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error) {
	rsp, err := c.PostExtractFilesystemSystemNameOpsExtractPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExtractFilesystemSystemNameOpsExtractPostResponse(rsp)
}

// GetFileFilesystemSystemNameOpsFileGetWithResponse request returning *GetFileFilesystemSystemNameOpsFileGetResponse
func (c *ClientWithResponses) GetFileFilesystemSystemNameOpsFileGetWithResponse(ctx context.Context, systemName string, params *GetFileFilesystemSystemNameOpsFileGetParams, reqEditors ...RequestEditorFn) (*GetFileFilesystemSystemNameOpsFileGetResponse, error) {
	rsp, err := c.GetFileFilesystemSystemNameOpsFileGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFileFilesystemSystemNameOpsFileGetResponse(rsp)
}

// GetHeadFilesystemSystemNameOpsHeadGetWithResponse request returning *GetHeadFilesystemSystemNameOpsHeadGetResponse
func (c *ClientWithResponses) GetHeadFilesystemSystemNameOpsHeadGetWithResponse(ctx context.Context, systemName string, params *GetHeadFilesystemSystemNameOpsHeadGetParams, reqEditors ...RequestEditorFn) (*GetHeadFilesystemSystemNameOpsHeadGetResponse, error) {
	rsp, err := c.GetHeadFilesystemSystemNameOpsHeadGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeadFilesystemSystemNameOpsHeadGetResponse(rsp)
}

// GetLsFilesystemSystemNameOpsLsGetWithResponse request returning *GetLsFilesystemSystemNameOpsLsGetResponse
func (c *ClientWithResponses) GetLsFilesystemSystemNameOpsLsGetWithResponse(ctx context.Context, systemName string, params *GetLsFilesystemSystemNameOpsLsGetParams, reqEditors ...RequestEditorFn) (*GetLsFilesystemSystemNameOpsLsGetResponse, error) {
	rsp, err := c.GetLsFilesystemSystemNameOpsLsGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLsFilesystemSystemNameOpsLsGetResponse(rsp)
}

// PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse request with arbitrary body returning *PostMkdirFilesystemSystemNameOpsMkdirPostResponse
func (c *ClientWithResponses) PostMkdirFilesystemSystemNameOpsMkdirPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error) {
	rsp, err := c.PostMkdirFilesystemSystemNameOpsMkdirPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse(rsp)
}

func (c *ClientWithResponses) PostMkdirFilesystemSystemNameOpsMkdirPostWithResponse(ctx context.Context, systemName string, body PostMkdirFilesystemSystemNameOpsMkdirPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error) {
	rsp, err := c.PostMkdirFilesystemSystemNameOpsMkdirPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse(rsp)
}

// DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse request returning *DeleteRmFilesystemSystemNameOpsRmDeleteResponse
func (c *ClientWithResponses) DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameOpsRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameOpsRmDeleteResponse, error) {
	rsp, err := c.DeleteRmFilesystemSystemNameOpsRmDelete(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRmFilesystemSystemNameOpsRmDeleteResponse(rsp)
}

// GetStatFilesystemSystemNameOpsStatGetWithResponse request returning *GetStatFilesystemSystemNameOpsStatGetResponse
func (c *ClientWithResponses) GetStatFilesystemSystemNameOpsStatGetWithResponse(ctx context.Context, systemName string, params *GetStatFilesystemSystemNameOpsStatGetParams, reqEditors ...RequestEditorFn) (*GetStatFilesystemSystemNameOpsStatGetResponse, error) {
	rsp, err := c.GetStatFilesystemSystemNameOpsStatGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatFilesystemSystemNameOpsStatGetResponse(rsp)
}

// PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse request with arbitrary body returning *PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse
func (c *ClientWithResponses) PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error) {
	rsp, err := c.PostSymlinkFilesystemSystemNameOpsSymlinkPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse(rsp)
}

func (c *ClientWithResponses) PostSymlinkFilesystemSystemNameOpsSymlinkPostWithResponse(ctx context.Context, systemName string, body PostSymlinkFilesystemSystemNameOpsSymlinkPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error) {
	rsp, err := c.PostSymlinkFilesystemSystemNameOpsSymlinkPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse(rsp)
}

// GetTailFilesystemSystemNameOpsTailGetWithResponse request returning *GetTailFilesystemSystemNameOpsTailGetResponse
func (c *ClientWithResponses) GetTailFilesystemSystemNameOpsTailGetWithResponse(ctx context.Context, systemName string, params *GetTailFilesystemSystemNameOpsTailGetParams, reqEditors ...RequestEditorFn) (*GetTailFilesystemSystemNameOpsTailGetResponse, error) {
	rsp, err := c.GetTailFilesystemSystemNameOpsTailGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTailFilesystemSystemNameOpsTailGetResponse(rsp)
}

// PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse request with arbitrary body returning *PostUploadFilesystemSystemNameOpsUploadPostResponse
func (c *ClientWithResponses) PostUploadFilesystemSystemNameOpsUploadPostWithBodyWithResponse(ctx context.Context, systemName string, params *PostUploadFilesystemSystemNameOpsUploadPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameOpsUploadPostResponse, error) {
	rsp, err := c.PostUploadFilesystemSystemNameOpsUploadPostWithBody(ctx, systemName, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadFilesystemSystemNameOpsUploadPostResponse(rsp)
}

// GetViewFilesystemSystemNameOpsViewGetWithResponse request returning *GetViewFilesystemSystemNameOpsViewGetResponse
func (c *ClientWithResponses) GetViewFilesystemSystemNameOpsViewGetWithResponse(ctx context.Context, systemName string, params *GetViewFilesystemSystemNameOpsViewGetParams, reqEditors ...RequestEditorFn) (*GetViewFilesystemSystemNameOpsViewGetResponse, error) {
	rsp, err := c.GetViewFilesystemSystemNameOpsViewGet(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewFilesystemSystemNameOpsViewGetResponse(rsp)
}

// CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse request with arbitrary body returning *CompressFilesystemSystemNameTransferCompressPostResponse
func (c *ClientWithResponses) CompressFilesystemSystemNameTransferCompressPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error) {
	rsp, err := c.CompressFilesystemSystemNameTransferCompressPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressFilesystemSystemNameTransferCompressPostResponse(rsp)
}

func (c *ClientWithResponses) CompressFilesystemSystemNameTransferCompressPostWithResponse(ctx context.Context, systemName string, body CompressFilesystemSystemNameTransferCompressPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CompressFilesystemSystemNameTransferCompressPostResponse, error) {
	rsp, err := c.CompressFilesystemSystemNameTransferCompressPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompressFilesystemSystemNameTransferCompressPostResponse(rsp)
}

// PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse request with arbitrary body returning *PostCpFilesystemSystemNameTransferCpPostResponse
func (c *ClientWithResponses) PostCpFilesystemSystemNameTransferCpPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error) {
	rsp, err := c.PostCpFilesystemSystemNameTransferCpPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCpFilesystemSystemNameTransferCpPostResponse(rsp)
}

func (c *ClientWithResponses) PostCpFilesystemSystemNameTransferCpPostWithResponse(ctx context.Context, systemName string, body PostCpFilesystemSystemNameTransferCpPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCpFilesystemSystemNameTransferCpPostResponse, error) {
	rsp, err := c.PostCpFilesystemSystemNameTransferCpPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCpFilesystemSystemNameTransferCpPostResponse(rsp)
}

// PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse request with arbitrary body returning *PostDownloadFilesystemSystemNameTransferDownloadPostResponse
func (c *ClientWithResponses) PostDownloadFilesystemSystemNameTransferDownloadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error) {
	rsp, err := c.PostDownloadFilesystemSystemNameTransferDownloadPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse(rsp)
}

func (c *ClientWithResponses) PostDownloadFilesystemSystemNameTransferDownloadPostWithResponse(ctx context.Context, systemName string, body PostDownloadFilesystemSystemNameTransferDownloadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error) {
	rsp, err := c.PostDownloadFilesystemSystemNameTransferDownloadPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse(rsp)
}

// ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse request with arbitrary body returning *ExtractFilesystemSystemNameTransferExtractPostResponse
func (c *ClientWithResponses) ExtractFilesystemSystemNameTransferExtractPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error) {
	rsp, err := c.ExtractFilesystemSystemNameTransferExtractPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractFilesystemSystemNameTransferExtractPostResponse(rsp)
}

func (c *ClientWithResponses) ExtractFilesystemSystemNameTransferExtractPostWithResponse(ctx context.Context, systemName string, body ExtractFilesystemSystemNameTransferExtractPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error) {
	rsp, err := c.ExtractFilesystemSystemNameTransferExtractPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExtractFilesystemSystemNameTransferExtractPostResponse(rsp)
}

// MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse request with arbitrary body returning *MoveMvFilesystemSystemNameTransferMvPostResponse
func (c *ClientWithResponses) MoveMvFilesystemSystemNameTransferMvPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error) {
	rsp, err := c.MoveMvFilesystemSystemNameTransferMvPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMvFilesystemSystemNameTransferMvPostResponse(rsp)
}

func (c *ClientWithResponses) MoveMvFilesystemSystemNameTransferMvPostWithResponse(ctx context.Context, systemName string, body MoveMvFilesystemSystemNameTransferMvPostJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error) {
	rsp, err := c.MoveMvFilesystemSystemNameTransferMvPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveMvFilesystemSystemNameTransferMvPostResponse(rsp)
}

// DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse request returning *DeleteRmFilesystemSystemNameTransferRmDeleteResponse
func (c *ClientWithResponses) DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse(ctx context.Context, systemName string, params *DeleteRmFilesystemSystemNameTransferRmDeleteParams, reqEditors ...RequestEditorFn) (*DeleteRmFilesystemSystemNameTransferRmDeleteResponse, error) {
	rsp, err := c.DeleteRmFilesystemSystemNameTransferRmDelete(ctx, systemName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRmFilesystemSystemNameTransferRmDeleteResponse(rsp)
}

// PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse request with arbitrary body returning *PostUploadFilesystemSystemNameTransferUploadPostResponse
func (c *ClientWithResponses) PostUploadFilesystemSystemNameTransferUploadPostWithBodyWithResponse(ctx context.Context, systemName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error) {
	rsp, err := c.PostUploadFilesystemSystemNameTransferUploadPostWithBody(ctx, systemName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadFilesystemSystemNameTransferUploadPostResponse(rsp)
}

func (c *ClientWithResponses) PostUploadFilesystemSystemNameTransferUploadPostWithResponse(ctx context.Context, systemName string, body PostUploadFilesystemSystemNameTransferUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error) {
	rsp, err := c.PostUploadFilesystemSystemNameTransferUploadPost(ctx, systemName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUploadFilesystemSystemNameTransferUploadPostResponse(rsp)
}

// GetLivenessStatusLivenessGetWithResponse request returning *GetLivenessStatusLivenessGetResponse
func (c *ClientWithResponses) GetLivenessStatusLivenessGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLivenessStatusLivenessGetResponse, error) {
	rsp, err := c.GetLivenessStatusLivenessGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLivenessStatusLivenessGetResponse(rsp)
}

// GetSystemsStatusSystemsGetWithResponse request returning *GetSystemsStatusSystemsGetResponse
func (c *ClientWithResponses) GetSystemsStatusSystemsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemsStatusSystemsGetResponse, error) {
	rsp, err := c.GetSystemsStatusSystemsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemsStatusSystemsGetResponse(rsp)
}

// GetSystemNodesStatusSystemNameNodesGetWithResponse request returning *GetSystemNodesStatusSystemNameNodesGetResponse
func (c *ClientWithResponses) GetSystemNodesStatusSystemNameNodesGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemNodesStatusSystemNameNodesGetResponse, error) {
	rsp, err := c.GetSystemNodesStatusSystemNameNodesGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemNodesStatusSystemNameNodesGetResponse(rsp)
}

// GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse request returning *GetSystemPartitionsStatusSystemNamePartitionsGetResponse
func (c *ClientWithResponses) GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemPartitionsStatusSystemNamePartitionsGetResponse, error) {
	rsp, err := c.GetSystemPartitionsStatusSystemNamePartitionsGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemPartitionsStatusSystemNamePartitionsGetResponse(rsp)
}

// GetSystemReservationsStatusSystemNameReservationsGetWithResponse request returning *GetSystemReservationsStatusSystemNameReservationsGetResponse
func (c *ClientWithResponses) GetSystemReservationsStatusSystemNameReservationsGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetSystemReservationsStatusSystemNameReservationsGetResponse, error) {
	rsp, err := c.GetSystemReservationsStatusSystemNameReservationsGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemReservationsStatusSystemNameReservationsGetResponse(rsp)
}

// GetUserinfoStatusSystemNameUserinfoGetWithResponse request returning *GetUserinfoStatusSystemNameUserinfoGetResponse
func (c *ClientWithResponses) GetUserinfoStatusSystemNameUserinfoGetWithResponse(ctx context.Context, systemName string, reqEditors ...RequestEditorFn) (*GetUserinfoStatusSystemNameUserinfoGetResponse, error) {
	rsp, err := c.GetUserinfoStatusSystemNameUserinfoGet(ctx, systemName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserinfoStatusSystemNameUserinfoGetResponse(rsp)
}

// ParseGetJobsComputeSystemNameJobsGetResponse parses an HTTP response from a GetJobsComputeSystemNameJobsGetWithResponse call
func ParseGetJobsComputeSystemNameJobsGetResponse(rsp *http.Response) (*GetJobsComputeSystemNameJobsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsComputeSystemNameJobsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostJobSubmitComputeSystemNameJobsPostResponse parses an HTTP response from a PostJobSubmitComputeSystemNameJobsPostWithResponse call
func ParsePostJobSubmitComputeSystemNameJobsPostResponse(rsp *http.Response) (*PostJobSubmitComputeSystemNameJobsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobSubmitComputeSystemNameJobsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostJobSubmissionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse parses an HTTP response from a DeleteJobCancelComputeSystemNameJobsJobIdDeleteWithResponse call
func ParseDeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse(rsp *http.Response) (*DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobCancelComputeSystemNameJobsJobIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetJobComputeSystemNameJobsJobIdGetResponse parses an HTTP response from a GetJobComputeSystemNameJobsJobIdGetWithResponse call
func ParseGetJobComputeSystemNameJobsJobIdGetResponse(rsp *http.Response) (*GetJobComputeSystemNameJobsJobIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobComputeSystemNameJobsJobIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseAttachComputeSystemNameJobsJobIdAttachPutResponse parses an HTTP response from a AttachComputeSystemNameJobsJobIdAttachPutWithResponse call
func ParseAttachComputeSystemNameJobsJobIdAttachPutResponse(rsp *http.Response) (*AttachComputeSystemNameJobsJobIdAttachPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachComputeSystemNameJobsJobIdAttachPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse parses an HTTP response from a GetJobMetadataComputeSystemNameJobsJobIdMetadataGetWithResponse call
func ParseGetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse(rsp *http.Response) (*GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobMetadataComputeSystemNameJobsJobIdMetadataGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetJobMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetChecksumFilesystemSystemNameOpsChecksumGetResponse parses an HTTP response from a GetChecksumFilesystemSystemNameOpsChecksumGetWithResponse call
func ParseGetChecksumFilesystemSystemNameOpsChecksumGetResponse(rsp *http.Response) (*GetChecksumFilesystemSystemNameOpsChecksumGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChecksumFilesystemSystemNameOpsChecksumGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileChecksumResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutChmodFilesystemSystemNameOpsChmodPutResponse parses an HTTP response from a PutChmodFilesystemSystemNameOpsChmodPutWithResponse call
func ParsePutChmodFilesystemSystemNameOpsChmodPutResponse(rsp *http.Response) (*PutChmodFilesystemSystemNameOpsChmodPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChmodFilesystemSystemNameOpsChmodPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutFileChmodResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePutChownFilesystemSystemNameOpsChownPutResponse parses an HTTP response from a PutChownFilesystemSystemNameOpsChownPutWithResponse call
func ParsePutChownFilesystemSystemNameOpsChownPutResponse(rsp *http.Response) (*PutChownFilesystemSystemNameOpsChownPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChownFilesystemSystemNameOpsChownPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PutFileChownResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostCompressFilesystemSystemNameOpsCompressPostResponse parses an HTTP response from a PostCompressFilesystemSystemNameOpsCompressPostWithResponse call
func ParsePostCompressFilesystemSystemNameOpsCompressPostResponse(rsp *http.Response) (*PostCompressFilesystemSystemNameOpsCompressPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCompressFilesystemSystemNameOpsCompressPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetDownloadFilesystemSystemNameOpsDownloadGetResponse parses an HTTP response from a GetDownloadFilesystemSystemNameOpsDownloadGetWithResponse call
func ParseGetDownloadFilesystemSystemNameOpsDownloadGetResponse(rsp *http.Response) (*GetDownloadFilesystemSystemNameOpsDownloadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDownloadFilesystemSystemNameOpsDownloadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostExtractFilesystemSystemNameOpsExtractPostResponse parses an HTTP response from a PostExtractFilesystemSystemNameOpsExtractPostWithResponse call
func ParsePostExtractFilesystemSystemNameOpsExtractPostResponse(rsp *http.Response) (*PostExtractFilesystemSystemNameOpsExtractPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExtractFilesystemSystemNameOpsExtractPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetFileFilesystemSystemNameOpsFileGetResponse parses an HTTP response from a GetFileFilesystemSystemNameOpsFileGetWithResponse call
func ParseGetFileFilesystemSystemNameOpsFileGetResponse(rsp *http.Response) (*GetFileFilesystemSystemNameOpsFileGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFileFilesystemSystemNameOpsFileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetHeadFilesystemSystemNameOpsHeadGetResponse parses an HTTP response from a GetHeadFilesystemSystemNameOpsHeadGetWithResponse call
func ParseGetHeadFilesystemSystemNameOpsHeadGetResponse(rsp *http.Response) (*GetHeadFilesystemSystemNameOpsHeadGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeadFilesystemSystemNameOpsHeadGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileHeadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetLsFilesystemSystemNameOpsLsGetResponse parses an HTTP response from a GetLsFilesystemSystemNameOpsLsGetWithResponse call
func ParseGetLsFilesystemSystemNameOpsLsGetResponse(rsp *http.Response) (*GetLsFilesystemSystemNameOpsLsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLsFilesystemSystemNameOpsLsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDirectoryLsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse parses an HTTP response from a PostMkdirFilesystemSystemNameOpsMkdirPostWithResponse call
func ParsePostMkdirFilesystemSystemNameOpsMkdirPostResponse(rsp *http.Response) (*PostMkdirFilesystemSystemNameOpsMkdirPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMkdirFilesystemSystemNameOpsMkdirPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostMkdirResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteRmFilesystemSystemNameOpsRmDeleteResponse parses an HTTP response from a DeleteRmFilesystemSystemNameOpsRmDeleteWithResponse call
func ParseDeleteRmFilesystemSystemNameOpsRmDeleteResponse(rsp *http.Response) (*DeleteRmFilesystemSystemNameOpsRmDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRmFilesystemSystemNameOpsRmDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetStatFilesystemSystemNameOpsStatGetResponse parses an HTTP response from a GetStatFilesystemSystemNameOpsStatGetWithResponse call
func ParseGetStatFilesystemSystemNameOpsStatGetResponse(rsp *http.Response) (*GetStatFilesystemSystemNameOpsStatGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatFilesystemSystemNameOpsStatGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileStatResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse parses an HTTP response from a PostSymlinkFilesystemSystemNameOpsSymlinkPostWithResponse call
func ParsePostSymlinkFilesystemSystemNameOpsSymlinkPostResponse(rsp *http.Response) (*PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSymlinkFilesystemSystemNameOpsSymlinkPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PostFileSymlinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetTailFilesystemSystemNameOpsTailGetResponse parses an HTTP response from a GetTailFilesystemSystemNameOpsTailGetWithResponse call
func ParseGetTailFilesystemSystemNameOpsTailGetResponse(rsp *http.Response) (*GetTailFilesystemSystemNameOpsTailGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTailFilesystemSystemNameOpsTailGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetFileTailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostUploadFilesystemSystemNameOpsUploadPostResponse parses an HTTP response from a PostUploadFilesystemSystemNameOpsUploadPostWithResponse call
func ParsePostUploadFilesystemSystemNameOpsUploadPostResponse(rsp *http.Response) (*PostUploadFilesystemSystemNameOpsUploadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadFilesystemSystemNameOpsUploadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetViewFilesystemSystemNameOpsViewGetResponse parses an HTTP response from a GetViewFilesystemSystemNameOpsViewGetWithResponse call
func ParseGetViewFilesystemSystemNameOpsViewGetResponse(rsp *http.Response) (*GetViewFilesystemSystemNameOpsViewGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetViewFilesystemSystemNameOpsViewGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetViewFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseCompressFilesystemSystemNameTransferCompressPostResponse parses an HTTP response from a CompressFilesystemSystemNameTransferCompressPostWithResponse call
func ParseCompressFilesystemSystemNameTransferCompressPostResponse(rsp *http.Response) (*CompressFilesystemSystemNameTransferCompressPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompressFilesystemSystemNameTransferCompressPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostCpFilesystemSystemNameTransferCpPostResponse parses an HTTP response from a PostCpFilesystemSystemNameTransferCpPostWithResponse call
func ParsePostCpFilesystemSystemNameTransferCpPostResponse(rsp *http.Response) (*PostCpFilesystemSystemNameTransferCpPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCpFilesystemSystemNameTransferCpPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CopyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse parses an HTTP response from a PostDownloadFilesystemSystemNameTransferDownloadPostWithResponse call
func ParsePostDownloadFilesystemSystemNameTransferDownloadPostResponse(rsp *http.Response) (*PostDownloadFilesystemSystemNameTransferDownloadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDownloadFilesystemSystemNameTransferDownloadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DownloadFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseExtractFilesystemSystemNameTransferExtractPostResponse parses an HTTP response from a ExtractFilesystemSystemNameTransferExtractPostWithResponse call
func ParseExtractFilesystemSystemNameTransferExtractPostResponse(rsp *http.Response) (*ExtractFilesystemSystemNameTransferExtractPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExtractFilesystemSystemNameTransferExtractPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExtractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseMoveMvFilesystemSystemNameTransferMvPostResponse parses an HTTP response from a MoveMvFilesystemSystemNameTransferMvPostWithResponse call
func ParseMoveMvFilesystemSystemNameTransferMvPostResponse(rsp *http.Response) (*MoveMvFilesystemSystemNameTransferMvPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveMvFilesystemSystemNameTransferMvPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MoveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseDeleteRmFilesystemSystemNameTransferRmDeleteResponse parses an HTTP response from a DeleteRmFilesystemSystemNameTransferRmDeleteWithResponse call
func ParseDeleteRmFilesystemSystemNameTransferRmDeleteResponse(rsp *http.Response) (*DeleteRmFilesystemSystemNameTransferRmDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRmFilesystemSystemNameTransferRmDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParsePostUploadFilesystemSystemNameTransferUploadPostResponse parses an HTTP response from a PostUploadFilesystemSystemNameTransferUploadPostWithResponse call
func ParsePostUploadFilesystemSystemNameTransferUploadPostResponse(rsp *http.Response) (*PostUploadFilesystemSystemNameTransferUploadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUploadFilesystemSystemNameTransferUploadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UploadFileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetLivenessStatusLivenessGetResponse parses an HTTP response from a GetLivenessStatusLivenessGetWithResponse call
func ParseGetLivenessStatusLivenessGetResponse(rsp *http.Response) (*GetLivenessStatusLivenessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLivenessStatusLivenessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetLiveness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemsStatusSystemsGetResponse parses an HTTP response from a GetSystemsStatusSystemsGetWithResponse call
func ParseGetSystemsStatusSystemsGetResponse(rsp *http.Response) (*GetSystemsStatusSystemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemsStatusSystemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSystemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemNodesStatusSystemNameNodesGetResponse parses an HTTP response from a GetSystemNodesStatusSystemNameNodesGetWithResponse call
func ParseGetSystemNodesStatusSystemNameNodesGetResponse(rsp *http.Response) (*GetSystemNodesStatusSystemNameNodesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemNodesStatusSystemNameNodesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemPartitionsStatusSystemNamePartitionsGetResponse parses an HTTP response from a GetSystemPartitionsStatusSystemNamePartitionsGetWithResponse call
func ParseGetSystemPartitionsStatusSystemNamePartitionsGetResponse(rsp *http.Response) (*GetSystemPartitionsStatusSystemNamePartitionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemPartitionsStatusSystemNamePartitionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPartitionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetSystemReservationsStatusSystemNameReservationsGetResponse parses an HTTP response from a GetSystemReservationsStatusSystemNameReservationsGetWithResponse call
func ParseGetSystemReservationsStatusSystemNameReservationsGetResponse(rsp *http.Response) (*GetSystemReservationsStatusSystemNameReservationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemReservationsStatusSystemNameReservationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetReservationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseGetUserinfoStatusSystemNameUserinfoGetResponse parses an HTTP response from a GetUserinfoStatusSystemNameUserinfoGetWithResponse call
func ParseGetUserinfoStatusSystemNameUserinfoGetResponse(rsp *http.Response) (*GetUserinfoStatusSystemNameUserinfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserinfoStatusSystemNameUserinfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest ApiResponseError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JeT+/n8CAAD//3ss52YLEwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
